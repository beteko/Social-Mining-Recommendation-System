 Extraction de Dépendances Fonctionnelles Approximatives une Approche Incrémentale Ekaterina Simonenko et Noël Novelli LRI CNRS UMR 8623 Université Paris Sud XI F 91405 Orsay Cedex ekaterina simonenko lri fr LIF CNRS UMR 6166 – Case 901 Université d’Aix Marseille Faculté des Sciences de Luminy F 13288 Marseille Cedex 9 noel novelli lif univ mrs fr Résumé La découverte de dépendances fonctionnelles DF à partir d’une rela tion existante est une technique importante pour l’analyse de Bases de Données L’ensemble des DF exactes ou approximatives extraites par les algorithmes exis tants est valide tant que la relation n’est pas modifiée Ceci est insuffisant pour des situations réelles où les relations sont constamment mises à jour Nous proposons une approche incrémentale qui maintiens à jour l’ensemble des DF valides exactes ou approximatives selon une erreur donnée quand des tuples sont insérés et supprimés Les résultats expérimentaux indiquent que lors de l’ex traction de DF à partir d’une relation continuellement modifiée les algorithmes existants sont sensiblement dépassés par notre stratégie incrémentale 1 Contexte Les Dépendances Fonctionnelles DF représentent les contraintes d’intégrité les plus cou rantes et les plus importantes en Bases de Données Mannila et Räihä 1994 Une DF entre 2 attributs X Y notée X → Y est vraie dans une relation si les valeurs de Y sont totalement déterminées par les valeurs de X Codd 1970 Le problème de l’extraction de DF est le suivant “Étant donnée une relation r trouver toutes les DF qui sont valides dans r” Les Dé pendances Fonctionnelles Approximatives DFA généralisent les DF et sont définies comme “les DF qui sont presque valides dans r i e quelques tuples doivent être retirés de la relation r pour que la DF X → Y soit vraie dans r” Kivinen et Mannila 1995 Des DFA apparaissent dans les relations s’il existe une dépendance naturelle entre les attributs mais certains tuples contiennent des erreurs ou représentent une exception Comme des erreurs peuvent être pré sentes dans les BD les DF approximatives sont particulièrement intéressantes Récemment la taille des bases de données a augmenté significativement voire de façon infi nie pour les flux de données rendant les algorithmes existants inefficaces Ces approches ne peuvent considérer que des relations figées Quand un tuple est ajouté ou supprimé l’ensemble des DF valides doit être recalculé Les algorithmes les plus efficaces pour l’inférence de DF sont TANE Huhtala et al 1998 77 DEPMINER Lopes et al 2000 FASTFDS Wyss et al 2001 et FUN Novelli et Cicchetti 2001 Ces approches extraient l’ensemble des DF minimales et non triviales la couverture canonique de DF Cette dernière est équivalente à l’ensemble des DF Codd 1970 D’un point de vue formel DEPMINER et FASTFDS sont basés sur la caractérisation des parties gauches des dépendances minimales non triviales comme étant l’ensemble des transversaux minimaux d’un hypergraphe Mannila et Räihä 1994 En revanche TANE et FUN énumèrent toutes les sources de DF possibles et déterminent si ces sources induisent des DF minimales non triviales Concernant les DF Approximatives DFA leur extraction est faite de façon efficace par DEP MINER TANE et FUN TANE et FUN reprennent l’une des mesures d’erreur définie dans Man nila et Räihä 1994 Kivinen et Mannila 1995 appelé g3 comme la proportion minimale de tuples qu’il suffit de supprimer de la relation pour que la DF soit satisfaite par tous les tuples restants L’erreur est égale à 0 si la DF est exacte et proche de 1 si la DF n’est vérifiée que par un petit nombre de tuples Ces travaux permettent l’extraction des DF d’une relation figée A notre connaissance seule l’approche INCFDS Gasmi 2010 prend en compte les modifications insertion de tuples uniquement de la relation pour maintenir à jour l’ensemble des DF exactes valides L’ap proche est basée sur la détection des modifications induites lors de l’insertion de tuples dans la relation sur les ensembles en accord puis bien sûr sur les maximaux et leurs complémentaires 2 Approche Incrémentale pour la découverte de DFA Nous désignons par R un schéma de relation et r une relation sur R Un sous ensemble maximal S de X ⊆ R est un sous ensemble de X tel que S ⊂ X et |S| = |X | − 1 La cardinalité d’une combinaison d’attributs X dans r noté |X |r représente le nombre de valeurs distinctes de X dans r |r| représente la cardinalité de r c’est à dire le nombre de tuples de r Pour chaque combinaison d’attributs X l’ensemble de ses valeurs réelles le domaine actif dans la relation r est noté ADomr X 2 1 Définitions Définition 1 Dépendances Fonctionnelles DF Soit X A ⊂ R une combinaison d’attributs La dépendance fonctionnelle entre X et A notée X → A est valide dans r si est seulement si ∀ t1 t2 deux tuples de r si t1[X ] = t2[X ] alors t1[A] = t2[A] X → A est une DF minimale si et seulement si ∀ X ′ ⊂ X X ′ 6→ A X → A est une DF non triviale si et seulement si A 6⊆ X Définition 2 Kivinen et Mannila 1995 Dépendances Fonctionnelles Approximatives DFA Une DF entre X et A est dite approximative suivant l’erreur ε notée X ⇁ε A si g3 X → A ≤ ε où la fonction g3 calcule la proportion par rapport à |r| des tuples qu’il faut retirer à r pour que la DF X → A soit valide 2 2 Extraction Incrémentale de DFA Soit Remover X ⇁ε A où X désigne une combinaison d’attributs et A un attribut un ensemble minimal de tuples à retirer de la relation r pour que la DF exacte X → A soit 2 78 valide Soit er X ⇁ε A = |Remover X ⇁ε A | le nombre de tuples à enlever de r pour rendre la DF X → A valide Dans la suite er X ⇁ε A est souvent appelé “erreur” Le Théorème suivant décrit l’influence de l’insertion d’un tuple t sur er X ⇁ε A Théorème 1 Étant donnée une DFA X ⇁ε A valide sur r er∪t X ⇁ε A ≥ er X ⇁ε A Preuve Soit t le tuple qui va être inséré Considérons t[X ] la valeur de t sur la combinaison d’attributs X Si t[X ] 6∈ ADomr X le tuple t ne peut pas violer la DF X → A puisque la valeur de t sur X est nouvelle Donc er X ⇁ε A reste le même er∪t X ⇁ε A = er X ⇁ε A Sinon t[X ] ∈ ADomr X 1 Si t[XA] 6∈ ADomr XA on peut en déduire que soit t[A] 6∈ ADomr A soit t[A] n’a encore jamais été associée à t[X ] Dans les 2 cas t viole la DF X → A Or t[XA] 6∈ ADomr XA ⇒ t[XA] 6∈ ADom Remover X ⇁ε A [XA] et donc Remover∪t X ⇁ε A = Remover X ⇁ε A ∪ t et er∪t X ⇁ε A = er X ⇁ε A + 1 Il n’est donc pas nécessaire de recalculer er X ⇁ε A 2 Si t[XA] ∈ ADomr XA a Si t[XA] 6∈ ADom Remover∪t X ⇁ε A [XA] alors t[XA] ∈ ADom Remover∪t X ⇁ε A [XA] puisque t[XA] ∈ ADomr XA donc t satisfait la DF X → A et er X ⇁ε A ne change pas b Si t[XA] ∈ ADom Remover∪t X ⇁ε A [XA] ce qui signifie que les tuples avec la même valeur sur XA que t sont considérés comme non vérifiant la DF X → A Malheureusement ajouter t dans Remover X ⇁ε A ne suffit pas car après avoir incrémenté la cardinalité de Remover X ⇁ε A il est nécessaire de vérifier sa minimalité ce qui implique le recalcule complet de Remover∪t X ⇁ε A [XA] ✷ Il est clair que lors de l’insertion d’un tuple l’erreur ne peut qu’augmenter de 1 De plus la preuve de ce théorème énumère tous les cas à considérer et permet donc de ne recalculer er∪t X ⇁ε A que lorsque c’est strictement nécessaire Le théorème suivant donne le résultat analogue pour la suppression d’un tuple Théorème 2 Étant donnée une DFA X ⇁ε A valide sur r er\t X ⇁ε A ≤ er X ⇁ε A Preuve La preuve de ce théorème n’est pas explicitée ici par manque de place mais elle suit le même cheminement que celle du théorème 1 ✷ Pour maintenir l’ensemble des DFA valides dans une relation selon une erreur ε donnée une représentation interne basée sur la caractérisation des DFA introduite dans Novelli 2000 est utilisée Celle ci est une table contenant pour chaque combinaison d’attributs X sa quasi fermeture approximative X◦r et sa fermeture approximative X ⊕ r Quand un tuple est ajouté ou supprimé d’une relation pour certaines DFA l’erreur er X ⇁ε A change et donc la repré sentation interne doit être mise à jour pour découvrir le nouvel ensemble de DFA minimales valides 3 79 2 3 Algorithme AFD DYNAMICUPDATE L’algorithme AFD DYNAMICUPDATE que nous décrivons ci après maintient à jour l’en semble des DFA valides dans une relation suivant une erreur donnée Il s’appuie sur les théo rèmes 1 et 2 ainsi que sur leur preuve pour minimiser le nombre de recalcul d’erreur de chaque DFA Le recalcule de l’erreur n’est appelé que si c’est strictement nécessaire Lorsqu’un tuple est ajouté la représentation correspondante doit être mise à jour Cela consiste à vérifier quelles DFA doivent être ajoutées ou supprimées de l’ensemble des DFA valides Une approche par niveau est utilisée pour le parcours des candidats Pour la suppression seule la fonction RecalculateError est modifiée suivant le Théo rème 2 Algorithm 1 AFD DYNAMICUPDATE R TupleInQuestion ε g3[] Levels Input R L’ensemble d’attributs de la relation considérée TupleInQuestion Le tuple inséré ε L’erreur maximale admissible Input Output g3[] Les erreurs par rapport à |r| de DFX ⇁ε A Levels La représentation 1 for all i ∈ [1 Levels NbLevel] do 2 for all candidate l ∈ Li do 3 for all subset s ⊂ l candidate |s| = |l candidate| − 1 do 4 X = s candidate 5 A = {l candidate− s candidate} 6 g3[X ⇁ε A] = RecalculateError l Remover X ⇁ ε A ErrorChanges 7 if ErrorChanges then 8 if g3[X ⇁ε A] ≤ ε then 9 if A 6∈ s closure then 10 s closure = s closure ∪A 11 for all superset S ⊃ s candidate |s| = |l candidate|+ 1 do 12 UpdateQuasiClosureAdd S A 13 else if g3[X ⇁ε A] > ε then 14 if A ∈ s closure then 15 s closure = s closure −A 16 for all superset S ⊃ s candidate |s| = |l candidate|+ 1 do 17 UpdateQuasiClosureDelete S A 18 DisplayFDs Li − 1 2 4 Expérimentations pour AFD DYNAMICUPDATE L’algorithme a été implémenté en C++ avec QT4 Plusieurs expérimentations ont été réali sées sur un ordinateur équipé d’un processeur Pentium 4 cadencé à 3GHz avec 1Go de RAM Pour les comparaisons entre AFD DYNAMICUPDATE et FUN nous commençons à partir d’une relation vide et ajoutons un par un chaque tuple donc tuples fois 1 Pour chaque 1 Les résultats obtenus pour les suppressions sont similaires à ceux obtenus pour l’ajout 4 80 tuple inséré l’approche FUN est exécutée Les temps d’exécution de FUN donnés dans les comparaisons correspondent à la somme des temps de calcul de FUN pour chaque relation mo difiée Les figures 1 A et 1 B détaillent pour différentes valeurs des paramètres des relations synthétiques les temps d’exécution de AFD DYNAMICUPDATE La figure 1 A montre que AFD DYNAMICUPDATE est indépendant de la corrélation des données 30% 50% 70% et bien sûr qu’il est exponentiel au nombre d’attributs La figure 1 B illustre que l’algorithme est linéaire au nombre de tuples ajoutés dans la relation 0 5 10 15 20 25 30 35 5 7 9 T e m p s e n s e c o n d e Nombre d’attributs A Relation de 5000 tuples Taux de correlation 30% Taux de correlation 50% Taux de correlation 70% 0 20 40 60 80 100 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 T e m p s e n s e c o n d e s Nombre de tuples B Relation de 7 attributs 30% de correlation FIG 1 – Temps d’exécution pour différents nombres d’attributs différentes corrélations et différents nombres de tuples La table suivante décrit les caractéristiques des données réelles et les temps d’exécutions avec AFD DYNAMICUPDATE et FUN Relation names attributes tuples AFD DYNAMICUPDATE FUN TombNecropolis 7 1 846 5 700s 82 770s someCompanies 6 40 316 11m15s 1h 27m Le tableau ci dessus est très clair notre approche est beaucoup plus efficace que FUN pour le calcul incrémental de Dépendances Fonctionnelles 3 Conclusion et perspectives Nous avons proposé une nouvelle approche pour l’extraction de DFA et un algorithme as socié nommé AFD DYNAMICUPDATE Contrairement à d’autres algorithmes celui ci est une approche incrémentale qui permet la mise à jour de l’ensemble des DFA valides quand la re lation évolue Nous caractérisons l’influence de l’évolution d’une relation sur l’ensemble des DFA valides Pour cela nous n’utilisons pas la relation mais une représentation de celle ci ce qui rend l’algorithme efficace et exploitable Pour montrer les avantages et la faisabilité de notre approche nous avons comparé AFD DYNAMICUPDATE avec FUN Les résultats des expérimentations obtenus sous les mêmes conditions cf Section 2 4 montrent de bonnes propriétés de passage à échelle de l’approche lorsque la relation change ajout ou suppression de tuples Par ailleurs ce travail sera utilisé pour la détection visuelle de changements d’habitude ou de 5 81 détections d’erreurs Un outil de visualisation on line et off line à l’aide de scénarii séquence d’instructions d’ajout et de suppression de tuples est en cours de réalisation pour visualiser l’évolution de l’ensemble des DF valides au cours du temps Cet outil montrera les différents ensembles de DF exactes ou approximatives valides pour une relation à plusieurs instants ce qui permettra de mieux comprendre les changements d’habitudes ou les apparitions d’erreurs Références Codd E 1970 A Relational Model of Data for Large Shared Data Banks Communication of the ACM 13 6 377–387 Gasmi G 2010 Incfds un nouvel algorithme d’inférence incrémentale des dépendances fonctionnelles In EGC’10 pp 303–314 Huhtala Y J Karkkainen P Porkka et H Toivonen 1998 Efficient Discovery of Functional and Approximate Dependencies In ICDE pp 392–401 Kivinen J et H Mannila 1995 Approximate Dependency Inference from Relations Theo retical Computer Science 149 1 129–149 Lopes S J Petit et L Lakhal 2000 Efficient Discovery of Functional Dependencies and Armstrong Relations In EDBT pp 350–364 Mannila H et K Räihä 1994 Algorithms for Inferring Functional Dependencies from Re lations Data and Knowledge Engineering 12 1 83–99 Novelli N 2000 Extraction de Dépendances Fonctionnelles dans les Bases de Données une Approche Data Mining Ph D thesis Université Aix Marseille II Novelli N et R Cicchetti 2001 Functional and Embedded Dependency Inference A Data Mining Point of View Information Systems 26 7 477–506 Wyss C M C Giannella et E L Robertson 2001 Fastfds A heuristic driven depth first algorithm for mining functional dependencies from relation instances extended abstract In DaWaK pp 101–110 Summary Functional Dependency FD inference from existing relations is an important data base analysis technique The problem has been treated by using data mining approach by the algo rithms TANE DEPMINER FASTFDS et FUN Since the FD set inferred by these algorithms is valid as long as the relation remains unchanged they become efficient in the real life situa tions when the relation is constantly updated It is particularly important to be able to extract approximate FDs allowing to take into account errors and exceptions in the given data We propose an incremental approach allowing to update the valid set of approximate FDs while tuples are inserted or deleted The algorithm employs a level wise strategy to keep the internal representation of the relation up to date Experimental results show that during FDs extraction from a constantly updated relation existing algorithms are significantly outperformed by our incremental approach 6 82 