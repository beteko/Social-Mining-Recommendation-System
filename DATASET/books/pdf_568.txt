 Optimisation de l’extraction de l’alignement des ontologies avec la contrainte de différence Moussa Benaissa Yahia Lebbah Université d’Oran Faculté des sciences Laboratoire LITIO moussabenaissa yahoo fr ylebbah yahoo fr Résumé Dans ce papier nous proposons une approche basée sur la program mation par contraintes pour aborder efficacement le problème de l’alignement des ontologies et plus particulièrement l’extraction des correspondances à par tir des mesures de similarités La complexité de ce problème est accentuée dans les applications à caractère dynamique où l’aspect performance est capital Plus précisément nous exploitons la contrainte globale de différence développée dans le domaine de la programmation par contraintes pour extraire un alignement to tal et injectif Nous montrons que cette approche est efficace et se prête à une mise en œuvre à la fois interactive et automatique 1 Introduction Si beaucoup de recherche a été dédiée aux calculs des similarités et à leur affinement peu d’attention a été accordée au problème de l’extraction des alignements [Meilicke et Stuckensh midt 2007 ] D’autre part les méthodes d’extraction des alignements existantes peuvent être classées en deux catégories [Euzénat et valtchev 2004 ] les méthodes interactives et les mé thodes automatiques Il a été constaté [Shvaiko et Euzénat 2008 ] que l’approche interactive est meilleure que l’approche automatique dans les applications traditionnelles où de larges en sembles de données sont mis en jeu En outre les alignements à extraire doivent dans certaines applications telles que la transcription automatique des ontologies vérifier certaines proprié tés telles que la complétude et l’injectivité Sur un autre plan un problème de performance se pose dans les applications industrielles à caractère dynamique où l’utilisateur ne dispose pas de beaucoup de temps pour obtenir une réponse du système [Shvaiko et Euzénat 2008 ] Ainsi il est nécessaire de disposer d’un schéma algorithmique efficace pour optimiser l’extraction de l’alignement des ontologies et qui permet de capter les préférences des utilisateurs quand le processus interactif est déclenché par l’utilisateur Ces deux critères efficacité et interactivité sont capitaux pour le problème de l’alignement des ontologies L’idée de ce papier consiste à exploiter la contrainte globale de différence [Régin 1994 ] et son algorithme développés dans le domaine de la programmation par contraintes qui sont bien adaptés pour aborder l’extraction de l’alignement des ontologies L’algorithme de filtrage permet d’éliminer les concepts qui ne peuvent pas appartenir à un alignement Nous commençons par introduire un exemple pour présenter l’approche La section 3 pré sente des notions préliminaires sur les ontologies et la PPC Dans la section 4 nous introduisons notre contribution Nous finissons ce papier avec une conclusion et des perspectives Alignement des ontologies avec la contrainte de différence 2 Exemple illustratif Soient O et O� deux ontologies O contient les concepts {C1 C2 C3 C4 C5 C6} et O� contient les concepts {C �1 C �2 C �3 C �4 C �5 C �6 C �7} Une certaine technique calculant les simi larités entre les concepts de O et O� a produit la matrice de similarités suivante O O � C � 1 C � 2 C � 3 C � 4 C � 5 C � 6 C � 7 C1 0 65 0 60 0 22 0 11 0 33 0 44 0 35 C2 0 15 0 80 0 75 0 39 0 30 0 12 0 27 C3 0 90 0 44 0 56 0 37 0 24 0 31 0 26 C4 0 23 0 68 0 32 0 87 0 44 0 26 0 25 C5 0 17 0 18 0 70 0 60 0 50 0 82 0 32 C6 0 36 0 37 0 39 0 41 0 29 0 92 0 83 Nous supposons aussi que toutes les valeurs de similarités doivent être supérieures ou égales à un certain seuil s = 0 5 Un filtrage de S sur le seuil s permet d’éliminer toutes les va leurs de la matrice inférieures à 0 5 Le problème consiste alors à extraire de façon interactive un alignement total et injectif entre les concepts de O et O� Nous suggérons l’exploitation de la contrainte de différence et l’algorithme qui établit sa arc consistance pour supprimer interacti vement toutes les correspondances qui ne peuvent pas appartenir à l’alignement cible avec les propriétés requises Dans l’exemple ci dessus les correspondances sont supprimées en exploi tant l’algorithme basé sur le couplage [Régin 1994 ] Ceci permet d’améliorer la performance du système et de réduire la charge de l’utilisateur Après l’application de ces suppressions et des choix de l’utilisateur nous obtenons l’alignement suivant { C1 C �1 C2 C �2 C3 C �3 C4 C �4 C5 C �6 C6 C �7 } Dans la section 4 nous donnerons plus de détails sur le proces sus de suppression et sur l’approche globale 3 Préliminaires 3 1 Alignement des ontologies Pour plus de détails sur le contenu de cette section nous renvoyons le lecteur à la ré férence [Euzenat et Shvaiko 2007 ] Soient O et O� deux ontologies Une correspondance M entre O et O� est un quintuple < id e e� R n > où id est un identificateur unique de la correspondance M e et e� sont des entités de O et O� R est une relation sémantique entre e et e� n est une mesure de confiance L’alignement peut être défini comme un en semble de correspondances Le Processus d’alignement reçoit en entrée deux ontologies O et O� et produit en sortie un alignement A entre les entités de O et O� Un alignement A est dit complet ou total pour l’ontologie O resp O� si toute entité de O resp de O� a une entité correspondante de O� resp de O Un alignement A est dit injectif de O à O� si et seulement si pour toutes correspondances M et M � avec M =< idM e1 e�1 R n >∈ A et M � =< idM � e2 e�2 R n >∈ A nous avons e1 �= e2 ⇒ e�1 �= e�2 Globalement nous pouvons distinguer deux approches pour l’extraction des correspondances entre les entités des ontologies l’approche interactive et l’approche automatique Les algorithmes d’extraction des correspondances entre les entités des ontologies dépendent des propriétés de l’alignement à extraire Les méthodes basées sur des optimisations locales consistent à extraire l’alignement final en itérant sur les correspondances formant l’alignement initial en maximisant locale ment la similarité à chaque paire d’entités Les méthodes basées sur une optimisation globale contrairement aux méthodes locales consistent à optimiser un critère global M Benaissa et Y Lebbah 3 2 La programmation par contraintes Dans le cadre de la PPC est né un cadre restreint appelé Problèmes de Satisfaction de Contraintes CSPs que nous définissons ci dessous et nous recommandons les références spé cialisées suivantes pour plus de détails [Apt 2003 Macworth 1977 Fages 1996 ] Les CSPs forment un cadre formel simple pour la résolution des problèmes combinatoires Un CSP P est un triplet �X D C� où X un ensemble de n variables x1 xn D un ensemble de domaines finis D1 Dn où Di est le domaine de la variable xi C = {C1 Cm} un ensemble de contraintes sur les variables Une contrainte C est définie entre un ensemble de va riables X C = {xi xk} comme un sous ensemble du produit cartésien Di × ×Dk On note D X C = ∪x∈X C Dx Une solution est une affectation de valeurs à toutes les variables telles que toutes les contraintes soient vérifiées 3 2 1 La consistance d’arc et la contrainte de différence Soit P un CSP C une contrainte x une variable appartenant à l’ensemble X C et v une valeur qui appartient au domaine de x Nous appelons support pour l’affectation x = v pour C toute extension de cette affectation à toutes les variables de X C qui vérifie C La valeur v est dite arc consistante pour la contrainte C si elle a un support pour C Dans le cas contraire elle n’est pas arc consistante C est arc consistante si et seulement si toutes les valeurs de toutes les variables de C sont arc consistantes pour C Dx est arc consistant si et seulement si pour chaque contrainte C toute valeur v appartenant à Dx est arc consistante pour C P est arc consistant si et seulement si tous ses domaines sont arc consistants La contrainte de différence Alldiff [Régin 1994 ] impose que toutes les valeurs des variables du même tuple soient différentes L’algorithme établissant l’arc consistance de Alldiff en un temps polyno mial a été développé par [Régin 1994 ] et est basé sur la théorie des couplages La complexité de cet algorithme est O p2d2 où p = Card X C d = maxx∈X C Card Dx 4 Un modèle CSP pour l’extraction de l’alignement 4 1 Le modèle de l’alignement Soient O et O� deux ontologies et A l’alignement à extraire entre les concepts de O et O� L’approche est présentée ici pour les concepts mais elle reste valable pour les rôles et les instances Nous supposons que A doit être total et injectif On note e et e� les concepts de O et O� respectivement Le problème de l’extraction de A peut être modélisé avec le CSP suivant P = X D C où – X un ensemble de n variables x1 xn où xi correspond au concept ei de O – D un ensemble de domaines finis {D1 Dn} où Di désigne l’ensemble des valeurs possibles de xi et est défini par Di = {e�j ∈ O� conf�id e e� R n� = n ≥ s} Di est obtenu à partir de la matrice de similarités S en retenant seulement les concepts e� i de O� qui correspondent au concept ei et qui ont un niveau de similarité supérieur ou égal à un seuil donné s – C = {Alldiff x1 xn } Alignement des ontologies avec la contrainte de différence Proposition 1 L’ensemble de tous les alignements totaux et injectifs est égal à l’ensemble des CSP solutions de la contrainte de différence Preuve Soit S une solution de la contrainte de différence C Donc S couvre tous les concepts de l’ontologie O Par conséquent l’alignement A est total D’autre part les valeurs affectées aux variables apparaissent au plus une fois donc l’alignement A est injectif Inver sement soit A un alignement total et injectif Puisque A est total chaque variable est affectée d’une valeur et puisque A est injectif alors la même valeur ne peut pas être affectée à deux variables distinctes � Exemple Dans l’exemple de la section 2 le CSP qui modélise le problème de l’extraction de l’alignement est le suivant – X = {C1 C2 C3 C4 C5 C6} – D = D1 � D2 � D3 � D4 � D5 � D6 avec D1 = {C �1 C �2} D2 = {C �2 C �3} D3 = {C �1 C �3} D4 = {C �2 C �4} D5 = {C �3 C �4 C �5 C �6} D6 = {C �6 C �7} D = {C �1 C �2 C �3 C �4 C �5 C �6 C �7} – C = {Alldiff C1 C2 C3 C4 C5 C6 } 4 2 Extraction de l’alignement L’extraction peut être effectuée selon deux approches l’approche interactive et l’approche automatique Approche interactive Nous proposons l’algorithme 1 Algorithm 1 Approche interactive pour l’extraction de l’alignement 1 {On note O et O� les deux ontologies à aligner AI l’alignement initial AR l’alignement résultat et C une correspondance } 2 Filtrer toutes les valeurs des domaines qui sont inconsistantes avec la contrainte Alldiff 3 if il existe un domaine Di tel que Di = ∅ then 4 return "il n’existe pas d’alignement total " 5 end if 6 AR = φ 7 repeat 8 Proposer à l’utilisateur de sélectionner une correspondance Soit G =< idG e1 e � m n R > cette correspondance 9 AR = AR ∪ {G} 10 Instancier le domaine de e1 comme suit De1 = {e�m} 11 Filtrer toutes les valeurs du Di qui sont inconsistantes avec la contrainte Alldiff 12 until toutes les variables sont affectées 13 return "Un alignement total et injectif est trouvé " La correction de l’algorithme peut être facilement prouvée En effet il consiste à appeler itérativement l’algorithme qui établit la arc consistance de la contrainte de différence pour éli miner toutes les correspondances qui ne peuvent pas faire partie d’un alignement total et injec tif et demande à l’utilisateur de sélectionner une correspondance De ce fait et conformément à l’algorithme de filtrage l’alignement produit est nécessairement total et injectif Nous remar quons aussi que la boucle termine toujours avec un alignement total et injectif étant donné que M Benaissa et Y Lebbah l’algorithme de filtrage de la contrainte AllDiff assure la consistance des entités restantes On peut aussi démontrer que la terminaison de l’algorithme est assurée car le filtrage est global L’approche automatique Dans cette approche l’alignement est extrait sans l’intervention de l’utilisateur L’algorithme qui établit la arc consistance de la contrainte Alldiff est combiné avec une méthode d’optimisation qui maximise la similarité globale entre les concepts de O et O� Ceci peut être réalisé simplement avec la procédure à deux étapes suivante 1 Filtrer les domaines avec l’algorithme de Alldiff 2 Enumérer les couplages existants Cette procédure peut être améliorée en adoptant dans la seconde étape des schémas algorithmiques plus raffinés L’algorithme de la méthode hongroise peut être appliqué si le nombre de concepts dans O est le même que dans O� et la fonction objectif reste la maximisation de la similarité Toutefois si la fonction objectif est plus complexe nous pouvons adopter un schéma algorithmique plus général branch and bound 4 3 Illustration de l’approche Considérons l’exemple de la section 2 et supposons que nous voulons extraire interacti vement un alignement total et injectif entre les concepts de O et O� Le CSP correspondant est donné dans la section 4 1 Nous commençons par filtrer tous les domaines D’après l’al gorithme de la arc consistance le concept C �2 est supprimé du domaine D4 et les concepts C �3 et C �4 sont supprimés du domaine D5 Les nouveaux domaines sont D1 = {C �1 C �2} D2 = {C �2 C �3} D3 = {C �1 C �3} D4 = {C �4} D5 = {C �5 C �6} D6 = {C �6 C �7} On note qu’il n’existe pas de domaine vide Ceci assure la consistance de la contrainte On continue en appliquant les deux itérations suivantes A la première itération on demande à l’utilisateur de choisir une correspondance C5 C �6 Les nouveaux domaines sont D1 = {C �1 C �2} D2 = {C �2 C �3} D3 = {C �1 C �3} D4 = {C �4} D5 = {C �6} D6 = {C �6 C �7} Ces domaines sont filtrés Le concept C �6 est supprimé du domaine D6 Les nouveaux domaines sont D1 = {C �1 C �2} D2 = {C �2 C �3} D3 = {C �1 C �3} D4 = {C �4} D5 = {C �6} D6 = {C �7} Dans la seconde itération on demande à l’utilisateur de choisir une correspondance C1 C �1 Les nouveaux domaines sont D1 = {C �1} D2 = {C �2 C �3} D3 = {C �1 C �3} D4 = {C �4} D5 = {C �6} D6 = {C �7} Ces domaines sont filtrés Le concept C �3 est supprimé du domaine D2 et le concept C �1 est supprimé du domaine D3 Les nouveaux domaines sont D1 = {C �1} D2 = {C �2} D3 = {C �3} D4 = {C �4} D5 = {C �6} D6 = {C �7} On note que toutes les variables sont affectées et l’algorithme termine L’alignement résultat est le suivant { C1 C �1 C2 C �2 C3 C �3 C4 C �4 C5 C �6 C6 C �7 } 5 Conclusion et Perspectives Dans ce papier nous avons montré que le problème de la performance des algorithmes de l’alignement des ontologies peut être abordé efficacement par les techniques algorithmiques développées dans le cadre de la programmation par contraintes Plus précisément nous avons modélisé le problème de l’extraction d’un alignement total et injectif par un problème de sa tisfaction de contraintes Afin d’extraire un tel alignement nous avons exploité la contrainte de différence Alldiff et un algorithme qui établit sa arc consistance Nous avons montré que l’approche présentée ici aborde efficacement le problème et se prête à une mise en œuvre à Alignement des ontologies avec la contrainte de différence la fois interactive et automatique Nous avons mentionné que la complexité théorique de l’ap proche est faible Nous envisageons de combiner l’approche présentée ici avec des aspects appropriées des interfaces homme machine pour améliorer l’interaction de l’utilisateur avec le système Nous projetons aussi d’étendre l’approche pour prendre en compte efficacement des critères plus généraux Références Apt K 2003 Principles of Constraint Programming Cambridge University Press Euzenat J et P Shvaiko 2007 Ontology matching Heidelberg DE Springer Verlag Euzénat J et P valtchev 2004 Similarity based ontology alignment in owl lite In The proceedings of the 15th ECAI pp 333–337 Fages J 1996 Programmation logique et par contraintes Ellipses Macworth A 1977 Consistency in networks of relations Journal of Artificial Intelli gence 8 1 99–118 Meilicke C et H Stuckenshmidt 2007 Analysing mapping extraction approaches In the proceedings of the second International workshop on Ontology Matching OM 2007 Bu san Corea Régin J 1994 A filtering algorithm for constraints of difference in csps In AAAI pp 362–367 Shvaiko P et J Euzénat 2008 Ten challenges for ontology matching In The proceedings of 7th ODBASE Monterry Mexico Summary In ontology matching few research has been devoted to mappings extraction from simi larity measures Ontology alignment extraction complexity is particularly pointed out in dy namic applications where performance aspect is crucial In this paper we exploit difference constraints developed within constraint programming to model the problem of extracting an alignment which is both total and injective We show that this approach is efficient and can easily be implemented both in interactive and automatic ways 