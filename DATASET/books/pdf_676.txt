articles assemblage pdfpgp extraction parallèle efficace motifs graduels laurent benjamin negrevergne nicolas sicard alexandre termier lirmm 34392 montpellier cedex laurent lirmm lirmm efrei république villejuif nicolas sicard efrei efrei passerelle 38402 saint martin hères benjamin negrevergne alexandre termier liglab résumé initialement utilisés systèmes commande règles graduels forme personne salaire trouvent nombreuses applications exemple domaines biologie données flots issues réseaux capteurs récemment algorithmes proposés extraire automatiquement motifs cependant certains entre permis gains performance importants algorithmes restent coûteux permettent traiter efficacement bases données réelles souvent volumi neuses nombre lignes nombre attributs proposons article méthode originale recherche motifs utilisant multi threading exploiter mieux multiples coeurs présents plupart ordinateurs serveurs actuels efficacité cette approche lidée étude expérimentale introduction fouille données recherche motifs fréquents sujet recherche initialement étudiés données transactionnelles algorithmes étendus structures données complexes séquences arbres graphes kamber manière générale algorithmes doivent explorer espace recherche important coûteux temps calcul complexité calculs augmentant celle structures données traiter grande partie travaux menée mettre point algorithmes efficaces permettant fouiller grandes bases données structures potentiellement complexes récemment nouveau règles motifs introduit motifs graduels itemsets graduels problème découvrir partir bases données numériques motifs individu salaire élevé trouve breuses applications bases données numériques comme exemple données extraction parallèle efficace motifs graduels biologiques médicales contexte algorithme grite proposé jorio notre connaissance efficace termes temps calcul occupation moire développé partir approche niveaux agrawal srikant permet fouiller bases données comprenant jusqu plusieurs centaines attributs plusieurs milliers lignes quand approches précédentes étaient limitées attributs berzal cependant performances restent faibles regard bases données réelles comprenant milliers attributs millions lignes lesquelles algorithme grite avérer voire impossible exécuter solutions exclusives envisageables échelle grite appliquer données réelles améliorations algorithmiques exemple utilisant techniques pattern growth définissant notion fermeture motifs graduels pasquier explorant possibilités parallélisation article explorons seconde solution exploitant parallélisme processeurs multi cœurs cours dernières années augmentation performance processeurs passait effet essentiellement augmentation fréquence depuis limites physiques empêchent améliorer cette fréquence cepen possible intégrer transistors permettent multiplier cœurs calcul processeur exploitation optimale multiples cœurs quiert écriture programmes parallèles architecture ayant propriétés propres différentes exemple clusters machines processeurs multi cœurs souvent architecture uniform memory access machine dotée mémoire cœurs temps accès équivalent cette mémoire travers unique usage mémoire goulot étranglement classique applications parallèles denières années recherches menées fouille données parallèle ploiter architectures multi cœurs buehrer lucchese tatikonda parthasarathy montrant problème fouille était plexe arbres graphes parallélisation améliorait performances principale raison accès mémoires relativement faibles rapport calculs coûteux effectuer données chargées caches application parallélisation recherche motifs graduels reste technique coûteuse prometteuse étudions après validons travers expérimentations menées suite article organisé manière suivante section introduit notion motif graduel tandis section rappelle principales définitions motifs présents littérature ainsi principales approches fouille données parallèle section présente notre algorithme parallèle extraction motifs graduels résultats expérimentaux présentés section enfin section conclut présente principales perspectives associées travail motifs graduels motifs graduels forme moins moins considère données consistant relation définie ensemble attributs contexte motifs graduels définis ensemble éléments associés ordre croissant décroissant valeur attribut laurent weight sugar fruits leurs caractéristiques exemple considère données figure décrivant fruits leurs caractéristiques définition graduel données définie attributs motif graduel couple attribut opérateur comparison operator itemset graduel motif graduel ensemble items graduels exemple graduel tandis weight itemset graduel support itemset graduel données revient culer point motif présent plusieurs définitions formelles cette notion support proposées section dessous article considère nombre uplets possible ordonner respecter opérateurs comparaison chacun attributs présents motif considéré définition support itemset graduel données itemset graduel cardinalité notée correspond longueur longue liste uplets comparaison valide support correspond ratio cardinalité notons calculer jorio propose considérer graphe lequel nœuds correspondent uplets lequel existe entre nœuds uplets associés ordonnés rapport exemple figure montre ordonnancement uplets exemple précédent itemset taille grande moins sucre important extraction parallèle efficace motifs graduels longeur chemin graphe comme contient uplets algorithme principe apriori notant items explorés mesure toute données ordonnée trier unique attribut algorithme débute étudiant support toutes paires items graduels ensuite niveau suivant constituant candidats niveau fonction fréquents taille testant support stockage ordonnancements niveau format binaire coûteux cependant principal goulot étranglement uplets doivent ordonnés fonction itemset graduel considéré calcul longueur chemin prend temps travaux connexes rappelons cette section principales approches littérature décou verte motifs graduels extraction parallèle motifs fréquents découverte motifs graduels motifs graduels étudiés depuis nombreuses années contrôle mande floue systèmes recommandation récemment algorithmes fouille données étudiés extraire automatiquement motifs jorio berzal jorio hüllermeier laurent ainsi hüllermeier utilise régression linéaire tandis berzal définit quatre types règles graduelles forme moins alors moins propose algorithme niveaux extraire telles règles cependant support calculé considérant couples uplets approche complexe auteurs introduisent motifs séquentiels graduels rendre compte force modification accélération jorio jorio méthodes proposées différence étant calcul support tandis heuristique utilisée jorio support exact calculé jorio grâce méthode précédemment laurent teurs proposent autre manière calculer support considérant kendall ranking correlation coefficient calcule longeur chemin nombre paires uplets ordonnables données accord motif graduel considéré parle alors paires concordantes discordantes article considérons approche présentée jorio notre connaissance performante extraction parallèle motifs fréquents depuis spécialistes extraction motifs fréquents travaillé rithmes parallèles nombreux travaux réalisés extraire motifs fréquents clusters agrawal shafer cette époque mémoire ordinateurs personnels était beaucoup petite taille plupart bases données quelques centaines mégaoctets quelques gigaoctets laurent intérêt principal calcul parallèle était permettre traiter efficacement bases données taille importante distribuant plusieurs machines augmenta capacité mémoires vives découverte manières efficaces explorer espace recherche motifs fréquents fermés exemple publications extraction parallèle motifs fréquents raréfiées jusqu depuis apparition proces seurs multicœurs appelés anglais multiprocessors nouvelle thématique recherche apparue définition algorithmes performants utilisant processeurs multicœurs cette thématique initiée buehrer algorithme traction graphes fréquents présentant excellentes techniques passage échelle algorithme gspan contribution consiste manière efficace partager travail entre cœurs autre technique exploiter localité temporelle cache décisions locales savoir immédiatement traiter appel récursif mettre attente lucchese ensuite présenté premier algorithme extraire itemsets fréquents fermés contribution concentre meilleure manière répartir travail montrent intérêt utiliser instructions améliorer encore performances année présenté parallélisation célèbre algorithme growth récemment tatikonda parthasarathy présenté algorithme extraire arbres fréquents speed quasi linéaire montrent principal facteur limitant performances extraction motifs fréquents processeur multicœurs mémoire partagée entre cœurs cœurs accèdent simultanément quantité importante données entre mémoire processeur saturé performances chuter contention bande passante cette observation opposée donnait résultats séquentiel éviter calculs redondants grande quantité résultats inter médiaires étaient stockés mémoire tatikonda montrent taille ensemble travail réduite autant possible conduire refaire certains calculs plusieurs montrent également traditionnelles structures données pointeurs adaptées extraction parallèle motifs fréquents cause mauvaise localité cache encore amène avoir contention bande passante article intéressons problème complexe extraction motifs graduels sommes favorable beaucoup calculs faire chaque données transféré depuis mémoire devrait avoir contention importante bande passante condition utiliser structures données inutilement volumineuses recherche parallèle motifs graduels caractéristiques motifs graduels problème extraction itemsets graduels diffère classiques simples dernier chaque ligne données possible supporte itemset graduel toute données néces saire chaque comptage raisonnable envisager distribution données extraction parallèle efficace motifs graduels blocs lignes notons extraction motifs séquentiels problème termédiaire comptage lignes chaque correspondant toutes lignes associées client calcul support itemset graduel opération assez complexe nécessite tâches coûteuses englobons procédure appelée cette procédure décrite détail jorio assure ordonnancement lignes données construction matrice binaire associée calcul chemin notre proposition repose grand nombre répétitions opérations ploration données problème irrégulier difficile prévoir avance nombre motifs retenus distribution espace didats construit dynamiquement niveau niveau revanche notons calcul support itemset dépend calcul support autres itemsets niveau permet envisager construction plusieurs candidats parallèle rappelons adoptons approche multi thread sépare exécute travail différentes unités calcul processeurs coeurs procédant manière concurrente approche proposée grite algorithme grite repose exploration treillis niveau niveau premier niveau initialisé partir colonnes ensuite candidats niveau construits partir chaque itemset niveau combiné successivement ensemble itemsets frères supérieur siblingsj grâce procédure lorsqu candidat dépasse certain seuil support considéré comme fréquent conservé processus arrête quand dernier niveau construit contient aucun fréquent algorithme montre version simplifiée construction niveau partir niveau algorithme grite construction niveau partir niveau pourchaque itemset niveau faire pourchaque itemset siblingsj faire itemset fréquent alors devient prend index conservé niveau finsi finpourchaque finpourchaque chaque niveau construit avant commencer traitement niveau suivant cette raison sommes concentrés parallélisation chaque niveau individuellement construction candidat procédure opération laurent essentiellement indépendante autres problème principal concerne alors équilibre distribution tâches unités traitement disponibles effet nombre rations boucle interne algorithme difficile prévoir niveau nombre itemsets frères chaque itemset varier façon sensible parallélisation automatique boucles risque conduire déséquilibre charge notre méthode compenser cette irrégularité affectant dynamiquement construc tions candidats niveau threads selon règle premier arrivé servi début itemsets fréquents niveau marqués traités stockés attente nouvel itemset défilé nœuds frères ajoutés seconde chaque thread disponible extrait alors itemset construit nouveau candidat partir fréquent candidat conservé niveau comme lorsque nouvel itemset extrait processus reprend début arrête quand itemsets traités files vides algorithme montre version simplifiée cette approche algorithme grite multithread construction niveau partir niveau itemsets threads itemsets niveau nœuds frères traités pourchaque thread parallèle faire tantque faire alors defiler siblingsj finsi defiler itemset frequent alors devient prend index conservé niveau finsi fintantque finpourchaque œuvre optimisations préliminaires outre contraintes bande passante mémoire autre problème calculs sivement multithreadés apparaître lorsqu grand nombre allocations mémoires extraction parallèle efficace motifs graduels dynamiques simultanément tâches allocations défaut dévolues noyau système exploitation plupart temps sérialisées pouvant introduire attentes inutiles calcul simplifier utilisation mémoire aussi terme cupation nombre transactions avons profilé optimisé version initiale programme jorio modifier algorithme programme sultant consomme moyenne moitié mémoire presque tiers seulement temps exécution travaux parallélisation expérimentations basés cette nouvelle version notons threads implantés bibliothèque threads standard posix résultats expérimentaux discussion cette section présentons résultats obtenus exécution notre gramme architectures multi processeurs comportant jusqu cœurs coyote dispose processeurs quadri cœurs opteron mémoire linux centos idkonn dispose processeurs intel cœurs chacun linux debian expériences menées bases artificielles créées automatiquement outil version adaptée synthetic generation associations sequential patterns outil produit bases numériques fonction nombre lignes nombre attributs nombre moyen valeurs distinctes attribut accélérations résultats suivants illustrent évolution temps calcul accélérations complexité problème cette complexité avoir origines nombre tributs dépend nombre tâches nombre candidats synthétiser tester nombre lignes influe temps traitement moyen chaque tâche temps traitement procédure présentons permettant observer comportement notre solution suivant aspects premier tests concerne bases données comportent grand nombre lignes relativement attributs genre bases produit général assez itemsets fréquents seuil support suffisamment élevé temps global exécution programme principalement dévolu construction premiers veaux candidats figure montre diminution temps exécution traitement bases données 10000 lignes attributs machine coyote figure montre accélérations correspondantes accélérations atteignent niveau satisfaisant complexes exemple accélération atteint environ attributs threads limite teinte attributs explique essentiellement construction niveau occupe grande temps exécution global programme almaden software projects resources shtml laurent coyote bases 10000 lignes attributs minsupp nombre threads exécution coyote bases 10000 lignes attributs minsupp nombre threads accélération exécution accélération threads 10000 lignes coyote niveau nombre tâches strictement nombre attributs faible ploiter quelques unités traitement surtout assurer équilibre charge ainsi traitement séquentiel attributs prend environ secondes parmi lesquelles secondes nécessaires charger construire premier niveau threads temps global exécution secondes secondes encore nécessaires premier niveau expériences pratiquées machine idkonn mêmes bases montrent résultats similaires résultats détaillés tables courbes consultables ligne adresse lirmm laurent egc10 deuxième tests concerne bases données complexité croissante fonction nombre attributs figures montrent respectivement diminution temps traitement accelérations obtenues bases lignes contenant attributs machine idkonn idkonn 10000 15000 20000 bases lignes attributs minsupp nombre threads exécution idkonn bases lignes attributs minsupp nombre threads accélération exécution accélération threads lignes idkonn extraction parallèle efficace motifs graduels encore notre solution efficace problèmes suffisamment complexes puisque accélérations éloignées progression maximale théorique partir attributs idkonn figures montrent respectivement temps exécu accélérations obtenues mêmes bases entre attributs machine coyote traitement attributs passe durée heures minutes séquentiel environ minutes secondes threads cette machine coyote bases lignes attributs minsupp nombre threads exécution coyote bases lignes attributs minsupp nombre threads accélération exécution accélérations threads lignes coyote similarité résultats machines différentes architectures proces seurs hiérarchie mémoire différentes noter performances terme accélération sensibles spécificités architecturales plateforme mémoire caches précisons enfin résultats traitement lignes attributs nécessairement pertinents cadre calculs massivement parallèles puisque temps exécution séquentiel environ secondes coyote avons tefois reportés montrer notre approche permet aussi situations obtenir accélérations sensibles celles peuvent avérer déterminantes traitement blèmes fouille données temps quasi temps exemple détection intrusion manière générale fouille données arrivant flots stream mining puisqu alors traitement rapide arrivée données limitations occupation mémoire principale difficulté genre problème reste maîtrise consommation moire grand nombre candidats traités éventuellement retenus chaque niveau exploration treillis titre illustration avons appliqué notre gramme dense lignes colonnes seuil support élevé avons trouvé environ millions itemsets fréquents niveau traitement 10000 premiers conduit création millions nouveaux fréquents niveau selon rythme consommation mémoire 150go mémoire auraient néces saires stocker itemsets fréquents niveau limitations bases données denses conduisent explorer autres architectures clusters notamment laurent conclusion perspectives article proposons nouvelle approche extraction motifs règles graduels forme personne salaire élevé notre approche basée utilisation multiples cœurs présents maintenant plupart ordina teurs serveurs maintenant accessibles anciennement réservée domaines particuliers utilisation telles machines désormais courante important algorithmes fouille données puissent profiter mieux architectures expéri mentations menées montrent grand intérêt efficacité notre approche atteignant speed quasi linéaires problèmes difficiles réduisant considérablement temps calcul threads contre séquentiel perspectives associées travail nombreuses optimisations techniques optimisations selon différentes architectures allons particu intéresser trois pistes principales utilisation motifs graduels duire temps calcul algorithmes profondeur patterns growth utilisation autre parallélisation clusters compris clusters machines mutli processeurs multi cores remerciements auteurs remercient jorio avoir fourni sources implémentation recherche motifs règles graduels jorio références agrawal shafer parallel mining association rules trans knowl agrawal srikant algorithms mining association rules proceedings conference berzal cubero sanchez serrano alternative approach discover gradual dependencies journal uncertainty fuzziness knowledge based systems ijufks buehrer parthasarathy adaptive parallel graph mining architectures jorio laurent teisseire extraction gradual association rules heuristic based method computing transdisciplinary science technology cstst jorio laurent teisseire mining frequent gradual itemsets large databases intelligent analysis masseglia laurent teisseire gradual trends fuzzy sequential patterns information processing management uncer tainty knowledge based systems kamber mining concepts techniques morgan kaufmann series management systems morgan kaufmann publishers mining frequent patterns without candidate generation international conference management extraction parallèle efficace motifs graduels hüllermeier association rules expressing gradual dependencies european principles mining knowledge discovery springer verlag laurent lesot rifqi graank exploiting correlations extrac gradual dependencies zhang optimization frequent itemset mining multiple processor proceedings international conference large bases endowment lucchese orlando perego parallel mining frequent closed patterns harnessing modern computer architectures pasquier bastide taouil lakhal efficient mining association rules using closed itemset lattices information systems tatikonda parthasarathy mining structured multicore systems proceedings international conference large bases collaboration array bitmap prefix frequent itemset mining sigkdd source mining workshop frequent pattern mining implementations gspan graph based substructure pattern mining international conference mining computer society parallel sequence mining shared memory machines large scale parallel mining parthasarathy ogihara parallel algorithms discovery association rules knowl discov summary gradual patterns older higher salary extensively fuzzy command systems currently crucial world applications where volumes complex numerical handled biological databases survey databases streams sensor readings recently algorithms appeared efficiently gradual patterns however complexity mining gradual rules these algorithms cannot scale world datasets paper propose exploit parallelism order enhance performances fastest existing grite through detailed experimental study parallel algorithm scales number cores available