Implications Exploitation minière de Treillis de José L. Fermé Arbres Balcázar *, Albert Bifet *, Antoni Lozano * * Departament de Llenguatges i Sistemes Informàtics Université Polytechnique de Catalogne {balqui, abifet, antoni} @ lsi.upc.edu Résumé. Nous vous proposons une façon d'extraire les règles d'association de haute confiance des ensembles de données comprenant des arbres non marqués. Les antécédents sont obtenus par un calcul semblable à une transversale hypergraphe, alors que les suivent conséquens d'une application des opérateurs de fermeture sur les arbres non marqués développés dans des travaux récents precedentes des auteurs. Nous discutons plus en détail le cas des règles qui tiennent toujours, indépendamment de l'ensemble de données, puisque ceux-ci sont plus complexes que dans itemsets en raison du fait que nous ne travaillent plus sur un réseau. 1 Introduction Dans le domaine de l'exploration de données, l'une des principales notions qui contribuent au succès de la région a été celle des règles d'association. De nombreuses études de divers types ont fourni une grande avancée de la connaissance humaine au sujet de ces concepts. Une famille particulière d'études se fonde sur les notions précédentes de concepts formels, Galois et lattices implications, qui correspondent aux règles d'association de confiance maximale. Ces notions ont permis pour les travaux et Algorithmics plus efficaces en réduisant le calcul des ensembles fréquents, une importante étape habituelle vers des règles d'association, au calcul des soi-disant ensembles fréquents fermés, un calcul plus rapide de la taille de sortie beaucoup plus facile à gérer, mais ne perdant pas informations du tout en ce qui concerne des ensembles fréquents. Il a été réalisé il y a quelque temps que le modèle unique relationnel simple pour les données, comme em- ployé par le calcul soit d'ensembles fermés ou des règles d'association, alors utile dans une certaine mesure, était un peu limité dans son application par le fait que , souvent, les données de la vie réelle ont une sorte de structure interne qui se perd dans le cadre transactionnel. Ainsi, les études de l'exploration de données dans des structures combinatoires ont été entreprises, et a été fait des progrès considérables ces dernières années. Notre travail est encadré ici dans cette entreprise. Dans des travaux antérieurs, nous avons proposé une clarification mathématique de l'opérateur de fermeture sous-tend la notion d'arbres fermés dans des ensembles de données d'arbres; l'opérateur de fermeture ne fonctionne plus sur les arbres isolés, mais sur des ensembles d'entre eux. Dans un sens, il fait précis, les arbres fermés ne constituent pas un réseau. peut être défini un réseau de remplacement mathématiquement précise, cependant, comme l'a démontré (Balcázar et al., 2006), consistant non plus d'arbres, mais des ensembles d'arbres, et avec la propriété particulière qui, dans toutes les expériences avec des données réelles que nous ont entrepris, ils se révèlent être en réalité des arbres lattices, dans le sens que chaque ensemble fermé d'arbres était, dans tous les cas pratiques, un singleton. Conséquences de l'exploitation minière de Treillis de fermé les arbres Algorithmics pour construire ces ensembles fermés ont été étudiés dans plusieurs références comme (Chi et al., 2005b), (Balcázar et al., 2007a), (Balcázar et al., 2007b), (Termier et al, 2004). voir les références dans l'enquête (Chi et al., 2005a). Nous continuons ici cette ligne de recherche en abordant la plus prochaine étape naturelle: l'identification des conséquences sur le réseau d'ensembles fermés d'arbres. Nous décrivons une méthode, le long de la ligne des travaux similaires sur des séquences et des ordres partiels (Balcázar et Garriga (2007b), Balcázar et Garriga (2007a)) pour construire des implications des ensembles fermés d'arbres, et nous caractériser mathématiquement, en termes de propositionnelle théories corne, les implications que l'on trouve. Nous expliquons ensuite une différence majeure de notre cas avec les travaux précédents: les règles qui ne serait pas trivial dans d'autres cas deviennent redondants, et donc inutile, dans le cas des arbres, en raison du fait qu'ils sont implicites dans les combinatoires des structures . Un exemple montrera mieux notre point ici; s'il vous plaît garder pour l'instant avec quelques notions non définies qui seront plus tard précisé. Considérons une règle intuitivement décrite comme suit: Naturellement signifie que chaque fois qu'un arbre dans l'ensemble de données en cours d'exploration a comme (de haut en bas) les deux sous-arbres arbres dans l'antécédent, il a aussi celui de la conséquence. Un arbre ayant une bifurcation à la racine, tel que requis par le premier antécédent, et une branche de longueur au moins deux, comme l'exige la deuxième, doit avoir la conséquence comme un sous-arbre (top-down). Par conséquent, la règle dit, en fait, rien du tout à propos de l'ensemble de données, et n'est pas digne d'apparaître dans la sortie d'un algorithme d'exploration de la règle sur les arbres. Notre deuxième contribution majeure est donc une étude de certains cas où l'on peut DE- téger ces règles implicites et les supprimer de la sortie, avec un faible temps de calcul. Considérant que d'autres travaux théoriques pourrait être utile, nos contributions à ce jour détectent déjà la plupart des règles implicites dans les ensembles de données de la vie réelle, à des niveaux de soutien assez faible, et avec une efficacité raisonnable. Nous rapportons quelques faits sur le comportement empirique de nos mises en œuvre à la fois l'algorithme de trouver des règles et des heuristiques pour supprimer des règles implicites. 2 Préliminaires Les arbres sont reliés graphes acycliques, arborescences sont des arbres à un sommet du doigt comme la racine, et les arbres non classées sont des arbres avec arité sans bornes. Nous disons que t1,. . . , Tk sont les composantes de l'arbre com- t si t est constitué d'un noeud (la racine) rejoint aux racines de tous de l'ti. On peut distinguer entre les cas où les composants au niveau de chaque noeud forment une séquence (arbres commandés) ou tout simplement pour un ensemble (arbres non ordonnées). Nous traiterons enracinés, non classées, arbres désordonnées. Nous ne supposons pas la présence d'étiquettes sur les noeuds. Le (infini) ensemble de tous les arbres seront désignés avec T, mais en fait tous nos développements se déroulera dans un sous-ensemble fini de T qui agira comme notre univers du discours. Pour les structures à base de liaison-comparaison, nous sommes intéressés par une notion de sous-arbre où la racine est préservée. Un arbre t 'est un sous-arbre de haut en bas (ou simplement un sous-arbre) d'un arbre t (écrit t' t) si t 'est un sous-graphe connexe de t qui contient la racine de t. Cette notation peut être étendue à des ensembles d'arbres A B: pour tout t ∈ A, il y a un t '∈ B qui t' t. Deux J. Balcázar et al. arbres, t 'on dit être comparable si t' t ou t 't. Dans le cas contraire, ils sont incomparables. Aussi t ≺ t 'si t est un sous-arbre approprié de t' (qui est, t t 'et t 6 = t'). L'entrée de notre processus d'extraction de données est un ensemble de données limité D de transactions, où ∈ D de chaque transaction donnée se compose d'un identificateur de transaction, TID, et un arbre dont la racine non marqué. Tids sont censés fonctionner de manière séquentielle de 1 à la taille de D. De cet ensemble de données, notre univers du discours U est l'ensemble de tous les arbres qui apparaissent comme sous-arbre d'un arbre en D. Après usage standard, nous disons que les supports d'une transaction un arbre t si t est un sous-arbre de l'arbre correspondant à la transaction s. Le nombre de transactions dans l'ensemble de données D que le soutien t est appelé le support de l'arbre t. Un sous-arbre t est appelée fréquemment si son support est supérieure ou égale à une min_sup de seuil donnée. Le problème de l'exploitation minière de sous-arbre fréquent est de trouver tous les sous-arbres fréquents dans un ensemble de données. Toute sous-arbre d'un arbre fréquent est aussi fréquente et, par conséquent, toute superarbre d'un arbre nonfrequent est également nonfrequent. Nous définissons un arbre fréquent t fermé si aucune de ses propres supertrees a le même soutien qu'il a. En général, il y a beaucoup moins d'arbres fermés que les fréquents. En fait, nous pouvons obtenir tous les sous-arbres fréquents avec leur soutien de l'ensemble des sous-arbres fréquents fermés avec leurs supports. L'ensemble de données définit un opérateur de fermeture sur le powerset de U, notée rD, résultant d'une connexion de Galois et développé en (Balcázar et al., 2006). Définition La paire de connexion Galois: • Pour fini A ⊆ D, σ (A) = {t ∈ T || ∀ t '∈ A (t' t)} • Pour B fini T ⊂, pas nécessairement dans D, xd ( B) = {t '∈ D || ∀ t ∈ B (t t')} Proposition 2.1 La composition rD = σ ◦ xd est un opérateur de fermeture. Théorème 2.2 Un arbre t est fermé pour D si et seulement si elle est maximale dans RD ({t}). Nous allons construire des règles d'association sous une forme standard à partir, et montrer qu'ils cor- respondent à une certaine théorie corne; En outre, nous allons prouver l'exactitude d'une construction semblable à la base instantanée de Wild (1994) et Pfaltz et Taylor (2002). 3 règles d'association Après utilisation standard sur Galois lattices, nous considérons maintenant des implications (parfois appelées règles d'association déterministe, voir par exemple Pfaltz et Taylor (2002)) de la forme A → B pour les ensembles d'arbres A et B de U. , Nous considérons précisément l'ensemble des règles suivantes: A → rD (A). Sinon, nous pouvons diviser les {A en conséquens → t || t ∈ rD (A)}. Il est facile de voir que D obéit à toutes les règles suivantes: pour chaque A, tout arbre de D qui a comme sous-arborescences tous les arbres de A a aussi sous-arbres tous les arbres de rD (A). Nous voulons fournir une caractérisation de cet ensemble d'implications. Nous opérons sous une forme similaire à Balcázar et Garriga (2007a) et Balcázar et Garriga (2007b), traduisant cet ensemble de règles dans une théorie propositionnelle spécifique que nous pouvons caractériser, et pour lesquels nous pouvons trouver une « base »: un ensemble de règles qui sont suffisantes pour déduire toutes les règles qui attente dans l'ensemble de données D. les détails techniques partent quelque peu Balcázar et Garriga (2007b) dans ce que nous sautons Répercussions sur l'exploitation minière de Treillis de fermé arbres certaine condition de maximalité imposée là, et sont encore plus différents de ceux des Balcázar et Garriga (2007a). Ainsi, nous commençons par l'association d'un vt variable propositionnelle à chaque arbre t ∈ U. De cette façon, chaque implication entre les ensembles d'arbres peut aussi être vu comme une conjonction propositionnelle des implications Klaxon, comme suit: la conjonction de toutes les variables correspondant à l'ensemble du côté gauche implique chacune des variables correspondant à la fermeture à le côté droit. Nous appelons cette implication Corne propositionnelle la traduction propositionnelle de la règle. En outre, maintenant un ensemble d'arbres A correspond d'une manière naturelle à un modèle propositionnelle mA: en particulier, mA (vt) = 1 si et seulement si t est un sous-arbre d'un arbre à A. Nous abbreviate m {t} comme mt. Notez que les modèles obtenus de cette manière Obey la condition suivante: si t 't et vt = 1, puis vt' = 1 aussi. En fait, cette condition identifie les modèles mA: si un m modèle remplit, alors m = mA pour l'ensemble A des arbres t pour lesquels vt = 1 m. Sinon, A peut être considéré comme l'ensemble des arbres maximaux pour lesquels vt = 1. Notez que nous pouvons exprimer cette condition par un ensemble de clauses de Horn: = {vt R0 '→ vt || t', t ∈ U , t '∈ U}. Il est facile de voir que ce qui suit est: Lemme 3.1 Soit t ∈ D. Alors mt satisfait R0 et aussi toutes les traductions propositionnel des implications de la forme A → rD (A). Depuis rD ({t}) = {t '∈ T || t' t} par définition, si mt | = A, alors A t, d'où rD (A) rD ({t}), et mt | = rD (A). Pour R0, la définition même de mt assure la réclamation. Nous recueillons toutes les implications à base de fermeture-dans l'ensemble suivant: R'D = ⋃ C {A → t || rD (A) = C, t ∈ C} Pour une utilisation dans nos algorithmes ci-dessous, nous précisons également un ensemble de règles de béton parmi ceux qui viennent de l'opérateur de fermeture. Pour chaque ensemble fermé d'arbres C, considérer l'ensemble des « prédécesseurs immédiats », qui est, des sous-ensembles de C qui sont fermés, mais où aucun autre intervenant ensemble fermé existe entre eux et C; et, pour chacun d'eux, disent Ci, définir: Fi = {t || t C, t 6 Ci} Ensuite, nous définissons HC comme une famille d'ensembles d'arbres qui remplissent deux propriétés: chaque H ∈ HC coupe chaque Fi, et tout le H ∈ HC sont minimes (par rapport à) sous cette condition. Nous prenons maintenant l'ensemble suivant des règles RD, RD = ⋃ {C H → t || H ∈ HC, t ∈ C} comme un sous-ensemble de l'ensemble beaucoup plus large de règles R'D définies ci-dessus, et de l'état de notre résultat principal: théorème 3.2 Compte tenu de l'ensemble de données D des arbres, les formules suivantes sont propositionnel logiquement équivalentes: i / la conjonction de toutes les formules de Horn satisfaits par tous les modèles mt pour t ∈ D; ii / la conjonction de R0 et toutes les traductions propositionnelles de formules dans R'D; J. Balca ZAR et al. iii / la conjonction de R0 et toutes les traductions propositionnelles de formules en RD. Notons tout d'abord la preuve que je / est vu facilement impliquer ii /, parce que Lemme 3.1 signifie que tous les adverbes conjonctifs dans ii / également appartiennent à i /. De même, ii / trivialement implique iii / parce que tous les adverbes conjonctifs en iii / appartiennent également à ii /. Il reste à dire que la formule iii / implique que i /. Choisissez une formule Corne H → v qui est satisfaite par tous les modèles mt pour t ∈ D: qui est, chaque fois mt | = H, mt | = v Soit v = vt '. Cela signifie que, pour tout t ∈ D si H t alors t 't ou, de manière équivalente, t' ∈ rD (H). Nous montrons qu'il ya H 'H qui coupe peu tous les ensembles de la forme Fi = {t || t C, t 6 Ci} pour C = fermé rD, et pour son ensemble de ses prédécesseurs immédiats Ci. Une fois que nous avons un tel H ', puisque t ∈ C, la règle H' → t est en RD. En collaboration avec R0, leurs traductions propositionnel communes entail H → T: un modèle arbitraire rendant vrai H et épanouissante doit faire H R0 vrai à cause de H 'H et, si H' → t vaut pour elle, t est aussi vrai dans ce . Depuis R0 et H '→ T sont disponibles, H → t détient. Par conséquent, nous avons juste besoin de prouver que tel H 'existe H. Notez que H croise déjà tous les Fi: H rD (H) = C; supposons que pour une bonne prédécesseur Ci, H ne Intersection Fi. Cela signifie que Ci t pour tout t ∈ H, et donc, le plus petit ensemble fermé au-dessus de H, qui est, rD (H) = C, doit être inférieure à l'ensemble fermé Ci ou coïncident avec, et ni est possible. Par conséquent, il suffit de considérer tous les ensembles d'arbres H '', où H '' H, qui encore Intersection tous les Fi. Ce n'est pas une famille vide puisque H est lui-même en elle, et il est une famille finie; Il a donc au moins un élément minimal (par rapport à), et l'un d'eux peut être choisi pour notre H '. Ceci termine la preuve. 4 sur la recherche des règles implicites pour Subtrees Nous définissons formellement les règles inplicit comme suit: Définition donnée trois arbres t1, t2, t3, on dit que t1 ∧ t2 → t3 est une règle Corne implicite (abbreviately, une règle implicite) si pour chaque arbre t elle détient t1 t2 t ∧ t ↔ t3 t. On dit que deux arbres t1, t2, ont des règles implicites s'il y a un t3 arbre pour lequel t1 t2 ∧ → t3 est une règle implicite de Horn. Une généralisation naturelle pourrait être considérée comme ayant plus de deux antécédents; nous tances cunscribe notre étude à des règles implicites de deux antécédents. L'objectif des définitions suivantes est de fournir des outils formels, pour une règle implicite. Définition Un arbre c est un superarbre commun minimal de deux arbres a et b si c, b c, et d pour chaque ≺ c, soit d'un 6 d ou b 6 d. Dans l'exemple de règle implicite donnée dans l'introduction, l'arbre à droite du signe est un cation impli- superarbre commune minimale des arbres sur la gauche. Conséquences de l'exploitation minière de Treillis de Définition Fermé Arbres Etant donnés deux arbres a, b, nous définissons a⊕ b comme superarbre minimal commun a et b. Comme il peut y avoir plus d'un superarbre commun minimal de deux arbres, nous choisissons celui avec la plus petite représentation naturelle, comme indiqué dans (Balcázar et al., 2007b) afin d'éviter l'ambiguïté de la définition. Définition Un composant c1 est d'un maximum si l'un des composants d'un c2 c2 c1 satisfait, et il est maximal en l'absence de composant c2 telle que c1 c2 ≺. Notez qu'un arbre ne peut pas avoir des composants, mais le maximum, dans le cas où il a plus d'un, tous doivent être égaux. Les faits suivants sur les composants seront utiles plus tard. Les preuves ne sont pas difficiles et seront fournis dans une version ultérieure de cet article, à cause du manque d'espace. Lemme 4.1 Si un arbre n'a pas de composante maximale, il doit avoir au moins deux composantes parabole maximale incom-. Lemme 4.2 Deux arbres ont des règles implicites si et seulement si elles ont un superarbre commun minimal unique. Lemme 4.2 on peut calculer des règles implicites d'une manière algorithmiquement coûteuse, l'obtention d'supertrees minimales communes, qui a coûté quadratique. Pour éviter cela, nous vous proposons plusieurs heuristiques pour accélérer le processus. Une conséquence de simples de ces lemmes est: Cor 4.3 Tous les arbres dispensable corollaire a, b telle que b ont des règles implicites. Un cas particulièrement utile lorsque l'on peut prouver formellement les règles implicites, et qui permet de détecter une grande quantité d'entre eux dataset l'exploitation minière, se produit lorsque l'un des arbres a dans la vie réelle d'un seul composant. Théorème 4.4 Supposons que a et b sont deux arbres incomparables, et b a une seule composante. Ensuite, ils ont des règles implicites si et seulement si a une composante maximale qui est une sous-arborescence du composant b. Preuve Supposons que a et b sont deux arbres incomparables tels que décrits dans la déclaration: a a des composants a1,. . . , Un, et b a seulement le composant b1. Nous représentons leurs structures graph- comme aa n1 quement ... b: 1b a: Supposons qu'un composant a un maximum qui est un sous-arbre de b1. Sans perte de généralité, on peut supposer qu'un composant est un tel. Ensuite, nous prétendons que ∧ b → c est une règle implicite, où c est un arbre avec des composants a1,. . . , An-1, et b1. Autrement dit, le juge Balcázar et al. c: b: a: 1 n 1 n-1 b 1AA 1a ...... a Pour montrer que c'est en fait une règle implicite, supposons que, pour un arbre x, a x et x b. Du fait que x, nous gagnons un aperçu de la structure de x: elle doit contenir des composants où les composants de A et de B peut cartographier, et ainsi, il doit y avoir au moins n composants x. Alors, laissez-x1,. . . , Sont les composants xm de x, avec m ≥ n, et supposons que ai xi pour tout i tel que 1 ≤ i ≤ n. Etant donné que B est également un sous-arbre de x, b1 doit être une sous-arborescence de certains xi avec 1 ≤ i ≤ m. Nous montrons maintenant que, pour toutes les valeurs possibles de i, c doit être un sous-arbre de x puis, a ∧ b → c est une règle implicite: • Si i ≥ n, ak XK pour tout k ≤ n 1, et xi b1. • Si i <n, puis - ak xk pour k 6 = i et 1 ≤ k ≤ n 1 - ai un xn - b1 xi Dans les deux cas, c x, et nous fait. Pour montrer l'autre sens, supposons que n'a pas une composante maximale qui est un sous-arbre de b1. Nous montrerons que, dans ce cas, il y a deux supertrees communes minimales différentes a et b. Ensuite, par le Lemme 4.2, nous obtiendrons la conclusion souhaitée. La condition précédente sur les composants maximale peut être divisé en deux possibilités: 1. Tree a ne dispose pas d'une composante maximale. D'après le lemme 4.1, il doit y avoir deux composantes maximales d'un qui sont incomparables, disons-ai et aj. Maintenant, nous prétendons que les deux arbres c et d dans la figure ci-dessous sont deux supertrees communes minimales différentes a et b: ... ...... aa a1 nj ... ...... aa an1 i + + d: ia b1 ja 1b c: En premier lieu, nous montrons que c et d sont différents. On suppose qu'ils sont égaux. Ensuite, étant donné que b1 ne peut pas être un sous-arbre selon l'une quelconque ak, 1 ≤ k ≤ n (parce que a et b sont supposés être incomparable), les composants contenant b1 doivent correspondre. Mais alors, les multijeux suivants (le reste des composants c et d) doivent être égaux: {al | 1 ≤ l ≤ n ∧ l 6 = i} = {al | 1 ≤ l ≤ n ∧ l 6 = j}. Mais l'égalité si et seulement si ai = aj, ce qui est faux. Ensuite, c 6 = d. En second lieu, nous montrons que c contient a et b peu. Appel c1,. . . , Cn pour les composants de c dans le même ordre dans lequel elles apparaissent: ck = ak pour tout k ≤ n sauf pour k = i, pour laquelle des mines Implications de grilles d'arbres fermé ck = ai ⊕ b1. Supposons maintenant que l'on supprime une feuille de c, c obtenir '≺ c, dont les composantes sont C'1,. . . , C 'n (qui sont comme les ck est à l'exception de celle contenant la feuille supprimé correspondante). Nous verrons que c 'ne contient pas ou b en analysant deux possibilités pour l'emplacement de la feuille supprimé, soit (a) dans le composant ci = ai ⊕ b1 ou (b) dans tout autre composant: (a) Supposons que la feuille est supprimé à partir de ci = ai ⊕ b1 (qui est, c'i ≺ ci). Alors, que ce soit AI 6 c'i ou b1 6 c'i. Dans le cas où b1 6 c'i, nous avons que b 6 c 'depuis b1 ne figure pas dans tout autre composant. Donc, supposons que ai 6 c'i. Dans ce cas, tenir compte du nombre d'occurrences s d'Aï dans un. Etant donné que ai est une composante maximale, les occurrences d'AI dans un sont les seuls composants qui contiennent ai comme un sous-arbre. Par conséquent, le nombre de compone nts de c qui contiennent ai est exactement s, mais il est s - 1 en c 'en raison de la feuille supprimée dans ai ⊕ b1. Ensuite, un 6 c. (B) On suppose maintenant que la feuille est supprimé à partir de la visualisation pour k 6 = i. Dans ce cas, il est clair que ak 6 c'k, mais nous devons nous assurer que 6 c 'par quelque mappage matchs avec une composante ak de c' différent de c'k. Pour contradiction, Supposons qu'il existe un tel cartographie, qui est, pour une permutation π de du groupe symétrique de n éléments, nous avons h c'π (m) pour chaque m ≤ n. Soit l la longueur du cycle contenant k dans la représentation de cycle de π (ainsi, nous avons πl (k) = k, et a une autre valeur de k pour les exposants 1 à L - 1). Nous avons que ak aπ (k) aπ2 (k). . . aπl-1 (k) pour chaque depuis h de la chaîne précédente, sauf le dernier, si π (m) 6 = i, puis h c'π (m) = aπ (m); tandis que si π (m) i =, puis am aπ (m) parce que ai est une composante maximale. De la chaîne précédente de confinements, nous concluons que ak aπl-1 (k). Mais aπl-1 (k) c'πl (k) = c 'k. Mettre ensemble, nous obtenons ak c'k, ce qui est une contradiction. Par conséquent, un 6 c. Maintenant, à partir de (a) et (b), nous pouvons conclure que c est une superarbre minimale commune a et b. De toute évidence, la même propriété peut faire valoir pour d de manière symétrique, et puisque c et d sont différents, Lemme 4.2 implique que a et b ne peut pas avoir des règles implicites. 2. Tree a des composants a un maximum, mais ils ne sont pas sous-arbres de b1. Nous considérons maintenant les arbres suivants: 1a-1 a un bana1 1bn1 ... + e: ... f: Nous montrerons (a) cet arbre est un e superarbre commune minimale a et b, et (b) cet arbre f est un superarbre commun de a et b et ne contient pas e. De (a) et (b), nous pouvons conclure que a et b doit avoir deux sous-arbres communs minimaux différents. Prenez e comme l'un d'entre eux. Pour l'autre, soit f 'être un arbre obtenu à partir de f en supprimant les feuilles jusqu'à ce qu'il soit minime (qui est, en supprimant un autre congé ne contiendraient pas a ou b). Depuis e 6 f (à partir du point (b)), on estime que e 6 f '. D'autre part, si nous avions f 'e, puisque e est minime, nous aurions e = f', puis e f, J. Balcázar et al. qui contredit le point (b). Par conséquent, e et f doivent être deux supertrees communes minimales incomparables de a et b, et le théorème suivant. Pour compléter la preuve, il est seulement à gauche indique: (a) l'arbre est un e superarbre minimale commune a et b. Notez que la preuve dans le cas précédent 1, montrant que c est une superarbre minimale commune a et b, applique à l'e aussi. L'argument en faveur c était fondé sur la maximalité de AI, mais un maximum est e, puis il est également maximale, de sorte que la preuve s'applique. (B) l'arbre f est un superarbre commun de a et b, et ne contient pas e. Il est clair que, par définition, f est un superarbre commun de a et b. Maintenant, nous allons faire valoir que e 6 f. Pour cette inclusion est vrai, un ⊕ b1 devrait être une sous-arborescence de certains composants de f. Il ne peut pas être un sous-arbre de l'un des composants de l'ak (k ≤ n) depuis lors b1 et b ak a, ce qui est faux. D'autre part, un ⊕ b1 ne peut pas être un sous-arbre de b1 non plus, parce que cela signifierait qu'une b1, ce qui est faux dans ce cas. Par conséquent, f ne contient pas e. Depuis que nous avons prouvé l'existence de deux supertrees communes minimales également pour ce cas, une nouvelle application du lemme 4.2 complète la preuve. Corollaire 4.5 Deux arbres avec un composant ont chacune des règles implicites si et seulement si elles sont comparables. En fait, un fragment de l'argumentation de ce théorème peut également être appliqué directement aussi bien à certains cas qui apparaissent dans la pratique: Définition Étant donné deux arbres a, b, on note a + b l'arbre construit reliant les racines de tous les composants de a et b à un seul noeud racine. Définition Étant donné deux arbres a et b, un arbre avec des composants a1, · · ·, un arbre et b avec des composants b1, · · ·, bk, et n ≥ k, on note a] b l'arbre construit par récursive joignant les arbres aI] bi pour 1 ≤ i ≤ k, et ai pour k <i ≤ n, à un seul noeud racine. Si b ne dispose que d'un nœud puis a] b = a. Dans le cas où n <k, a] b est défini comme b] a. Proposition 4.6 La règle a ∧ b → c est pas un impli cit règle si c 6 a + b ou c 6 a] b. Preuve Si c 6 a + b ou c 6 a] b, alors a + b ou] b sont supertrees a et b qui ne sont pas supertrees de c et par la définition de la règle implicite, la règle a ∧ b → c est pas implicite. En utilisant la proposition 4.6, nous avons mis en place une heuristique récursive supplémentaire qui peut être expliqué comme suit: pour chaque règle a ∧ b → c nous construisons a + b et a] b et si nous nous rendons compte que l'un d'entre eux est pas un superarbre de c, alors la règle n'est pas implicite. 5 Validation expérimentale Nous avons testé nos algorithmes sur deux ensembles de données réelles. La première est CSLOGS Dataset (Zaki (2002)). Il se compose de fichiers journaux Web collectés plus d'un mois au département des implications minières informatique de Treillis de Sciences Fermé Arbres de l'Institut Polytechnique Rensselaer. Les journaux ont touché 13.361 pages Web uniques et ensemble de données CSLOGS contient 59.691 arbres. La taille moyenne des arbres est 12. Le deuxième ensemble de données est Gazelle, un ensemble de données de la Coupe KDD 2000 (Kohavi et al., 2000). Cet ensemble de données est un fichier journal web d'un véritable centre commercial Internet (gazelle.com), a une taille de 1,2 Go et contient 216 attributs. Nous utilisons l'attribut « session ID » à associer à chaque session utilisateur un arbre unique. Les arbres enregistrent la séquence des pages Web qui ont été visités dans une session utilisateur. Chaque arbre noeud représente un contenu, assortiment et le chemin produit. Les arbres ne sont pas construits à l'aide de la structure du site Web, au lieu qu'ils sont construits suivant la diffusion en continu de l'utilisateur. Chaque fois qu'un utilisateur visite une page, s'il n'a pas visité avant, nous prenons cette page comme un nouveau nœud plus profond, sinon, nous backtrack au nœud cette page correspond à, si elle est le dernier nœud visité sur une profondeur de béton. L'ensemble de données résultant est constitué de 225.558 arbres. Sur ces ensembles de données, nous avons calculé les règles d'association après notre méthode. Nous avons ensuite analysé un certain nombre de questions. Tout d'abord, nous avons vérifié combien de règles redondantes pourraient être évités par un système de production de règles plus sophistiquées le long des lignes de base Guigues Duquenne-; Cependant, la structure de ces ensembles de données conduit à peu ou pas de redondance pour cette raison, et nous omettons examen plus approfondi de cette considération. Ensuite, nous avons mis en place une étape de détection de règle implicite basée sur tous les critères DE- tracée dans la section précédente. considérations de synchronisation sont plutôt non pertinentes, en ce que le temps de surcharge imposée par cette étape de détection de la règle implicite est relativement faible. Nous comparons le nombre de règles obtenues, le nombre de règles implicites détectées et non implicite, et le nombre de règles non implicites. La figure 1 montre les résultats pour l'ensemble de données CSLOGS, et l'ensemble de données Gazelle. Nous observons que lorsque le support minimum des sous-arbres fréquents fermés diminue, le nombre de règles augmente et le nombre de règles détectées diminue. Le nombre de règles tégé dé- dépend de l'ensemble de données et sur le support minimum. A titre d'exemple, nos détecte méthode si une règle est implicite ou non dans 91% des règles obtenues à partir d'ensemble de données CSLOGS avec un support de 7,500 et 32% des règles obtenues à partir de Gazelle dataset avec un support de 500. Le nombre de non règles implicites sont plus de 75% dans les deux ensembles de données. 6 Conclusions Nous avons mis au point, sur la base d'un opérateur de fermeture sur des ensembles d'arbres pour un ensemble de données, étudié dans nos précédents travaux, une nouvelle forme d'implication (ou règle d'association déterministe) entre les arbres. Nous avons présenté une caractérisation mathématique et proposé une méthode pour obtenir une base. Ensuite, nous avons discuté pourquoi les combinatoires particulières de notre application de la base conduisent toujours à des informations redondantes dans la sortie: les règles implicites qui sont construits par notre méthode, mais, en fait, en raison des combinatoires des arbres, tiendrez dans tous les ensembles de données et parler rien sur l'ensemble de données en cours d'analyse. Alors qu'une caractérisation complète de ces licenciements est, jusqu'à présent, hors de la portée de notre travail, nous avons été en mesure de fournir une caractérisation exacte pour un cas particulier, où l'un des deux arbres impliqués dans la antece dents a un seul composant. Nous avons démontré, par une mise en œuvre et une analyse empirique sur des ensembles de données de la vie réelle, que nos offres de développement un bon d'équilibre entre la sophistication mathématique et l'efficacité dans la détection des règles implicites, puisque avec seulement notre caractérisation et deux heuristiques nous attrapons un grand rapport de règles implicites. J. Balcázar et al. 0 200 400 600 800 5000 10000 15000 20000 25000 30000 Soutien CSLOGS Nombre de règles Nombre de règles non implicite nombre de règles détectées 0 100 200 300 400 500 0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 support GAZELLE Nombre de règles Nombre de règles pas implicite Nombre de règles détectées figure. 1 - résultats expérimentaux de données réelles sur des jeux de données CSLOGS et Gazelle Références Balcázar, J. L., A. Bifet et A. Lozano (2006). Intersection des algorithmes et un opérateur de fermeture sur les arbres non ordonnées. En MLG 2006, 4e Atelier international sur l'exploitation minière et l'apprentissage avec des graphiques. Balcázar, J. L., A. Bifet, et A. Lozano (2007a). L'exploitation minière des arbres désordonnées fermés fréquents à travers des représentations naturelles. Actes de la 15e Conférence internationale sur les structures (CIEC Con- 2007 conceptuels). Balcázar, J. L., A. Bifet, et A. Lozano (2007b). les tests et l'exploitation minière sous-arbre d'arbre fermé à travers des représentations naturelles. Atelier Les progrès dans la connaissance conceptuelle Engineer- ing. Balcázar, J. L. et G. C. Garriga (2007a). implications caractérisantes des ordres partiels injectifs. Dans Actes de la 15e Conférence internationale sur les structures conceptuelles (Implications CIEC Mines de Treillis de 2007) Fermé les arbres. Balcázar, J. L. et G. C. Garriga (2007b). Corne axiomatisations pour les données séquentielles. Théorique- cal Computer Science 371 (3), 247-264. Chi, Y., R. Muntz, S. Nijssen, et J. Kok (2005a). l'exploitation minière fréquente de sous-arbre - une vue d'ensemble. Fondam. Inf. 66 (1-2), 161-198. Chi, Y., Y. Xia, Y. Yang et R. Muntz (2005b). L'exploitation minière des arbres sous fréquents fermés et maximale de bases de données d'arbres enracinés étiquetés. IEEE Transactions sur les connaissances et l'ingénierie des données 17 (2), 190-202. Kohavi, R., C. Brodley, B. Frasca, L. Mason, et Z. Zheng (2000). KDD-Cup 2000 Rapport des organisateurs: Peeling l'oignon. SIGKDD explorations 2 (2), 86-98. Pfaltz, J. L. et C. M. Taylor (2002). découverte de connaissances scientifiques à travers des formations trans itératives du concept lattices. Dans l'atelier sur Discrete Math. et l'exploration de données à la Conférence SIAM DM, pp. 65-74. Termier, A., M.-C. Rousset, et M. Sebag (2004). DRYADE: une nouvelle approche pour découvrir des arbres fréquents fermés dans les bases de données d'arbres hétérogènes. En ICDM, pp. 543-546. Sauvage, M. (Septembre 1994). Une théorie des espaces de fermeture finis en fonction des implications. Advances in Mathematics 108, 118-139 (22). Zaki, M. J. (2002). l'exploitation minière des arbres fréquents dans Efficacement une forêt. Dans 8 SIGKDD Conférence nationale sur les connaissances inter-découverte et l'exploration de données. Nous proposons Résumé Une Manière à des rules d'Extraire association de haute confiance d'en- sembles de se Données d'arbres non Composant étiquetés. Les ANTÉCÉDENTS par un Sont obtenus à un calcul transversal apparenté d'hypergraphe, TANDIS Que les conséquens se suivent d'applications Une des Opérateurs de sur les arbres fermeture non des Dans étiquetés développés des travaux Précédents auteurs. Nous Discutons en plus de le détail des rules trivialement CAS valides, ci-Sont PUISQUE Celles, plus complexes Que in the des itemsets CAS, being nous ne Donné Que Travaillons en plus treillis AVEC ONU.