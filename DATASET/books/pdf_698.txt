articles assemblage pdfSoTree Auto organisation topologique et hiérarchique des données Hanane Azzag Mustapha Lebbah Université Paris 13 LIPN UMR 7030 CNRS 99 avenue Jean Baptiste Clément 93430 Villetaneuse France {hanane azzag mustapha lebbah} lipn univ paris13 fr Résumé Nous proposons dans cet article d’introduire une nouvelle approche pour la classification non supervisée hiérarchique Notre méthode nommée So Tree consiste à construire d’une manière autonome et simultanée une partition topologique et hiérarchique des données Chaque ”cluster” de la partition est associé à une cellule d’une grille 2D et est modélisé par un arbre dont chaque noeud représente une donnée Nous évaluerons les capacités et les performances de notre approche sur des données aux difficultés variables Les résultats pré liminaires obtenus sont encourageants et prometteurs pour continuer dans cette direction 1 Introduction Le problème de la classification de données est identifié comme une des problématiques majeures en extraction des connaissances à partir de données Depuis des décennies de nom breux sous problèmes ont été identifiés par exemple la sélection de données ou de variables la variété des espaces de représentation numérique symbolique l’incrémentalité la nécessité de découvrir des concepts d’obtenir une hiérarchie etc La popularité la complexité et toutes ces variantes du problème de la classification de données Jain et al 1999 ont donné nais sance à une multitude de méthodes de résolution Ces méthodes peuvent à la fois faire appel à des principes heuristiques ou encore mathématiques Dans ce travail les méthodes qui nous intéressent sont celles qui font de la classification topologique et hiérarchique non supervisée de données Vesanto et Alhoniemi 2000 Vesanto et Sulkava 2002 Ambroise et al 1998 Golli et al 2007 L’avantage des cartes topolo giques est de pouvoir représenter et visualiser un grand ensemble de données ainsi que les regroupements que l’on peut y effectuer Elles permettent aussi d’utiliser une représentation cartographique visuelle et familière à l’utilisateur Dans ce travail nous cherchons à introduire une nouvelle approche de classification si multanée hiérarchique et topologique nommée SoTree Self organizing Tree L’idée est de déplacer de manière ”autonome” des données sur une grille 2D où chaque cellule représente un arbre de données Nous disposerons ainsi d’une classification horizontale topologique des données sur la grille et d’une classification verticale hiérarchique au niveau de chaque cellule La fonction topologique de notre algorithme est inspirée des cartes topologiques de Kohonen RNTI E 19 555 Classification topologique et hiérarchique Kohonen 2001 Golli et al 2007 La construction de l’arbre est inspirée d’un algorithme de classification hiérarchique biomimétique Azzag et al 2006 Notre article est organisé comme suit dans la section 2 nous présentons les principes généraux de notre modèle ainsi que les règles autonomes de déplacement sur la carte et de construction de l’arbre La section 3 est consacrée aux résultats et à l’étude comparative sur des bases de données numériques La dernière section rassemble les conclusions faites au cours des expérimentations et présente les perspectives 2 Modèle proposé Une grande variété d’algorithmes de cartes topologiques est dérivée du premier modèle ori ginal proposé par Kohonen Ces modèles sont différents les uns des autres mais partagent la même idée de présenter les données de grande dimension en une simple relation géométrique sur une topologie réduite Le modèle que nous proposons utilise la même architecture de grille associée à la notion de voisinage Notre modèle consiste à rechercher une classification auto matique non supervisée qui fournie une organisation topologique et hiérarchique d’une base d’apprentissage A = {xi ∈ Rd i = 1 n} où l’individu xi = x1i x2i x j i x d i Ce modèle se présente sous forme d’une carte possédant un ordre topologique de nc cellules Les cellules sont réparties aux nœuds d’un maillage Chaque cellule c est la racine d’un sous arbre Treec et chaque noeud Nxi du sous arbre représente une donnée xi Plus précisément notre modèle définit un ensemble de sous arbres répartis sur une grille appelée C Prendre en compte la notion de proximité entre sous arbres dans la carte C nous oblige à définir une relation de voisinage topologique utilisée dans les cartes topologiques classiques Ainsi la topologie de la carte est définie à l’aide d’un graphe non orienté et la distance δ c r entre deux cellules c et r étant la longueur du chemin le plus court qui sépare les cellules c et r associées aux sous arbres Treec et Treer Afin de modéliser l’influence d’une cellule r sur une cellule c en fonction de leur proximité on utilise une fonction de voisinage définie à partir d’une fonction noyau K K ≥ 0 et lim |y|→∞ K yi = 0 L’influence mutuelle entre deux sous arbres treec et treer de racine c et r sera donc définie par la fonction KT δ c r où T représente la taille du voisinage la température Notons également que chaque sous arbre est associé à un point représentant noté wc qui est une donnée xi du sous arbre treec wc = xi ∈ treec Choisir un représentant permet d’adapter notre algorithme à n’importe quel type de données Il suffit juste de définir un tableau de dis similarité des données La qualité de la partition et des sous arbres associés est définie par la fonction de coût suivante R χ w = ∑ xi∈A ∑ r∈C KT δ χ xi r ||xi − wr||2 1 Où χ affecte chaque donnée xi à une cellule unique de la carte c La minimisation de la fonction de coût R est un problème d’optimisation combinatoire En pratique on se contente d’une solution sous optimale obtenue à l’aide de la version des nuées dynamiques "batch" de Kohonen 2001 Nous proposons ici de minimiser la fonction de coût de la même manière que la version "batch" mais en utilisant les caractéristiques statis tiques fournies par les sous arbres associés à chaque cellule afin d’accélérer la convergence RNTI E 19 556 Azzag et al de l’algorithme Les trois étapes élémentaires pour la minimisation de la fonction de coût sont définies comme suit – Construction de l’arbre Après chaque affectation d’une donnée xi à une cellule c nous allons chercher à lui trouver la meilleure position dans l’arbre Treec associé à cette cellule Pour cela nous utilisons des règles d’accrochages connexions locales inspirées de l’algorithme de clas sification hiérarchique AntTree Azzag et al 2006 La particularité de ces arbres est que chaque noeud N qu’il soit feuille ou noeud interne représente une donnée x Nous no tons Nxi le noeud à accrocher associé à la donnée xi Nxpos le noeud courant de l’arbre et Nxi+ le noeud qui représente la donnée connectée à Nxipos qui est la plus proche en terme de distance à la donnée de Nxi Nous notons également Vpos le voisinage lo cal dans l’arbre perçu par le noeud Nxi représentant ainsi les autres nœuds données connectés à Nxpos Chaque noeud Nxi représentant ainsi une donnée xi sera connecté au noeud Nxpos position courante si et seulement si cette action augmente la valeur du seuil de distance TDist Nxpos Cette mesure définie la valeur de la distance maximum observée dans le voisinage local Vpos entre chaque couple de données connectées au noeud courant Nxpos TDist Nxpos = Maxj k ∥∥Nxj − Nxk∥∥2 = Maxj k‖xj − xk‖2 2 En d’autres termes les règles d’accrochages consiste à comparer un noeud Nxi au noeud le plus proche Nxi+ Dans le cas où les deux nœuds sont suffisamment éloi gnés entre eux ‖Nxi −Nxi+‖2 > TDist Nxpos alors le noeud Nxi sera connecté à la position courante Nxpos Dans le cas contraire le noeud Nxi associé à la donnée xi sera déplacé vers le noeud le plus proche Nxi+ Par conséquent la valeur TDist diminue pour chaque nœud accroché à l’arbre En effet chaque connexion d’une donnée xi implique la minimisation locale de la valeur du TDist correspondant A la fin de la phase de construction d’arbre chaque cellule c de la carte C sera associée à un sous arbre treec Les règles d’accrochage sont basées sur le principe du plus proche voisin Chaque donnée est donc connectée au plus proche voisin qui formera par la suite son "fils" dans l’arbre – Phase d’affectation par groupe Chaque donnée xi est connectée dans le sous arbre Treec à un ensemble de données formant ainsi la relation hiérarchique père fils Nous utilisons par la suite la fonction nœudFils xi qui fournie l’ensemble des nœuds fils d’un nœud parent Nxi associé à la donnée xi A l’itération initiale t = 0 nœudFils xi = xi De la même manière que les cartes topologiques classiques notre phase d’affectation modifiée consiste donc à trouver pour chaque donnée xi une cellule dite ”gagnante” en utilisant la fonction d’affectation χ Cette cellule sera désignée comme cellule gagnante pour tous les k plus proches voisins de xi En d’autres termes le sous arbre complet de racine Nxi est affecté à la cellule gagnante d’une manière récursive La fonction d’affectation est définie comme suite χ nœudFils xi = arg min r ∑ c∈C KT δ r c ‖xi − wc‖2 3 RNTI E 19 557 Classification topologique et hiérarchique Les propriétés de la distance euclidienne font que les classes obtenues en minimisant la fonction de coût sont compactes et bien séparées les observations dans un même sous arbre sont proches les unes des autres compacité et sont éloignées des observations des autres sous arbres séparation – Phase de représentation Minimiser R par rapport à wc revient à rechercher le point qui minimise toutes les distances locales wc = minwc∈treec ⎛⎝ ∑ xi �=wc xi ∈treec ‖xi − wc‖2 ⎞⎠ ∀c ∈ C 4 Bien que cela n’apparaisse pas explicitement lors des trois étapes précedentes la température T évolue en fonction des itérations de Tmax à Tmin de la même manière que les cartes to pologiques classiques Dans le cas pratique nous utilisons la fonction de voisinage suivante KT x = e −δ r c T 1 Entrées Carte C de nc cellules base d’apprentissage A le nombre d’itérations niter 2 Sortie Carte C de nc cellules vides ou constituées de sous arbres 3 pour c ∈ C faire 4 wc = xi * Initialiser la carte de manière aléatoire * 5 finpour 6 pour t = 1 niter faire 7 pour xi ∈ A faire 8 T = T max × “ T min T max ” t niter−1 9 si la première affectation de xi alors 10 Rechercher la cellule ”gagnante”χ xi en utilisant la formule d’affectation eq 3 11 Associer la donnée xi à un nœud Nxi 12 Accrocher le nœud Nxi dans le sous arbre Treeχ xi en utilisant les règles de construction d’arbre 13 Mettre à jour le point wc représentatif en utilisant la formule eq 4 14 15 sinon 16 * time affectation pour la donnée xi* 17 Rechercher la ième cellule ”gagnante”cnew = χ nœudFils xi en utilisant l’équation 3 18 si cnew �= cold alors 19 Affecter la donnée xi et les fils nœudFils xi à la nouvelle cellule cnew 20 Accrocher le nœud Nxi ainsi que les fils associés à l’arbre treecnew en utilisant les règles de construction d’arbre pour chaque donnée 21 Mettre à jour les points wcold et wcnew représentatifs en utilisant la formule eq 4 22 23 finsi 24 finsi 25 finpour 26 finpour ALG 1 Algorithme de classification topographique et hiérarchique SoTree 3 Validation Afin d’évaluer la qualité de la classification obtenue nous avons utilisé des bases de données comportant un nombre variable d’observations Blake et Merz 1998 et des données artificielles engendrées par des lois gaussiennes avec des difficultés diverses recouvrement des classes RNTI E 19 558 Azzag et al variables non pertinentes etc Avant de comparer nos résultats numériques nous présentons une visualisation de la carte avec les arbres associés FIG 1 – Visualisation des résultats sur la base Iris La figure 1 présente les résultats visuels de notre approche sur la base Iris Les sous arbres placés directement sur chaque cellule constituent la classification ”verticale” fournie par So Tree Chaque sous arbre correspond à une classe constituée de toutes les données présentes dans la cellule de la carte L’approche SoTree répond ainsi aux propriétés visées pour une bonne classification hiérarchique Avec les règles que nous avons développé le nœud Nxi constitue la donnée la plus représentative de son sous arbre On observe que les données pla cées dans treec sont les plus proches similaires à Nxi Les données filles ou nœuds fils de Nxi représentent de manière récursive des sous arbres qui sont les plus éloignés dissimilaires possible entre eux Bases Class Réel Dim SoTree AntTree CAH IRIS 3 150 0 88 5 0 94 5 0 88 3 TWODIAMONDS 2 800 0 99 2 0 99 7 0 99 2 ART1 4 400 0 83 4 0 77 8 0 84 5 ART4 2 200 1 0 2 0 98 4 01 0 3 ART6 4 400 1 0 4 0 93 4 01 0 5 GLASS 7 214 0 36 4 0 45 9 0 49 3 THYROID 3 215 0 73 3 0 88 9 0 84 5 TAB 1 – Résultats comparatifs obtenus avec l’approche SoTree la Classification Ascendante Hiérar chique et l’algorithme AntTree Le numéro qui suit le taux de bonne classification taux de pureté indique le nombre de sous ensembles de la partition trouvée En ce qui concerne les résultats numériques le tableau 1 résume les résultats prélimi naires obtenus Nous pouvons remarquer que SoTree génère un nombre de classes trouvées très proches du nombre de classes réelles avec des taux de pureté avoisinant le 100% En com paraison avec les deux autres algorithmes nous pouvons conclure sur le fait que SoTree est plus performent qu’AntTree et de qualité similaire à la Classification Ascendante Hiérarchique RNTI E 19 559 Classification topologique et hiérarchique 4 Conclusions et perspectives Dans ce travail nous avons développé une nouvelle méthode de classification hiérarchique non supervisée qui possède certaines propriétés Elle fournit une classification locale hié rarchique des données ceci permet une meilleure visualisation de l’organisation des données affectées à chaque cellule Elle fournit une auto organisation à la fois ”verticale” avec les sous arbres présents dans les cellules et une organisation ”horizontale” par la topologie et la prise en compte du voisinage sur la grille En ce qui concerne les perspectives les résultats que nous avons présenté sont préliminaires et beaucoup de travail reste à faire Cependant lors de la comparaison avec la CAH et AntTree nous avons pu constater que notre nouvelle approche ob tient des résultats compétitifs sur plusieurs bases Il serait également judicieux de s’intéresser à l’aspect visuel de notre approche En effet nous pensons visualiser en 2D 3D les différents arbres résultants de la classification afin de permettre une exploration interactive des données Références Ambroise C G Séze F Badran et S Thiria 1998 Hierarchical clustering of self organizing map for cloud classification Neurocomputing 30 47–52 Azzag H C Guinot et G Venturini 2006 Data and text mining with hierarchical clustering ants pp 153–189 Blake C et C Merz 1998 Uci repository of machine learning databases technical re port Technical report University of California Department of information and Computer science Irvine CA available at ftp ftp ics uci edu pub machine learning databases Golli A E F Rossi B Conan Guez et Y Lechevallier 2007 Une adaptation des cartes auto organisatrices pour des donnees decrites par un tableau de dissimilarites CoRR abs 0709 3586 Jain A K M N Murty et P J Flynn 1999 Data clustering a review ACM Computing Surveys 31 3 264–323 Kohonen T 2001 Self organizing Maps Springer Berlin Refanonyme R 2006 Refanonyme refanonyme 34 Vesanto J et E Alhoniemi 2000 Clustering of the self organizing map Neural Networks IEEE Transactions on 11 3 586–600 Vesanto J et M Sulkava 2002 Distance matrix based clustering of the self organizing map In ICANN ’02 Proceedings of the International Conference on Artificial Neural Networks London UK pp 951–956 Springer Verlag Summary We propose in this paper to introduce a new approach for hierarchical clustering Our method is called SoTree SoTree build independently and simultaneously a topological and a hierarchical organization of data Each obtained cluster is associated to cell of a 2D grid and is modeled by a tree each node represents a given data We have test the capacity and the performance of our approach on several databases Preliminary results are encouraging and promising to continue in this direction RNTI E 19 560 