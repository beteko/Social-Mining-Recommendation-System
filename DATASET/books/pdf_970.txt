algorithme multi agent classification construction ontologies dynamiques kévin ottens nathalie aussenac gilles université sabatier route narbonne 31062 toulouse cedex ottens aussenac résumé construction ontologies partir textes reste tâche teuse temps justifie émergence ontology learning notre système dynamo inscrit cette mouvance apportant approche originale architecture multi agent adaptative particulier article présente notre approche algorithme distribué classification hiérarchique applique résultats analyseur syntaxique algorithme évalué comparé algorithme centralisé conventionnel forts sultats discutons limites dressons perspective aménagements effectuer aller solution complète construction ontologies introduction analyse syntaxique terminologique textes organisés corpus envisagée depuis quinzaine années comme issue possible problème construction ontolo terminologies seulement référence utilisation langue moyen assurer certaine pertinence connaissances ainsi identifiées surtout dispo nibilité textes format électronique autorise recours analyse logiciels traitement automatique langues enfin particulier ontologie construire servir indexer annoter documents données recours textes fournit terminologie riche celle utilisée documents plusieurs méthodes définies guider processus rendre systématique comme archonte bachimont terminae aussenac gilles toutefois méthodes heurtent lourdeur dépouillement résultats logiciels syntaxique lexicale sémantique textes auxquels elles recours toutes accordent souligner majeur analyste appelerons aussi suite ontologue interprétation résultats ainsi lorsqu outil repérage relations selon approche patron présente phrases contenant termes relation cette relation doive intégrée ontologie encore mette relation exactement concepts auxquels renvoient termes séguéla aussi depuis quelques années plusieurs tentatives effectuées réduire charge analyste elles profitent avancées apprentissage automatique méthodes classification construction ontologies dynamiques sification exploiter automatiquement données linguistiques extraites textes parle ontology learning maedche titre exemple approche préconisée maedche staab utilise heuristiques algorithme fouille données appli textes découvrir règles association entre termes définir ainsi concepts relations entre concepts notre système dynamo1 objectif réduire manuelle pouillement résultats analyse textes suggérer amorce réseau conceptuel construire ontologie efficacement approche retenue origi appel système multi agent adaptatif systèmes capable répondre changements induits utilisateur modifiant structure choix motivé qualités offrent systèmes multi agents adaptatifs peuvent faciliter point interactive système georgé notre réseau conceptuel permettent construction incrémentale automatique prise compte progressive nouvelles données issues analyses textes enfin peuvent aisément implémentés manière répartie ainsi comportement dynamo trois étapes système propose taxonomie utilisateur modifications locales système réorganise faire nouvelle proposition contrairement asium faure utilisateur invervient résultat entier contrôle chaque étape processus classification dynamo prend entrée résultats analyse syntaxique terminologique textes appuie algorithme classification hiérarchique distribué calcul similarité entre termes exploite leurs contextes linguistiques sortie dynamo présente analyste organisation hiérarchique concepts valider affiner corriger jusqu parvenir satisfaisant réseau sémantique article présente architecture approche retenue système dynamo parti culièrement algorithme classification hiérarchique distribuée implémenté agents section après étude quantitative qualitative performances algorithme section soulignons apport approche multi agent classification enfin discutons utilisation perspective construire ontologies section présentation système dynamo architecture proposée cette section présentons architecture dynamo situe lignée réflexion portée contexte global gestion maintenance ontologies dynamiques collections documents ottens contrairement réflexion précédente cherchait entre autre aborder besoins traitement matique langues attachons uniquement combler besoins ingénierie connaissances système dynamo compose trois grandes parties figure réseau termes obtenu sortie extracteur termes utilisé traiter corpus textuel syntagme nominaux forme lemmatisée comme exemple hépatite viral 1dynamic ontologies ottens aussenac gilles système multi agent utilise réseau termes effectuer classification hiérarchique obtenir taxonomie agents système coopèrent positionner hierarchie système multi agent constitue taxonomie interface permettant utilisateur visualiser contrôler processus classifica résultats extracteur termes agent concept terme système ontologue réseau termes architecture système extracteur termes choisi logiciel syntex utilisé notamment tâches construction ontologies bourigault aussenac gilles avons sélectionné principalement robustesse grande quantité informations extraites particulier réseau expansion outil prouvé structure intéressante système classification assadi réseau chaque terme relié tête2 expansion3 autre termes expansion exemple algorithme centralisé classification comme rithme centralisé comme expansion classification algorithme centralisé composé algorithme centralisé réseau termes récupéré sortie extracteur stocké données chaque paire termes suppose possible calculer indice similitude similarité effectuer classification faure assadi nature données intéressons uniquement indices similarité entre objets décrits variables binaires individu décrit présence absence ensemble caractéristiques saporta termes général contextes utilisation syntex contextes identifiés termes relations syntaxiques caractérisées syntagme maximal situé terme syntagme maximal situé queue terme classification construction ontologies dynamiques système multi agent implémente algorithme classification distribué décrit détail section conçu système produisant structure résultante structure chaque agent entité informatique représentant concept comportement autonome permet trouver place organisation savoir ontologie disposent capacités communication algorithmes permettant approcher éloigner selon différents critères sortie système organisation obtenue interaction agents tenant compte pressions rieures exercées ontologue lorsqu effectue modifications taxonomie selon besoins article intéressons principalement processus classification distribué agents création ontologie réduise aspect algorithme classification distribué cette section présente algorithme classification distribué utilisé système améliorer compréhension évaluation section rappelons dessous algorithme utilisé classification hiérarchique ascendante espace métrique mesure similitude utilisée symétrique saporta mesures utilisées notre système algorithme algorithme centralisé classification hiérarchique ascendante entrées liste individus hiérarchiser sorties racine arbre classification longueur faire longueur faire longueur faire similitude alors retirer retirer ajouter algorithme chaque étape classification paire éléments similaires déterminée éléments regroupés classe résultante insérée liste éléments restants algorithme arrête quand cette liste contient élément ottens aussenac gilles structure hiérarchique résultante algorithme nécessairement arbre binaire regroupement regroupement éléments similaires revient aussi éloigner éléments dissimilaires algorithme distribué multi agent présenté conçu autour constats algorithme exécuté manière concurrente chacun agents système notons aussi suite article utilisons évaluation algorithmes stratégie agrégation moyenne saporta indice similarité utilisé termes assadi ayant formule suivante termes respectivement nombre contextes partagés présents uniquement présents uniquement présents contextes déterminés explorant réseau expansion assadi tests avons choix conditionnent arbre résultat influencent déroulement général algorithme complexité système initialisé manière suivante agent ayant aucun parent racine taxonomie résultante agent chacun concepts positionner taxonomie comme parent concepts initiaux terme réseau comme référent cette structure place algorithme déroule parallèle chaque agent jusqu obtenir position équilibre global première version nomie résultante présentée utilisateur suite modifications effectuées lisateur taxonomie auront effet réactiver agents concernés agorithme relancé localement ana2a1 classification distribuée etape ana2a1 classification distribuée etape première étape procédé figure déroule parallèle agents intéressera uniquement ayant frère puisque cherchons obtenir arbre binaire agent envoie alors message indiquant frère dissimilaire reçoit message chacun suite message appelé ensuite lorsque messages exécute deuxième étape figure grâce messages reçus indiquant préférences constituer trois groupes parmi votes frères étant dissimilaire grand nombre frères égalité aequo choisi hasard classification construction ontologies dynamiques ayant permis élection premier groupe agents ayant choisi frère premier groupe comme étant celui dissimilaire restants alors nouvel agent demande agents second groupe agents faire nouveau ana2a1 classification distribuée etape enfin étape figure assez évidente repoussés agents tiennent compte message choisissent comme nouveau hiérarchie constitue ainsi proche proche remarquons algorithme converge nécessairement puisque nombre frères agent diminuant lorsqu agent frère activité stoppée traitement messages algorithme classification rarchique distribué décisions étant prises négociations groupes agents autonomes traitements ainsi connaissances étant locales agents commu nication faisant envoi message algorithme réparti réseau machines évaluation performances approche quantitative présent allons évaluer propriétés notre algorithme distribué convient commencer évaluation quantitative basée complexité comparant algorithme section précédente complexité théorique calculée considérant opération calcul similitude entre éléments comme élémentaire algorithme distribué signifie chaque étape constituer groupe individus conditions données initial éléments algorithmes donnent nombre calculs similitude suivant4 tdist calculs menant équations donnés souci concision ottens aussenac gilles tdist nombre calculs similitudes effectués respectivement algorithme centralisé algorithme distribué ensemble système gorithmes complexité algorithme distribué effectue opérations élémentaires algorithme centralisé cette différence provient localité prises décision agents ainsi calculs similitudes faits chaque paire agents pourrait envisager agent après avoir effectué calcul envoie résultat autre partie toutefois reviendrait simplement déplacer problème générant communications système 20000 40000 60000 80000 100000 120000 140000 160000 180000 nombre termes entrée algorithme distribué moyenne polynôme logarithmique algorithme centralisé résultats expérimentaux complexité moyenne algorithme déterminée expérimentalement système multi agent exécuté données entrée allant termes valeur retenue moyenne nombre comparaisons effectuées centaine exécutions intervention utilisateur donne courbes figure algorithme distribué moyenne efficace algorithme centralisé complexité moyenne réduite explique simplement faible probabilité données pousse système constituer groupes minimaux éléments maximaux éléments chaque étape raisonnement courbe représente polynôme logarithmique minimisant erreur courbe terme degré polynôme n2log notre algorithme distribué moyenne complexité n2log enfin remarque écart réduit entre performances moyenne maximum minimum termes écart moyenne 40550 environ souligne stabilité système classification construction ontologies dynamiques constat qualitatif résultats quantitatifs constatés soient intéressants intérêt approche relève traits qualitatifs présentons cette section avantages obtenus grâce utilisation approche multi agent principal avantage utilisation système multi agent adaptatif tâche classification dynamique introduit système utilisateur inter venir effectuer corrections hiérarchie adapte fonction cette demande particulièrement intéressant contexte effet hiérarchisation fournie système amenée modifiée utilisateur puisqu résultat traite statistique retours nécessaires texte examiner contextes usage termes aussenac gilles condamines ontologue pourra interpréter contenu ainsi réviser proposition système difficile réaliser approche centralisée plupart trouver étape raisonnement engendré résultat erroné modifier classe correspondante manuellement malheureusement toutes étapes raisonnement subséquentes création classe modifiée doivent recalculées tenant compte modification pourquoi système comme asium faure présente utilisateur classes créées chaque étape sonnement essayer gommer problème grâce collaboration système utilisateur hierarchie complète visible processus ainsi utilisateur constater introduction erreur dynamo laisse algorithme dérouler utilisateur opportunité interrompre relancer quand haite dispose instant hiérarchie complète modifier interventions déclencheront algorithme localement jusqu obtenir nouvel stable arbre agents concept après stabilisation autonome système illustrer notre propos présentons exemple simple captures écran système fonctionnement utilisant laissant système travailler obtient arborescence figure après stabilisation5 clair concept représenté terme lésion placé trouve calculs similitudes placent proche femme chirurgien infection gastro entérite hépatite cette mauvaise position lésion explique alors 5dans suite article toutes figures arbres obtenues captures écrans système fonction nement ottens aussenac gilles intervention ontologue système effectue raisonnement uniquement critère statistique arbre agents concept après intervention utilisateur utilisateur intervient alors replacer bonne branche affectant concep tagent comme nouveau système réagit ensuite raffiner arbre classification revenir arbre binaire créant conceptagent nouvel stable alors celui figure couplage système ontologue indispensable création ontologie mettre place aucun ajustement particulier principe algorithme distribué nécessaire chaque agent effectue traitement local autonome algorithme réparti réseau facto envisageable exécuter agents machines différentes communication entre agents envoi messages chacun entre conserve autonomie décision telle modification système permettre tourner plusieurs machines néces siterait aucun ajustement algorithme revanche demanderait revoir couche communication gestion création agents notre implémentation actuelle discussion perspectives limites actuelles modèle comme constaté section gains complexité notre approche plutôt faibles n2log place signifie nombre traitements réduit comparativement algorithme centralisé classique lorsque nombre concepts ontologie devient suffisamment grand toutefois convient remarquer usage système multi agent consomme nécessairement ressources algorithme conceptagent automatiquement donné agent concept directement représenté terme classification construction ontologies dynamiques tralisé effet travail synchronisation effectue grâce envois message système coûteux temps machine implémentation centralisée principal point faible actuel notre algorithme résultat dépendant ordre ajout données lorsque système travaille données fourni initialisation résultat final équivalent obtenu algorithme centralisé revanche ajout nouvel élément après première stabilitisa impact résultat final arbre agents concept après stabilisation autonome système illustrer notre propos présentons autre exemple fonctionnement utilisant laissant système travailler obtient arborescence figure après stabilisation arbre agents concept après prise compte hépatite utilisateur intervient alors ajoute nouveau concept représenté terme patite racine système réagit stabilise obtient résultat organisation présentée figure hépatite situé bonne branche retrouve configuration désirée figure précédent exemple compléter notre algorithme distribué permettre concept déplacer branche travaillons actuellement règles comparaison algorithmes centralisés deviendra alors difficile construction ontologies notre projet finalité proposer algorithme distribué classification rarchique auquel celui présenté arbre binaire suffirait obtenir ottens aussenac gilles taxonomie dynamique signifie système présenté article encore utilisable cette tâche abord général faute voisinage utilisable réseau expansion certains termes extraits syntex traitables utilisant notre rithme classification hiérarchique pourtant seraient intéressants taxonomie nécessaire ajouter capacités agents tenir compte autres critères positionner particulier éléments niveau taxonomie pourraient positionnés examinant aussi relation termes représentent constaté agissait travail effectué utilisateurs syntex structura niveaux taxonomie aussenac gilles permettrait rapprocher exemple infection infection viral notre corpus pourraient rapprochés système actuel leurs contextes utilisation étaient identiques ontologie rarement arbre binaire faudra ajouter critères plémentaires effectuer regroupements ainsi obtenir noeuds aires manière interventions utilisateur poussent système introduire niveaux hiérarchie forcément nécessaires obtient parfois situations gradées noeud simplification explorer obtenir structure raffinée conclusion après avoir présentée comme solution prometteuse assurant qualité dèles richesse terminologique construction ontologies partir analyse avère longue coûteuse requiert supervision analyste prise compte objectif utilisation ontologie utilisation logiciels facilite étude connaissances repérables textes travers utilisation langage cependant giciels produisent volumes informations lexicales grammaticales simple exploiter définir éléments conceptuels notre contribution situe cette étape processus modélisation partir textes avant toute forme normalisation différenciation proposons approche classification hiérarchique distribuée implémentée système multi agent adaptatif suggérer analyste première structure taxonomique organisant concepts notre système exploite entrée réseau terminolo gique résultant analyse syntaxique corpus faite syntex courant loppement permet produire structures simples soumettre analyste faire évoluer fonction corrections apportées performances algorithme distribué comparables celle version centralisée points forts essentielle qualitatifs autorise interactions utilisateur adaptation progressive ajout nouveaux éléments linguistiques décentralisation permet également répartir calculs effectués perspective construire ontologie travail ébauche poursuivi assurer meilleure robustesse classification parvenir structures riches simples arbres parmi enrichissements point difficile certainement étiquetage relations gestion différenciée types relation classification construction ontologies dynamiques références assadi construction ontologies régionales partir textes techniques thèse doctorat université paris aussenac gilles biébow szulman méthode guide pratique modélisation connaissances partir texte aussenac gilles condamines documents électroniques constitution ressources terminologiques ontologiques revue bachimont sciences numérique ingénierie connaissances critique raison computationnelle mémoire habilitation diriger recherches université technologique compiègne bourigault aussenac gilles construction ontologies partir textes 10ème traitement automatique langues naturelles taln2003 faure conception méthode apprentissage symbolique automatique acquisition cadres catégorisation verbes connaissances sémantiques partir textes système asium thèse doctorat université paris orsay georgé picard gleizes glize living design computatio systems international workshops enabling technologies infrastructure collaborative enterprises maedche ontology learning semantic kluwer academic publisher maedche staab mining ontologies ottens aussenac gilles gleizes glize systèmes multi agents extraction ontologies partir textes revue questions agental agents langue journée étude atala relations entre systèmes multi agents traitement automatique langues saporta probabilités analyse données statistique technip séguéla construction modèles connaissances analyse linguistique relations lexicales documents techniques thèse doctorat toulouse summary ontologies building still consuming which justifies growth ontology learning system named dynamo designed along philosophy following original approach based multi agent architecture particular distributed hierarchical clustering algorithm approach evaluated compared conventional centralized algorithm those results discuss limits perspectives modifications required reach complete ontology building solution