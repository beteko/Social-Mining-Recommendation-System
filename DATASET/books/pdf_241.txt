clustering topologique données mohammed ghesmoune mustapha lebbah hanene azzag université paris sorbonne paris clément 93430 villetaneuse france prénom paris13 résumé actuellement clustering données devient moyen efficace partitionner grand ensemble données ticle présentons nouvelle approche topologique appelée stream clustering données évolutives méthode proposée extension algorithme growing neural gérer stream permet découvrir manière incrémentale clusters formes arbitraires faisant seule passe données perfor mances algorithme proposé évaluées données synthé tiques réelles introduction données séquence potentiellement infinie stationnaire distribu probabilité données changer temps données arrivant continu accès aléatoire données possible stockage toutes données arrivant infaisable clustering données nécessite processus capable partitionner observations façon continue restrictions niveau mémoire temps littérature nombreux algorithmes clustering données adaptés partir algorithmes clustering traditionnel exemple méthode dbscan isaksson basée densité méthode partitionnement means ackermann encore méthode basée passage message affinity propagation zhang article proposons modèle stream permet découvrir clusters formes arbitraires données constante évolution caractéristiques principaux avantages stream décrits dessous structure topologique représentée graphe lequel chaque représente cluster nœuds clusters voisins reliés arêtes taille graphe évolutive utilisation fonction oubli réduire impact anciennes données pertinence diminue temps liens entre nœuds également pondérés contrairement nombreux algorithmes utilisent nombre important données initialiser modèle stream utilise seulement nœuds départ toutes fonctions stream effectuées ligne utilisa notion réservoir maintenir façon temporaire données éloignées clustering topologique données prototypes courants article organisé comme abord section décrit sieurs travaux problème clustering données ensuite section présente notre nouvelle approche clustering données appelée stream rapportons évaluation expérimentale enfin section conclut article présente futurs travaux recherche travaux similaires cette section présente concerne problèmes clustering données mettons ainsi évidence algorithmes pertinents propo littérature faire problème plupart algorithmes existants exemple clustream proposé aggarwal denstream streamkm ackermann divisent processus clustering phases ligne cette phase données résumées ligne cette phase clusters finaux calculés partir quantification fournie phase ligne algorithmes clustream denstream utilisent extension temporelle clustering feature vector proposée zhang appelée micro clusters maintenir résumés statistiques données ainsi temps arrivée durant phase ligne créant types micro clusters potentiel outlier micro clusters tream surmonte principaux inconvénients clustream sensibilité bruit phase ligne micro clusters trouvés phase ligne considérés comme pseudo points seront transmis variante means algorithme clustream variante dbscan algorithme denstream déterminer clusters streamkm extension algorithme means données auteurs isaksson proposé sostream algorithme clustering données densité inspiré principe algorithme dbscan celui cartes organisatrices kohonen algorithme stream proposé udommanetanakit classe évolution données catégories apparition disparition évolution fusion division utilise autre struc données sauvegarder statistiques sommaires nommée histogramme zhang présentent extension algorithme affinity propagation données appelé strap utilise réservoir maintenir éventuels outliers auteurs bouguelia proposé version incrémentale algorithme fritzke appelée growing neural données cette section introduisons nouveau modèle appelé stream approche growing neural fritzke adaptant dernier données algorithme approche organisatrice incrémentale appartenant famille cartes topologiques telles cartes organisatrices kohonen neural martinetz schulten suppose données consiste séquence potentiellement infinie données arrivant temps vecteur espace ghesmoune moment stream représenté graphe chaque représente cluster chaque possède prototype seuil distance représentant position étape initialisation uniquement nœuds créés arrivée nouvelle donnée proche deuxième proche identifiés arête proche voisins topologiques déplacés donnée chaque variable calculant erreur cumulée possède aussi autre variable représentant poids varie temps utilisant fonction oubli appliquant procédure gestion arêtes trois nœuds insérés graphe entre nœuds ayant grandes valeurs erreur cumulée nœuds peuvent également supprimés fonction oubli plupart scénarios données données récentes peuvent refléter émergence nouvelles tendances changements tribution données andrade silva fonction oubli constante définissant décroissance poids temps désigne temps courant temps arrivée donnée poids calculé partir poids données affectées poids nombre données affectées temps courant quand poids inférieur valeur donnée alors considéré comme obsolète supprimé ainsi liens gestion arêtes procédure gestion arêtes effectue opérations liées arêtes graphe étapes algorithme incrémentation arêtes instant création arête compte contrairement fonction oubli liens renforcé fonction exponentielle définit croissance temps courant temps création arête étape suivante consiste ajouter nouvelle arête reliant nœuds proches dernière étape consiste supprimer chaque dépassant maximum gestion réservoir objectif utilisation réservoir maintenir temporai rement données éloignées comme avons mentionné précédemment chaque seuil distance premières données affectées nœuds proches prendre considération seuils distances seuil distance chaque prenant distance maximale point éloigné affecté lorsque réservoir plein données transmises apprentissage elles début données traiter premier seuils distance nœuds conséquence évaluation expérimentale cette section présentons évaluation expérimentale algorithme stream avons comparé notre algorithme algorithme ainsi algorithmes pertinents clustering données expériences réali plateforme matlab utilisant données réelles synthétiques bases données réelles shuttle 43500x9 kddcup1 49402x34 prises répertoire bases 9153x2 5458x2 générées programme disponible impca curtin local software synthetic comme avons expliqué section clustering topologique données algorithme stream données résultat ensemble nœuds leurs prototypes initialisation ensemble contenant nœuds donnée traiter faire prochaine donnée traiter trouver proche deuxième proche wbmu1 δbmu1 alors mettre réservoir réservoir plein alors gestion réservoir sinon incrémenter nombre données affectées error error wbmu1 déplacer ainsi voisinage topologique envers wbmu1 wbmu1 wbmu1 chaque voisin incrémenter toutes arêtes sortant pondérer connectés alors remettre sinon créer arête entre marquer temps création supprimer arêtes supérieur agemax nombre données passées multiple paramètre alors chaque création nœuds faire trouver noeud ayant valeur maximale erreur cumulée trouver parmi voisins ayant valeur maximale erreur cumulée ajouter nouveau entre nœuds ajouter arêtes reliant supprimer arête reliant application fonction oubli suppression nœuds obsolètes ainsi nœuds isolés décrémenter erreur nœuds ghesmoune comparaison stream différents algorithmes données stream streamkm clustream shuttle kddcup1 algorithmes stream créent nœuds phase initialisation cette expérimentation avons utilisé version ligne paramètres avons ajoutés montrer intérêt contribution paramètres stream conséquent avons réalisé expériences initialisant nœuds choisissant parmi premières données avons répété avons utilisé initialisation algorithmes stream valeur moyenne écart indiqués tableau résultats montrent gorithme stream dépasse algorithme presque toutes bases données avons utilisé package stream exécuter algorithme clustream comparaison également effectuée streamkm partir tableau constate stream fortes toutes bases données celles streamkm clustream valeurs stream également fortes celles autres algorithmes exception clustream valeurs stream également fortes celles autres algorithmes bases shuttle rappelons stream procède seule phase alors clustream streamkm utilisent phases phase ligne ligne conclusion papier avons proposé stream méthode efficace clustering topologique ligne données évolutives stream nœuds ainsi arêtes composant structure topologique pondérés partir nœuds stream compare données arrivant prototypes courants sauvegarde celles éloignées réservoir apprend seuils distance automatiquement ainsi plusieurs nœuds créés évaluation expérimentale bases données réelles synthétiques démontré efficacité stream découvrir clusters formes arbitraires résultats obtenus prometteurs envisageons avenir appliquer principe fenêtres adaptatives rendre notre algorithme autonome possible développer spark clustering topologique données remerciements travail soutenu réalisé cadre projet square predict investissement avenir références ackermann märtens raupach swierkot lammersen sohler streamkm clustering algorithm streams journal experimental gorithmics aggarwal watson framework clustering evolving streams bouguelia belaïd belaïd adaptive incremental clustering method based growing neural algorithm icpram ester density based clustering evolving stream noise andrade silva faria barros hruschka carvalho stream clustering survey comput fritzke growing neural network learns topologies isaksson dunham hahsler sostream organizing density based clustering stream kohonen schroeder huang organizing secaucus springer verlag martinetz schulten neural network learns topologies artificial neural networks udommanetanakit rakthanmanon waiyamai stream evolution based technique stream clustering zhang ramakrishnan livny birch efficient clustering method large databases sigmod conference zhang furtlehner sebag streaming affinity propagation summary clustering streams becoming efficient cluster large paper present approach called stream topological clustering evolv streams proposed method extension growing neural algorithm specially designed manage streams stream allows discover incremen tally clusters arbitrary shape making performance proposed algorithm evaluated synthetic world classification clustering similarité clustering topologique données mohammed ghesmoune mustapha lebbah hanane azzag