egc2010_12p_fr dviapprentissage génératif structure réseaux logiques markov partir graphe prédicats quang thang matthieu exbrayat christel vrain université orléans léonard vinci 45067 orleans cedex france thang matthieu exbrayat christel vrain orleans orleans université pierre marie curie paris place jussieu 75252 paris cedex résumé réseaux logiques markov combinent apport tistique réseaux markov logique premier ordre cette proche chaque clause logique affectée poids instantiation clauses permettant alors produire réseau markov apprentissage consiste apprendre structure liste clauses logiques autre poids celles proposons méthode appren tissage génératif réseau logique markov cette méthode repose lisation graphe prédicats produit partir ensemble prédicats apprentissage méthode heuristique variabilisation œuvre produire clauses candidates résultats présentés montrent intérêt notre approche regard introduction apprentissage statistique relationnel getoor taskar consiste biner pouvoir descriptif apprentissage relationnel souplesse apprentissage tistique diverses approches proposées cours quinze dernières années programmes logiques stochastiques muggleton prism kameya maccent dehaspe modèles relationnels probabilistes friedman programmes logiques bayésiens kersting raedt seaux relationnels dépendants neville jensen réseaux logiques markov richardson domingos constituent approches récentes domaine reposent combinaison logique premier ordre réseaux markov réseau markov pearl graphe nœuds représentent variables aléatoires arêtes expriment dépendances conditionnelles entre riables chaque clique graphe correspond ainsi ensemble variables conditionnelle dépendantes associe chaque clique poids réseau permet ensuite inférer valeur plusieurs variables réseau logique markov constitué ensemble clauses logiques pondérées clauses constituées atomes lesquels apprentissage génératif partir graphes prédicats peuvent comme prototypes construction réseau markov effet dispose ensemble constantes produire instantiant clauses ensemble atomes constitueront nœuds réseau markov nœuds issus instanciation clause seront cliques ainsi produites seront affectées poids clause elles dérivent apprentissage décomposé phases consistant apprendre respectivement structure clauses logique premier ordre paramètres poids clauses réseau premières stratégies développées limitaient prentissage paramètres structure étant fournie algorithme considérée comme proposée expert apprise étape antérieure telles approches pouvaient conduire résultats optimaux quand structure fournie reflétait pendances essentielles domaine étudié conséquence travaux récents concentrés méthodes apprentissage globales intègrant étapes apprentissage structure poids néanmoins cette intégration reste délicate raison vaste espace recherche induit logique premier ordre approches pratiques proposées principales reposant approche domingos approche bottom mihalkova mooney descente gradient iterated local search généralisation hypergraphes learning hyper graph lifting domingos apprentissage partir motifs learning using structural motifs domingos propositionalisation heuristic generative structure apprentissage partir réseaux bayésiens moralized bayes khosravi point objectifs réseaux logiques markov permettent envisager prentissage génératif apprentissage prédicats domaine apprentissage criminant valeur prédicat article concentrerons apprentis génératif notre principale contribution étant algorithme innovant apprentissage génératif structure algorithme construit abord graphe prédicats mettant évidence liens entre atomes partageant arguments thétisant chemins pouvant exister apprentissage construction clauses candidates ensuite graphe chaque chemin transformé clause biais technique heuristique variabilisation algorithme produit clauses longueur croissante commençant clauses longueur intérêt chaque clause ensuite évalué pertinentes étant ajoutées réseau logique markov final article organisé comme rappelons introduisons quelques définitions section décrivons notre algorithme section expérimentations leurs résultats présentés section concluons section préliminaires rappelons quelques définitions logique première ordre seront utilisées article considérons langage premier ordre fonction composé ensemble symboles prédicats ensemble constantes ensemble variables atome expression prédicat variables constantes littéral atome littéral positif négation atome littéral négatif parlerons littéral lorsqu comporte constantes littéral variables quand contient variables clause disjonction littéraux longueur clause notée correspond nombre littéraux littéraux variables connectés partagent moins constante variable clause connectée quand existe ordonnance littéraux chaque littéral existe variable constante apparaissant monde aussi appelé parfois interprétation herbrand affectation valeur vérité atomes données spécification partielle monde chaque atome implicitement inconnu article utilisons hypothèse monde atome données considéré comme réseau logique markov ensemble formules premier ordre pondérées associé ensemble constantes définit réseau markov pearl chaque correspond atome chaque caractéristique clique correspond instanciation formule poids clique poids formule produite probabilité observer monde nombre instanciations vraies formule poids associé cette formule constante normalisation ensemble atomes souhaite inférer valeur ensemble atomes valeur connue vraisemblance conditionnelle sachant pseudo vraisemblance monde donnée atome valeur vérité couverture markov rappelons couverture markov atome constituée voisins atome réseau présentent dépendance conditionnelle directe celui cadre génératif cherche ensemble formules pondérées optimisant pseudo vraisemblance technique optimisation courante nomme pereira repose méthode quasi newton calcul fortement influencé présence clauses contenant grand nombre variables présentant grand nombre instanciations couramment remplacée mesure dérivée introduite domingos pseudo vraisemblance pondérée définie ensemble prédicats nombre atomes valeur vérité atome valeur dépend utilisateur expériences avons choisi valeur domingos apprentissage génératif structure reposant graphe prédicats cette section présentons notre approche apprentissage structures partir données donné entrée éventuellement apprentissage génératif partir graphes prédicats définissons abord notion graphe prédicats décrivons ensuite comment utilisons apprendre structure graphe prédicats considérons ensemble prédicats données composée littéraux construits prédicats définition atome modèle prédicat expression type1 typen typei indique argument définition entre atomes modèles liste ordonnée couples positions types arguments position identiques décrit entre prédicats dénoté ensemble liens possibles entre leurs atomes modèles quand atomes modèles partagent argument existe entre définition formule satisfaisant forme visid vjsjd autres variables toutes distinctes naturellement définitions formule satisfaisant peuvent pliquées négation exemple entre négation seuls arguments compte exemple considérons langage composé prédicats advisedby professor respectivement comme atomes modèles advisedby person person professor person argument person apparaît position professor person positions advisedby person person liens possibles entre encore formule satisfaisant dernier professor advisedby avons advisedby advisedby notons plusieurs liens considérés exemple advisedby advisedby conduit formule composée littéraux identiques similaire mesure conduisent formules identiques renommage variables aussi laire professor professor professor professor définition graphe orienté données paire ordon composé ensemble nœuds ensemble arêtes chaque correspond prédicat négation exemple graphe prédicats algorithme maxlength créer graphe prédicats ajouter toutes clauses unitaires apprendre poids longueur maxlength creerclausescandidates algorithm ajouterclausescandidatesmlnelaguer retourner existe entre prédicats alors existe arête entre nœuds laquelle associées étiquettes label contenant exemple cardinalité donnant nombre instantiations vraies formule binaire satisfaisant chaque associé poids défini weight nombre arêtes incidentes cardinalité arête coefficient ajustement exemple figure donne graphe prédicats langage donné exemple avons professor advisedby supposons avons instantiations vraies formule correspondante données trouvons alors arête entre professor advisedby label cardinalité inver sement avons advisedby professor quand poids advisedby advisedby weight nombres instantiations formule correspondant liens autres liens instantiations structure algorithme etant données données consistante éventuellement nombre entier maxlength spécifiant longueur maximale clauses présentons maintenant algorithme appelé generative structure learning based graph predicates permettant apprendre générativement structure apprentissage génératif partir graphes prédicats approches développées domingos huynh mooney explorent manière intensive espace clauses produisant beaucoup clauses inutiles alors celles développées mihalkova mooney domingos recherchent chemins données nécessitant temps calcul important préférons engendrer clauses potentielle intéressantes fondant observations abord semble inutile considérer clauses connectées instances données ensuite formule connectée autant utile couvre grand nombre atomes données autrement clauses intéressantes surtout celles assez fréquentes termes nombre instantiations retrouve ainsi notion traditionnelle couverture évident formule connectée fréquente formules connectées moins aussi fréquentes remarques blables utilisés beaucoup stratégies connues exploration proposons ainsi produire clauses candidates commençant clauses binaires formées atomes connectés clauses atomes peuvent alors formées partir clauses binaires celles atomes ainsi suite problème résoudre alors celui recherche ensemble clauses binaires connectées partir desquelles étendre progressivement ensemble clauses candidates notre algorithme génération clauses repose graphe prédicats chaque prédicat créons nœuds correspondant prédicat négation graphe contient seulement nœuds nombre prédicats langage nombre nœuds incidents dépend nombre arguments prédicat correspondant nombre relations entre types arguments prédicats reste général raison nable calculons seulement cardinalité liens réduisant ainsi calcul nombre instantiations formules binaires recherche chemins graphe alors efficace recherche chemins ensemble atomes particulièrement quand grand nombre prédicats quand beaucoup arguments partagés atomes données notons cependant chaque chemin connaissons seulement prédicats apparaissent clause informations variables doivent unifiées beaucoup clauses variables différentes peuvent construites utilisons technique heuristique expliquée section variabiliser chemin obtenir unique clause chaque étape ayant ensemble candidats longueur notre algorithme ajoute chaque clause courant apprend poids correspondant pseudo vraissemblance alors calculée poids cette clause grand seuil weight amélioration cette mesure candidat deviendra appris courant parce ajout clause influencer poids clauses ajoutées précé dentes toutes clauses candidates considérées tentons élaguer clauses clause poids inférieur seuil minweight enlevée retrait permet augmenter pseudo vraisemblance poids associé formule clause reflète importance cette formule poids élevé grande différence probabilité entre monde satisfait formule monde satisfaisant toutes choses ailleurs étant égales concernant clauses unitaires contenant prédicat poids algorithme creerclausescandidates initialisation foreach clause chercherchemindansgraphe foreach chemin ariabiliser evaluer weight minweight return schématiquement capture distribution marginale prédicats alors clauses longues modélisent dépendances prédicats raison laquelle utile ajouter abord toutes clauses unitaires première étape notre algorithme appelons premier réseau unitaire présentons structure algorithme section suivante décrivons détail façon générer ensemble clauses candidates chaque étape notre algorithme créer clauses candidates comme mentionné dessus utilisons graphe prédicats construire variabiliser produire clauses comme beaucoup systèmes cherchons ensemble clauses candidates couverture important considérons seulement arêtes cardinalité grande minimum weight weight rappelons poids proportionnel moyenne cardinalités arêtes incidentes coefficient apparaissant poids utilisé comme paramètre ajustement telles arêtes ensuite variabilisées clauses connectées binaires construire clauses longues étendons chaque chemin correspondant clause candidate arête incidente moins ensemble conduisant ainsi chemin vérifiant propriété précédente processus répété toutes arêtes clause évaluée apprenant poids composé unitaire cette clause calculant mesure associée mesure grande celle unitaire poids clause grand seuil minweight consi cette clause comme clause candidate algorithme donne différentes étapes construire clauses candidates considérons maintenant processus variabilisation généralement variabilise clause remplaçant constantes variables notre disposons chemin graphe prédicats liste arêtes contenant seules infor mations prédicats positions arguments partagés envisageable construire toutes clauses satisfaisant chemin raisons temps calcul produit clauses temps évaluer apprendre final apprentissage génératif partir graphes prédicats variabilisons heuristiquement chemin produire unique clause connectée réduire nombre variables distinctes clause traitons prédicats ordre fréquence décroissante chemin chaque prédicat effectuons variabilisation abord variables partagées ensuite variables partagées argument prédicat variabilisé nouvelle variable position apparaît label chemin impliquant prédicat exemple chemin advisedby advisedby advisedby student conduit clause advisedby advisedby student convention entre student advisedby appliqué premier advisedby partir chemin correspondant clause cherchons chemin variabilisons créer clause clause ignorée expérimentations bases avons utilisé trois données disponibles ligne décrit films comporte atomes construits partir prédicats constantes décrit département académique comporte atomes construits partir prédicats constantes grande trois bases décrit collection citations publications informatique bâtie prédicats constantes comporte 70367 atomes différence bases précédents partie atomes fournissent atomes vrais systèmes méthodologie comparons méthodes learning using structural motifs domingos repose observa données relationnelle contient schémas variations mêmes motifs structurels mécanisme parcours aléatoire utilisé identifier objets fortement connectés regrouper relations associées motif recherche clauses ensuite motifs ainsi créés apprendre final ajoute toutes clauses apprend leurs poids optimaux supprime celles poids inférieur seuil donné heuristic generative structure learning approche bottom exemples fournis bâtit ensemble tables booléennes donnant synthétique atomes connectés chaque colonne telle table correspond littéral variable chaque ligne indique semble connections observées entre littéraux partir atome donné partir tables littéraux dépendants identifiés grâce algorithme shrink markov networks bromberg regroupés former clauses candidates meilleures clauses candidates intégrées alchemy washington bases valeurs présentées corres pondent moyenne ensemble prédicats trois algorithmes implémentés dessus librairie alchemy développée équipe domingos notons existence troisième algorithme récent nommé khosravi permettant apprentissage structure cadre génératif cependant principes jacents algorithme permettent place validation croisée envisageons étudier ultérieurement adaptations possibles permettraient œuvre chaque données découpé parties effectuer validation croisée chaque algorithme chaque données avons mesuré chaque prédicat vraisemblance conditionnelle courbe précision rappel mesures constituant standard utilisé plupart publications domaine mesure directement qualité probabilités produites prédicat donné correspond moyenne valeurs observées atomes correspondant montre capacité algorithme inférer positifs données calculer prédicat donné varier seuil duquel atome considéré différents couples précision rappel observés valeur atomes cibles inférée algorithme domingos enfin avons utilisé fourni davis goadrich calculer paramètres utilisés respectivement domingos nombre maximal littéraux clause algorithmes limiter espace recherche coefficient ajustement limitant ainsi nombre nœuds graphe exploré limitons nombre prédicats semblables chaque clause conserver temps calcul raisonnables apprentissage poids conduits machine disposant processeur mémoire résultats avons effectué validation croisée apprenant quatre parties inférant chaque littéral atome suivant signe littéral cinquième partie probabilité processus itéré changeant partie utilisée partir valeurs avons calculer chaque prédicat précision rappel avons ensuite moyenné informations seulement différentes parties aussi ensemble prédicats chaque cette pratique étant norme publications domaine apprentissage génératif partir graphes prédicats tableau présente ainsi temps exécution apprentissage férence trois algorithmes noter concernant résultats diffèrent légèrement domingos ayons utilisé mêmes mètres explique trois raisons abord concernant auteurs quelques prédicats égalité tandis avons gardé ensuite avons autorisé clauses comportant jusqu prédicats enfin comme plaçons cadre génératif poids formules appris seule optimisation globale réseau alors domingos réapprennent poids chaque prédicat optimiser réseau manière discriminante pouvons observer trois données surpasse termes vérifie seulement valeurs moyennes présen cette table aussi valeurs moyennes prédicat chaque fragment rapide particulièrement concentre effet seules bonnes arêtes correspondant connexions fréquentes seulement clause chaque chemin espace recherche moins vaste celui revanche dernier repose synthétique chaque données appelée hyper graphe généralisé lifted hypergraph hyper graphes généralisés calculés seule apprentissage utilisés ensuite pendant étape validation croisée trouve considérablement accélérée tableau détaille valeurs moyennes chaque prédicat algorithmes constater comporte mieux plupart prédicats revanche produit résultats remarquables prédicats comme samecourse sameperson sameproject notons dicats particuliers atomes vrais seulement leurs arguments identiques processus évaluation occasion mettre avant divers points lesquels envisageons pencher avenir valeur coefficient ajustement impact clair calculé petit considère arêtes clauses généré général grand présente meilleur score global néanmoins accroissement taille inférence coûteuse voire infaisable algorithmes dispo nibles équilibre entre performance globale termes temps calcul constituera point intéressant étudier structure apprise globalement satisfaisante inférences résulte nettement meilleurs certains prédicats autres compréhension cette variabilité réduction constituent perspective intéressante retrouve fréquement clauses candidates diffèrent seulement variabili sation exemple différent seulement position traitement approprié telles configurations devrait permettre réduire temps exécution conclusion avons présenté algorithme apprentissage structure réseau logique markov cadre génératif algorithme graphe prédicats predicates advisedby courselevel hasposition inphase professor projectmember publication samecourse sameperson sameproject student tempadvisedby yearsinprogram taughtby moyenne résultats prédicat utilise technique heuristique variabilisation produire clauses candidates expériences menées tendent montrer supériorité rapport elles également permis identifier plusieurs directions recherches ultérieures envisageons maintenant appliquer domaines grands riches notamment domaines comportant prédicats exploiter avantages notre approche étudions également possiblités comparer autres algorithmes récents références ferilli esposito structure learning markov logic networks through iterated local search press bromberg margaritis honavar efficient markov network structure disco using independence tests artif davis goadrich relationship between precision recall curves dehaspe maximum entropy modeling clausal constraints springer verlag exbrayat vrain generative structure learning markov logic networks stairs press friedman getoor koller pfeffer learning probabilistic relational models getoor taskar introduction statistical relational learning press apprentissage génératif partir graphes prédicats huynh mooney discriminative structure parameter learning markov logic networks kersting raedt bayesian logic programs technical report khosravi schulte structure learning markov logic networks descriptive attributes domingos learning structure markov logic networks domingos learning markov logic network structure hypergraph lifting domingos learning markov logic networks using structural motifs omnipress mihalkova mooney bottom learning markov logic network structure muggleton stochastic logic programs press advances inductive logic programming neville jensen dependency networks relational computer society pearl probabilistic reasoning intelligent systems networks plausible rence morgan kaufmann publishers domingos sound efficient inference probabilistic determi nistic dependencies press richardson domingos markov logic networks learn kameya prism language symbolic statistical modeling pereira shallow parsing conditional random fields naacl association computational linguistics summary markov logic networks combine markov networks first order logic attaching weights first order formulas viewing templates features markov works learning decomposed structure weights learning paper present algorithm learn generatively structure markov logic networks algorithm graph predicates which built predicates training database heuristical variabilization technique order produce candidate clauses according first experiments approach appears promising