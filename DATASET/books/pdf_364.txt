 Symétries et Extraction de Motifs Ensemblistes Said Jabbour Mehdi Khiari Lakhdar Sais Yakoub Salhi Karim Tabia CRIL UMR CNRS 8188 Université d’Artois F 62300 Lens {jabbour sais salhi tabia} cril univ artois fr cril univ artois fr Zero To One Technology Campus Effiscience F 14460 Colombelles mehdi khiari zto technology com zto technology com Résumé Les symétries sont des propriétés structurelles qu’on détecte dans un grand nombre de bases de données Dans cet article nous étudions l’exploita tion des symétries pour élaguer l’espace de recherche dans les problèmes d’ex traction de motifs ensemblistes Notre approche est basée sur une intégration dynamique des symétries dans les algorithmes de type Apriori permettant de ré duire l’espace des motifs candidats En effet pour un motif donné les symétries nous permettent de déduire les motifs qui lui sont symétriques et vérifiant par conséquent les mêmes propriétés Nous détaillons notre approche en utilisant l’exemple des motifs fréquents Ensuite nous la généralisons au cadre unifica teur de Mannila et Toivonen pour l’extraction des motifs ensemblistes Les ex périences menées montrent la faisabilité et l’apport de notre approche d’élagage basé sur les symétries 1 Introduction Le but de cet article est d’introduire un cadre d’élagage basé sur les symétries pour la fouille de données Dans d’autres domaines tels que la programmation par contraintes et la satisfaisabilité propositionnelle les symétries sont souvent exploitées pour élaguer l’espace de recherche et améliorer les performances des solveurs Notre but est de montrer l’apport d’un élagage à base de symétries dans un cadre de fouille de données Dans cet article nous nous intéressons au cas de l’extraction de motifs ensemblistes et nous prenons comme exemple d’application l’algorithme APRIORI Agrawal et Srikant 1994 Les symétries sont un concept fondamental en informatique mathématiques physiques et plein d’autres domaines Elles existent dans divers problèmes réels Les symétries sont com munément exploitées dans la résolution de problèmes combinatoires tels que les problèmes d’ordonnancement Par exemple dans un problème d’ordonnancement où certaines machines peuvent être interchangeables partant d’un ordonnancement valide on peut en obtenir un autre valide en permutant ces machines Exploiter les symétries permet de réduire le coût de la re cherche de solution en évitant d’explorer des branches symétriques de l’espace de recherche Beaucoup de travaux ont ainsi porté sur les symétries dans les problèmes de satisfaction de contraintes CSP e g Puget 1993 Gent et Smith 2000 satisfaisabilité propositionnelle 407 Symétries et extraction de motifs ensemblistes e g Benhamou et Saïs 1994 Crawford et al 1996 et recherche opérationnelle e g Mar got 2003 Liberti 2012 En fouille de données les symétries sont principalement étudiées en fouille de graphes e g Desrosiers et al 2007 Vanetik 2010 Récemment Jabbour et al 2012 a proposé un nouveau cadre pour casser les symétries dans les problèmes de fouille de données Dans Jab bour et al 2012 les symétries représentent des permutations entre les items laissant invariant le jeu de données L’exploitation des symétries dans ce cadre s’effectue en pré traitement per mettant de supprimer des items du jeu de données initial Cette approche est différente de celle utilisée dans les problèmes CSP et SAT où les symétries sont éliminées en ajoutant au réseau de contraintes des contraintes supplémentaires appelées prédicats d’élimination de symétries Jabbour et al 2012 mentionne aussi que les symétries peuvent être intégrées dans les algorithmes de type APRIORI pour l’élagage de l’espace de recherche Dans cet article nous explorons en profondeur cette piste Notre motivation vient du fait que l’élagage basé sur les symétries peut être généralisé à d’autres tâches de fouille de données ce qui n’est pas le cas pour l’approche présentée dans Jabbour et al 2012 Notre approche nous permet aussi d’exploiter efficacement les symétries présentes au sein d’une même transaction ce qui n’était pas le cas avec l’approche de Jabbour et al 2012 Nous avons choisi l’algorithme APRIORI algorithme pionnier de l’extraction de motifs fréquents et de règles d’association comme exemple pour montrer la faisabilité de notre ap proche d’élagage à base de symétries Les expérimentations menées montrent la faisabilité et l’efficacité de notre approche À la limite de nos connaissances notre approche est la première approche opérationnelle permettant l’exploitation des symétries dans les problèmes d’extrac tion de motifs ensemblistes 2 Définitions 2 1 Extraction de motifs Soit I un ensemble d’items et T un ensemble d’identifiants de transactions Un ensemble I ⊆ I est appelé itemset ou motif Une transaction est un couple tid I où tid est un identi fiant de transaction tid ∈ T et I est un itemset I ∈ I Une base de données transaction nelle D est un ensemble fini de transactions ayant chacune un identifiant unique Nous notons Tid D = {tid| tid I ∈ D} l’ensemble des identifiants des transactions de D Iitems O dénote l’ensemble de tous les items appartenant à l’objet syntaxique O e g base de données transactionnelle motif etc On dit que la transaction tid I supporte un motif J si J ⊆ I La couverture d’un motif I dans D est l’ensemble des transactions de D supportant I Cover I D = {tid | tid J ∈ D et I ⊆ J} Le support d’un motif I dans D est défini par Supp I D =|Cover I D | Enfin la fréquence de I dans D est définie par Freq I D = Supp I D |D| Exemple 1 Soit le jeu de données transactionnel D cf Table 1 où I = {A B C D E F} On a Supp {B D} D = |{002 007}|=2 et Freq {B D} D = 29 Dans la suite nous notons par λ un seuil de support minimal avec 0 ≤ λ ≤ |D| L’en semble des motifs fréquents dans D est défini comme suit FIM D λ = {I ⊆ I | Supp I D ≥ λ} 408 S Jabbour et al tid itemset 001 A B E F 002 A B C D 003 C D E F 004 A C 005 A E 006 C E 007 B D 008 B F 009 D F TAB 1 Exemple de jeu de données transactionnelles 2 2 Symétries et extraction de motifs fréquents Intuitivement une symétrie dans D est une permutation d’items laissant D invariant Une telle permutation d’items induit une permutation sur les transactions Le jeu de données de meurant tout de même inchangé les propriétés d’un motif sont alors préservées par la symé trie L’ensemble des symétries forme un groupe de symétries dont l’élément neutre est toute permutation associant un item à lui même Dans ce qui suit nous utilisons des notations de la théorie des groupes Commençons par définir formellement les symétries dans le cadre de l’extraction de motifs fréquents Définition 1 Permutation Une permutation p d’un ensemble fini S est une bijection de S vers S Chaque permutation p peut être représentée par un ensemble de cycles c1 cn où chaque cycle ci = a1 ak est une liste d’éléments de S tel que p aj = aj+1 pour j = 1 k− 1 et p ak = a1 Dans la suite pour des raisons de clarté nous omettons les cycles de la forme a a Nous notons par P Iitems D resp P Tid D l’ensemble de toutes les permutations dans Iitems D resp dans Tid D Nous notons par P Tid D Iitems D l’ensemble des permutations {σ ◦ f | σ ∈ Iitems D et f ∈ Tid D } P Tid D Iitems D ◦ est un groupe dont l’élément neutre est la permutation identité Une structure S′ ◦ est un sous groupe du groupe P Tid D Iitems D ◦ si et seule ment si S′ ◦ est un groupe et S′ ⊆ P Tid D Iitems D Une permutation σ ◦ f est appliquée à une jeu de données D comme suit σ ◦ f D = { f tid σ I | tid I ∈ D} où σ I = {σ a |a ∈ I} Définition 2 Symétrie Une symétrie de D est une permutation σ ◦ f dans P Tid D Iitems D tel que σ ∈ P Iitems D f ∈ P Tid D et σ ◦ f D = D Exemple 2 Considérons le jeu de donnéesD de la Table 1 Soit σ = A C B D une permu tation dans Iitems D et f = 001 003 005 006 008 009 une permutation dans Tid D La permutation σ ◦ f est une symétrie de D 409 Symétries et extraction de motifs ensemblistes Soit S D l’ensemble de toutes les symétries de D Il est à noter que S D ◦ est un sous groupe de P Tid D Iitems D ◦ Comme l’ensemble des transactions est invariant par symétrie toutes les propriétés d’un motif telles que la fréquence la fermeture et la maximalité sont préservées La proposition suivante montre que la symétrie préserve la fréquence d’un motif Proposition 1 Soit D un jeu de données transactionnelles σ ◦ f une symétrie dans D λ un seuil de support minimal et I un motif I ∈ FIM D λ ssi σ I ∈ FIM D λ Preuve 1 σ ◦ f étant une symétrie le support de I est égal à celui de σ I Par conséquent I ∈ FIM f D λ ssi σ I ∈ FIM D λ 2 3 Détection de symétries dans les bases de données transactionnelles Un moyen commun pour détecter les symétries est d’encoder les données sous forme de graphe et de rechercher les automorphismes de graphe La plupart des outils de détection de symétries se basent principalement sur les automorphismes d’un graphe coloré Les couleurs des sommets sont utilisées pour contraindre le lien avec des sommets de la même couleur i e deux sommets de la même couleur peuvent être permutés La première implémentation pour calculer les automorphismes de graphes appelée nauty est proposée dans McKay 1981 D’autres implémentations améliorées utilisant des heuristiques d’élagage provenant du domaine de la théorie des groupes sont présentées dans Aloul et al 2003 Junttila et Kaski 2007 Ainsi pour détecter les symétries dans un jeu de données transactionnel D il suffit d’en coder D sous forme de graphe coloré G de telle sorte que les symétries dans D correspondent aux automorphismes de G Définition 3 Un graphe coloré est un triplet G = V E η où V est l’ensemble de ses som mets E ∈ V × V l’ensemble de ses arêtes et η est une fonction de V dans N qui associe un entier positif une couleur à chaque sommet Définition 4 Une permutation σ de V est un automorphisme de G ssi σ G = G ou d’une manière équivalente σ E = E Nous montrons maintenant comment un jeu de données transactionnelles peut être encodé sous forme de graphe coloré non orienté Définition 5 De D à G Nous définissons le graphe coloré non orienté G associé à D par G D = V E η où V = I ∪ Tid D E = { tid i |∃ tid I ∈ D i ∈ I} et ∀v ∈ V η v = { 0 si v ∈ Iitems D 1 si v ∈ Tid D La figure 1 décrit la conversion deD cf Table 1 en un graphe coloré G D Dans cette figure les items sont représentés par des cercles couleur 1 alors que les identifiants des transactions sont représentés par de rectangles couleur 2 410 S Jabbour et al 002 009 F 005 006 B 004 001 003 D 007 CE 008 A FIG 1 Graphe G D Grâce à cette transformation les symétries dans D correspondent aux automorphismes dans G D Étant donné un graphe G D et une partition initiale π on peut trouver en utilisant NAUTY McKay 1981 les automorphismes laissant G D invariant Par exemple A = A C B D 001 003 005 006 008 009 est un automorphisme de G D La symétrie correspondante est σ ◦ f où σ = A C B D et f = 001 003 005 006 008 009 3 Élagage à base de symétries Dans cette section nous montrons comment les symétries peuvent être exploitées afin d’élaguer l’espace de recherche dans le problème d’extraction de motifs fréquents Nous uti lisons l’exemple de l’algorithme APRIORI Agrawal et Srikant 1994 cf Algorithme 1 Cet algorithme se base sur la propriété d’anti monotonie si un motif est fréquent alors toutes ses généralisations le sont aussi Il procède par une recherche par niveau des motifs fréquents En effet il commence par extraire l’ensemble F1 des motifs fréquents de taille 1 ligne 1 Puis il calcule itérativement les ensembles de F2 fréquents de taille 2 jusqu’à Fn tel que Fn+1 = ∅ lignes 2 8 Nous décrivons dans ce qui suit comment nous avons intégré notre approche d’élagage à base de symétries dans l’algorithme APRIORI Notre approche contribue essentiellement à réduire l’ensemble des motifs candidats tout comme la propriété d’anti monotonie Notre approche est décrite dans l’algorithme 2 411 Symétries et extraction de motifs ensemblistes Algorithme 1 APRIORI Données D jeu de données λ seuil de support minimal Sortie l’ensemble de tous les motifs fréquents dans D F1 ← {motifs fréquents de taille 1} 1 pour k = 2 Fk−1 6= ∅ k ++ faire2 Fk ← ∅ 3 Ck ← CandidatesGen Fk−1 4 pour c ∈ Ck faire5 supp c ← CalculSupp c D 6 si supp c ≥ λ alors7 Fk ← Fk ∪ {c} 8 retourner ⋃ k Fk 9 Algorithme 2 APRIORISym Données D jeu de données λ seuil de support minimal S symétries dans D Sortie l’ensemble de tous les motifs fréquents dans D F1 ← {motifs fréquents de taille 1} 1 pour k = 2 Fk−1 6= ∅ k ++ faire2 Fk ← ∅ 3 Ck ← CandidatesGen Fk−1 4 pour c ∈ Ck faire5 supp c ← CalculSupp c D 6 Sc ← SymmGen c S 7 si supp c ≥ λ alors8 Fk ← Fk ∪ {c} ∪ Sc 9 Ck = Ck \ Sc 10 retourner ⋃ k Fk 11 Description de l’algorithme Similairement à APRIORI l’entrée de APRIORISym est com posée de un jeu de données transactionnellesD un seuil de support minimal λ et un argument supplémentaire l’ensemble S des symétries dans D Il retourne l’ensemble de tous les motifs fréquents dans D Lignes 1 4 Cette partie est similaire à APRIORI Néanmoins l’ensemble des symétries S est utilisé pour améliorer le calcul des itemsets fréquents ligne 1 Par exemple si {a} est fréquent resp non fréquent alors pour tout σ ◦ f ∈ S le motif {σ a } est aussi un motif fréquent resp non fréquent Lignes 5 10 Dans cette boucle nous commençons par calculer le support d’un candidat c ligne 6 et l’ensemble Sc des candidats symétriques à c ligne 7 Si c est fréquent ligne 8 alors tous les éléments de Sc le sont aussi ligne 9 Ensuite les éléments de Sc sont retirés de l’ensemble des candidats ligne 10 Proposition 2 L’algorithme APRIORISym est correct Preuve 2 C’est une conséquence immédiate du fait qu’APRIORI est un algorithme correct et de la Proposition 1 412 S Jabbour et al Par exemple soit D une base de données transactionnelles telle que Iitems D = {A B C D} et σ ◦ f est une symétrie telle que σ = A D B C Nous supposons que les motifs {A} {B} {C} et {D} sont fréquents Nous supposons aussi que dans la ligne 8 nous obtenons que {A B} est non fréquent En utilisant la propriété d’anti monotonie nous obtenons que les motifs {A B C} {A B D} et {A B C D} sont non fréquents De plus en utilisant σ nous obtenons {C D} = σ {A B} Ainsi par anti monotonie {A C D} et {B C D} son aussi non fréquents Cet exemple est illustré par la Figure 2 où les nœuds décrits par des cercles représentent les motifs élagués grâce à notre approche d’élagage à base de symétries ABCD ABC ABD ACD CD BCD AB AC AD BC BD A B C D { } FIG 2 Élagage à base de symétries 4 Étude expérimentale 4 1 Contexte expérimental Nous présentons dans cette section quelques résultats expérimentaux montrant la faisabilité et l’apport de notre approche Nous présentons dans ce qui suit des expérimentations menées sur des jeux de données du répertoire de l’UCI 1 et le jeu de données réel BMS WebView 2 Zheng et al 2001 Ce je de données contient des données sur les flux de clics enregistrés sur des sites de e commerce La Table 2 fournit pour chaque jeu de données son nombre de transactions trans nombre d’items distincts items et sa densité la densité étant définie par le rapport entre la taille moyenne des transactions et items Pour détecter les symétries dans les jeux de données nous utilisons Saucy 2 Dans la plupart des cas Saucy permet de détecter les symetries dans les jeux de données en moins d’une seconde La Table 3 récapitule les temps d’extraction des symétries dans les jeux de données utilisés dans notre expérimentation 1 ics uci edu ~mlearn MLRepository html 2 Saucy2 Fast symmetry discovery vlsicad eecs umich edu BK SAUCY 413 Symétries et extraction de motifs ensemblistes bdd trans items densité Zoo 101 43 39% Mushroom 8 142 117 18% Australian 690 55 25% Solar flare 323 40 32% BMS WebView 2 77 512 3 341 0 14% Letter rec 20 000 74 23% TAB 2 Description des jeux de données utilisés bdd sym temps s Zoo 2 0 02 Mushroom 10 0 94 Australian 2 0 06 Solar flare 2 0 05 BMS WebView 2 10 4 31 Letter rec 0 2 12 TAB 3 Temps d’extraction des symétries Les symétries sont présentes dans les jeux de données indépendamment de toute tâche d’extraction de motifs ainsi notre approche d’élagage basée sur les symétries procède en deux étapes Nous commençons par extraire les symétries en utilisant Saucy Ensuite l’entrée de notre algorithme APRIORISym sera composée de l’entrée standard de l’algorithme APRIORI i e jeu de données et un seuil de fréquence minimale à laquelle on ajoute l’ensemble des symétries extraites Afin de quantifier le gain obtenu par APRIORISym nous introduisons les deux mesures suivantes – MTA = tempsexec APRIORI −tempsexec APRIORISym tempsexec APRIORI permet de quantifier le gain obtenu en terme de temps d’exécution Notons que cette mesure ne prend pas en considération le temps nécessaire pour extraire les symétries étant donné que cette opération n’est effectuée qu’une et une seule fois pour chaque jeu de données considéré – MSR = bdd scans APRIORI − bdd scans APRIORISym bdd scans APRIORI permet de quantifier le gain obtenu en terme de réduction du nombre d’opérations de calcul de fréquences et par conséquent du nombre de scans de la base de données 4 2 Résultats expérimentaux Nous avons choisi de montrer l’apport de l’exploitation des symétries pour l’élagage de l’espace de recherche via l’algorithme historique d’extraction de motifs fréquents APRIORI cf Algorithme 1 Nous nous focalisons principalement sur l’apport des symétries en terme de réduction du nombre d’accès à la base de données ainsi qu’en terme d’accélération du processus d’extraction Notons que dans les jeux de données réels nous détectons peu de symétries cf Table 3 En effet dans ces jeux on a tendance à détecter beaucoup plus de symétries locales symétries dans une portion de D que globales symétries dans tout D Les expérimentations menées dans cette section montrent que même avec très peu de symétries détectées nous arrivons à obtenir un élagage significatif La Table 4 montre l’efficacité de l’exploitation des symétries pour améliorer l’élagage dans l’algorithme APRIORI même avec très peu de symétries détectées Nous notons par freqSym resp infreqSym le nombre de motifs fréquents resp non fréquents déduits par symétries Par exemple pour le jeu de données Australian ne contenant que 2 symétries et un seuil de fréquence minimale minfr = 1% nous observons ce qui suit en utilisant APRIORI 480 000 opérations de calcul de fréquence sont effectuées Alors qu’en utilisant APRIORISym les propriétés fréquent non fréquent d’environ 115 000 motifs freqSym+ infreqSym sont déduites par symétries cf Table 4 Dans ce même cas APRIORISym est 23% plus rapide que APRIORI 414 S Jabbour et al Jeu de données minfrSym Pruning db scansMSR freq freqSym infreqSymMT A Australian 1% −− 479 402 24% 426 763 −− −− 23%X 364 822 100 961 13 613 5% −− 28 535 22% 20 386 −− −− 22%X 22 288 4 461 1 886 Solar Flare 1% −− 147 270 9% 145 893 −− −− 8%X 133 056 14 128 1 291 15% −− 5 684 8% 5 495 −− −− 9%X 5 203 448 33 Mushroom 5% −− 3 764 532 0 4% 3 755 511 −− −− 6%X 3 748 084 16 384 8 957 Zoo 5% −− 587 782 20% 486 099 −− −− 15%X 487 224 100 480 78 15% −− 103 318 23% 102 440 −− −− 17%X 79 492 23 776 50 BMS 1% −− 4 908 0% 81 −− −− 0% WebView 2 X 4 908 0 0 Letter 5% −− 32 680 0% 15 719 −− −− 0% recognition X 32 680 0 0 TAB 4 Résultats expérimentaux Un autre résultat important est que l’algorithme APRIORIsym garde les mêmes perfor mances qu’APRIORI lorsqu’il s’agit de jeux de données ne contenant pas de symétries cf Table 4 Ainsi notre approche d’élagage basée sur les symétries peut être généralisée à d’autres algorithmes d’extraction de motifs leur permettant de tirer profit d’une éventuelle présence de symétries dans les jeux de données Nous montrons dans la section 5 la faisabilité de cette généralisation Notons que le jeu de données BMS WebView 2 contient 10 symétries Nous n’observons pourtant aucune influence de ces symétries sur l’élagage de l’espace de recherche En effet l’efficacité de l’élagage par symétrie n’est pas proportionnelle au nombre de symétries détec tées si les symétries détectées n’apparaissent que dans très peu de transactions comme c’est le cas pour BMS WebView 2 tous les motifs les impliquant sent non fréquents et sont alors efficacement élagués par APRIORI 4 3 Discussion Les résultats expérimentaux montrent que notre approche d’élagage à base de symétries intégrée à l’algorithme APRIORI permet d’améliorer considérablement les performances de ce dernier Pour un jeu de données ne contenant pas de symétries APRIORIsym a les même performances que APRIORI Ceci est expliqué par le fait que les symétries sont extraites une et une seule fois pour un jeu de données donné Le gain en terme de temps d’exécution et ainsi toujours supérieur ou égal à zéro MTA APRIORI Sym APRIORI ≥ 0 Les symétries sont ainsi une propriété importante dans les données qui devrait être consi dérée dans le but d’améliorer les performances des algorithmes d’extraction de motifs actuels sur certaines familles de jeux de données 415 Symétries et extraction de motifs ensemblistes 5 Généralisation de l’utilisation des symétries Dans cette section nous proposons une généralisation de notre approche à d’autres pro blèmes d’extraction de motifs Nous nous plaçons dans le cadre unificateur de Mannila et Toi vonen 1997 SoitD une base de données transactionnelle L un langage décrivant les données un ensemble de motifs et q un prédicat d’intérêt permettant d’évaluer si un élément de L est une information intéressante Dans ce contexte nous considérons qu’une tâche d’extraction de motifs consiste à calculer l’ensemble suivant T H D L q = {a ∈ L | q D a est vraie} Par exemple le problème d’énumération de motifs fréquents peut être décrit en définissant L comme étant l’ensemble de tous les sous ensembles non vides de l’ensemble d’items de D et q le prédicat imposant que chaque sous ensemble ait un support supérieur à un seuil donné Un prédicat d’intérêt q est dit stable par symétrie si étant donnée une base de données transactionnelle D pour toute symétrie σ q D a est vérifié ssi q D σ a l’est aussi Ainsi pour tout prédicat d’intérêt stable par symétrie les symétries peuvent être exploitées pour élaguer l’espace de recherche En effet si un élément a du langage est jugé intéressant resp non intéressant alors σ a est aussi intéressant resp non intéressant pour toute sy métrie σ Ainsi notre approche peut être intégrée dans différents problèmes d’extraction de motifs où les prédicats d’intérêts sont stables par symétrie Pour illustrer cette généralisation considérons le problème d’énumération de motifs fer més On rappelle qu’un motif I de D est fermé si et seulement si pour tout motif J tel que I ⊂ J Supp I D > Supp J D est vérifiée Soit I un motif fermé dans D et σ une sy métrie D Comme σ est une symétrie Supp σ I D = Supp I D est vérifiée Nous prou vons aussi que σ I est aussi un motif fermé de D Soit I ′ un motif tel que σ I ⊂ I ′ et Supp σ I D ≤ Supp I ′ D On aura I ⊂ σ−1 I ′ et Supp I D ≤ Supp σ−1 I ′ D On obtient une contradiction on en déduit que σ I est fermé Ainsi notre approche d’élagage basé sur les symétries peut aussi être appliquée pour l’extraction des motifs fermés 6 Symétries en fouille de données état de l’art En fouille de données les symétries sont une propriété structurelle qui peut être exploi tée pour élaguer l’espace de recherche ou réduire la taille de la sortie Les symétries peuvent aussi dans certaines applications être vues comme étant une connaissance pertinente à ex traire Elles permettent par exemple aux analystes de données de mieux comprendre certaines corrélations entre les items Beaucoup d’intérêt a été accordé à l’exploitation des symétries dans le domaine de l’intelligence artificielle notamment pour les problèmes SAT Benhamou et Saïs 1994 Crawford et al 1996 et CSP Puget 1993 En fouille de données les symétries sont principalement étudiées dans le cadre de la fouille de graphes Vanetik 2010 Desrosiers et al 2007 Dans Desrosiers et al 2007 les auteurs exploitent les symétries de sous graphes pour élaguer l’espace de recherche lors de la génération de sous graphes candidats Les symétries au sens automorphismes sont utilisées dans Vanetik 2010 en tant que mesure d’intérêt Dans Garrido 2011 les auteurs proposent une approche pour détecter les symétries dans les réseaux sociaux Les symétries sont présentes aussi dans le clustering de données Par exemple Murtagh et Contreras 2010 traite le cas de clustering hiérarchique dans de grandes masses de données 416 S Jabbour et al pour détecter des symétries et d’autres motifs intéressants Les symétries sont considérées dans ce cas comme une structure révélant des propriétés intrinsèques et invariantes dans les données Nous constatons enfin que peu de travaux se sont intéressés aux symétries dans le cadre de l’extraction de motifs ensemblistes Nous mentionnons tout de même deux travaux traitant un cas particulier de symétries Minato 2006 Medina et al 2005 En effet les symétries traitées dans ces papiers sont dites symétries de paires Elles permettent d’échanger à chaque fois un couple d’items en laissant les autres items inchangés Minato 2006 propose un algorithme ZBDD efficace permettant la détection des symétries de paires et discute les propriétés des items symétriques Néanmoins ce travail reste restreint à des cas très particuliers de symétries Les paires d’items symétriques appelés items clones par Medina et Nourine dans Gély et al 2005 sont utilisées pour expliquer pourquoi dans certains cas le nombre de règles d’une couverture minimale d’une relation est exponentiel en nombre d’items 7 Conclusion et travaux futurs Nous avons proposé dans cet article une approche d’élagage à base de symétries pour les problèmes d’extraction de motifs ensemblistes Les symétries sont des propriétés structurelles qu’on détecte dans un grand nombre de bases de données Elles ont déjà montré leur inté rêt dans divers problèmes de satisfaction d’optimisation et d’énumération Dans cet article nous avons montré comment une telle propriété peut être exploitée dans la phase d’élagage de l’algorithme pionnier d’extraction de motifs fréquents APRIORI permettant de réduire consi dérablement le nombre d’accès à la base et de calcul de fréquences Nous avons montré expéri mentalement que dans certains cas les calculs de fréquences sont réduits d’environ 24% grâce à l’exploitation des symétries L’un des points forts de cette approche réside dans le fait que la détection des symétries ne s’effectue qu’une et une seule fois pour chaque jeu de données et est indépendante de toute tâche d’extraction de motifs Nous avons montré aussi que notre approche peut être généralisée à d’autres tâches d’extraction de motifs tant que le prédicat de sélection en question est stable par symétrie Dans nos futurs travaux nous envisageons d’étendre notre approche d’élagage à base de symétries à la fouille de séquences D’autres problèmes de fouille de données tel que le cluste ring pourrait aussi tirer profit de la présence des symétries dans les données Nous souhaitons aussi trouver un moyen d’exploiter les symétries locales dans les données symétries dans une portion des données uniquement Références Agrawal R et R Srikant 1994 Fast algorithms for mining association rules in large data bases In Proceedings of VLDB’94 pp 487–499 Aloul F A A Ramani I L Markov et K A Sakallah 2003 Solving difficult instances of boolean satisfiability in the presence of symmetry Transactions on Computer Aided Design Benhamou B et L Saïs 1994 Tractability through symmetries in propositional calculus Journal of Automated Reasoning 12 1 89–102 417 Symétries et extraction de motifs ensemblistes Crawford J M L Ginsberg E Luck et A Roy 1996 Symmetry breaking predicates for search problems In KR’96 pp 148–159 Desrosiers C P Galinier P Hansen et A Hertz 2007 Improving frequent subgraph mining in the presence of symmetry In Proceedings of MLG’2007 Garrido A 2011 Symmetry in complex networks Symmetry 3 1 1–15 Gély A R Medina L Nourine et Y Renaud 2005 Uncovering and reducing hidden com binatorics in guigues duquenne bases In ICFCA’05 pp 235–248 Gent I P et B Smith 2000 Symmetry breaking in constraint programming In Proceedings of the Thirteenth European Conference on Artificial Intelligence ECAI’00 pp 599–603 Jabbour S L Sais Y Salhi et K Tabia 2012 Symmetries in itemset mining In 20th European Conference on Artificial Intelligence ECAI’2012 pp 432–437 Junttila T A et P Kaski 2007 Engineering an efficient canonical labeling tool for large and sparse graphs In ALENEX Liberti L 2012 Reformulations in mathematical programming automatic symmetry detec tion and exploitation Math Program 131 1 2 273–304 Mannila H et H Toivonen 1997 Levelwise search and borders of theories in knowledge discovery Data Min Knowl Discov 1 3 241–258 Margot F 2003 Exploiting orbits in symmetric ilp Math Program 98 1 3 3–21 McKay B D 1981 Practical graph isomorphism Congressus Numerantium 30 47–87 Medina R C Noyer et O Raynaud 2005 Efficient algorithms for clone items detection In CLA’05 pp 70–81 Minato S i 2006 Symmetric item set mining based on zero suppressed bdds In DS’06 pp 321–326 Murtagh F et P Contreras 2010 Hierarchical clustering for finding symmetries and other patterns in massive high dimensional datasets CoRR abs 1005 2638 Puget J F 1993 On the satisfiability of symmetrical constrained satisfaction problems In ISMIS pp 350–361 Vanetik N 2010 Mining graphs with constraints on symmetry and diameter In International Workshops on Web Age Information Management WAIM 2010 pp 1–12 Zheng Z R Kohavi et L Mason 2001 Real world performance of association rule algo rithms In Proceedings of KDD ’01 pp 401–406 ACM Summary In this paper we show how symmetries a fundamental structural property can be used to prune the search space in itemset mining problems Our approach is based on a dynamic integration of symmetries in APRIORI like algorithms to prune the set of possible candidate patterns More precisely for a given itemset symmetry can be applied to deduce other itemsets while preserving their properties We also show that our symmetry based pruning approach can be extended to the general Mannila and Toivonen pattern mining framework Experimental results highlight the usefulness and the efficiency of our symmetry based pruning approach 418 