fouille données systèmes améliorer recherche ressources florent masseglia pascal poncelet maguelonne teisseire inria sophia antipolis project 06802 sophia antipolis france florent masseglia sophia inria lgi2p eerie scientifique georges besse 30035 nîmes cedex france pascal poncelet lirmm 34392 montpellier cedex france teisseire lirmm résumé quantité sources information disponible internet systèmes échanges genre nouveau architecture offre large communauté applications partager fichiers dialoguer communiquer temps article proposons nouvelle approche améliorer localisation ressource structuré utilisant nouvelle heuristique proposons extraire motifs apparaissent grand nombre noeuds cette connaissance utile proposer utilisateurs fichiers souvent demandés requête téléchargement éviter grande consommation bande passante introduction quantité sources information disponible internet systèmes échanges genre nouveau architecture offre large communauté appli cations partager fichiers partager calculs dialoguer communiquer temps miller applications fournissent également bonne infrastructure opérations grandes masses données nombreux calculs comme fouille données cadre considérons velle approche améliorer localisation ressources environnement structuré selon aspects principaux extraire comportements fréquents ordre séquences entre actions réalisées nœuds requête télécharge compte améliorer résultats résultats calculs distribués maintenus centralisé réduire nombre communications entre pairs connectés connaître ordre séquences actions réalisées pairs offre connaissance importante exemple examinant actions réalisées pouvons savoir nœuds lesquels requête concernant mandriva linux fichier driva linux limited edition choisi téléchargé cette requête analyse usages systèmes suivie demande images mandriva linux limited edition grande quantité résultats retournés image mandriva linux limited edition choisie téléchargée problèmes principaux systèmes structurés comme gnutella requêtes envoyées grand nombre nœuds broadcast entraînant ainsi consommation excessive bande passante proposer avance utilisateur fichiers souvent associés requête téléchargement permet éviter consommation excessive bande passante mesure connaît avance ressources extraire suffit alors enrichir résultat première requête informations complémentaires fichiers majoritairement téléchargés autres utilisateurs rechercher règles association motifs séquentiels système aussi distri systèmes tâche facile effet nature systèmes dynamiques nœuds agissent indépendamment autres connaissances acquises alors forcément représentatives exemple quand disparaît séquences disparaissent également distribuée connaissance traite reconsidérée approches extraction motifs séquentiels traditionnelles srikant considèrent disponible intégra utilisable contexte aussi dynamique notre proposition situe cadre prend considération aspect dynamique systèmes pairs pairs structurés suite article section présente problématique recherche motifs séquentiels données distribuée section proposons velle approche basée heuristique expérimentations menées décrites section section conclut article problématique cette section étendons problématique intitiale recherche motifs quentiels srikant environnement structuré ensemble littéraux distincts appelés items considérons suite chaque connaissons action réalisée requête téléchargement action téléchargement requête séquence liste ordonnée itemsets notée itemset exemple considérons actions réalisées inter prète manière suivante abord téléchargé moment transaction finalement temps système structuré cette répartie différents nœuds notons partition temps correspond séquences actions réalisées temps nœuds disponibles temps problème recherche motifs séquentiels environnement distribué consiste rechercher séquences fréquentes fonction valeur support minimal minsupp séquences nombre occurrences supérieur minsupp masseglia nouvelle heuristique extraire motifs séquen tiels systèmes structurés aperçu heuristique distributedsp nœuds système peuvent connecter disparaître alors cours analyse notre proposition considère capable recevoir séquences candidates évaluer support retourner résultat parcours distribué nœuds profit algorithmes stochastiques abord jusqu envoie séquence architecture structuré proposons spécial appelé suite distributedsp connecté nouveaux pairs arrivent réseau instruction distributedsp rithme permet distributedsp courant arrivée notre méthode utilise alors distribution séquences candidates comme illustrée figure distributedsp réalise instructions heuristique distributedsp getvaluation broadcast abord ensemble items fréquents extrait pairs connectés ensemble candidats taille généré candidats évalués pairs connectés connaître nombre occurrences suffisant toute résultats récupérés distributedsp fonction getvaluation heuristique basée opérateurs génétiques alors pliquée nouvel ensemble candidats envoyé pairs connectés évaluation processus répété existe nœuds connectés distributedsp débute lorsqu connecte recvut ensemble motifs fréquent alors initialisé séquence nœuds disponibles considérons motifs envoyés distributedsp fonction aluation terminer séquence fréquente score correspond moyenne donnée nœuds candidats score grand valeur support candidat devient fréquent stocké conservons également quences candidates fréquentes appelées séquences approximatives stockées analyse usages systèmes algorithme algorithme distributedsp séquences fréquentes nœuds connectés paramètre mindist correspondant distance minimale candidat considéré result motifs fréquents correspondant comportements fréquents while nœuds connectés nodesavailable candidates aluation nodesavailable candidates score minsupp insert score mindist insert candidates neighborhoodoperators broadcast nodesavailable candidates taille rapport taille totale séquences candidates vérifie contrainte distance spécifiée utilisateur mindist séquences seront utilisées phases génération candidats grâce séquences fréquentes approximatives opérateurs voisinage nouveaux candidats générés envoyés broadcast nœuds connectés manque place décrivons opérateurs voisinage utilisés lecteur intéressé reporter masseglia utilisons autre contexte opérateurs génétiques similaires opérations principales réalisées algorithme premièrement nouveau essaye connecter connect message indiquant adresse distributedsp retourné deuxièmement lorsqu message distributedsp score représentant distance entre candidat opérations locales effectuées calculé candidat inclus score positionné candidate comme notre approche heuristique récompensons fortement candidats complètement inclus séquence outre comme recherchons comportements longs récompensons longues séquences réalisé algorithme longest common subsequence cormen experimentations évaluer notre approche différentes expériences menées réelles fichier données pumsb repository fichier access accesslog premières expériences réalisées analyser convergence résultats ainsi coûts communication premier algorithme traditionnel recherche motifs abord appliqué globale chaque population candidat propo notre approche alors comparée résultat manière déterminer qualité mesurons chaque population candidat longue séquence masseglia algorithme algorithme séquence candidate évaluer partition temps result lscore ensemble scores locaux attribués chaque séquence connect distributedsp distributedsp lscore lscore donner favoriser longues séquences lscore distributedsp lscore commune entre séquences candidates résultat partition différents nœuds notre approche appliquée résultats expérience décrits figure remarquons pumsb première génération qualité population candidate supérieure seconde avons données partir génération qualité résultat proche devons attendre génération avoir résultats montrent notre approche rapidement obtenir longues séquences fréquentes réalisant opérations broadcast qualité résultats populations proposées évaluer comportement notre approche lorsque nœuds apparaissent dispa raissent avons considéré données principale suivante voulons analyser comportement notre approche lorsque séquence origine pumsb remplacés séquences destination accesslog expériences consistent estimer qualité résultats rapport algorithme traditionnel toute modifiée simuler comportement réaliste système avons procédé remplacements intervalle chaque génération résultats montré lorsque pumsb était remplacé rythme génération qualité analyse usages systèmes résultats processus remplacement conclusion article proposons nouvelle approche améliorer localisation ressources systèmes structurés cette approche inspirée algorithmes génétiques retrouver efficacement séquences fréquentes nœuds réseau expériences réalisées montré cette approche efficace retrouver comportements fréquents fréquents déterminés générations quelque longueur également prendre compte évolutions réseau modifi cation forte comportement nœuds références cormen leiserson rivest stein introduction algorithms press masseglia teisseire poncelet client server engine architecture usage mining knowledge information systems miller discovering sybex sripanidkulchai zhang measurement based optimi zation techniques bandwitdth demanding systems proceedings international conference infocom wallach druschel enforcing sharing sources proceedings international workshop systems iptps berkeley california pinto dayal prefixspan mining sequential patterns efficiently prefix projected pattern growth proceedings international conference engineering heidelberg repository workshop frequent itemset mining implementations helsinski fimi04 srikant mining sequential patterns proceedings international conference engineering tapei taiwan summary number information sources available internet systems offer novel system architecture providing large scale community applications sharing distributed systems distributed computing messaging communication paper propose approach improving resource searching unstructured system using genetic inspired algorithm propose extract patterns occurring large number nodes knowledge useful proposing often downloaded requested files according majority behaviors useful order avoid extra bandwidth consumption