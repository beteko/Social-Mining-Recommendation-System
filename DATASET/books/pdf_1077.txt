 Techniques de fouille de données pour la réécriture de requêtes en présence de contraintes de valeurs Hélène Jaudoin Frédéric Flouvat Laboratoire LIMOS UMR CNRS 6158 Université Blaise Pascal Clermont Ferrand II 63 177 Aubière cedex France {hjaudoin flouvat} isima fr Résumé Dans cet article nous montrons comment les techniques de fouilles de données peuvent résoudre efficacement le problème de la réécriture de requêtes en termes de vues en présence de contraintes de valeurs A partir d’une forma lisation du problème de la réécriture dans le cadre de la logique de description ALN Ov nous montrons comment ce problème se rattache à un cadre de dé couverte de connaissances dans les bases de données L’exploitation de ce cadre nous permet de bénéficier de solutions algorithmiques existantes pour la réso lution du problème de réécriture Nous proposons une implémentation de cette approche puis nous l’expérimentons Les premiers résultats démontrent l’intérêt d’une telle approche en termes de capacité à traiter un grand nombre de sources de données 1 Introduction Aujourd’hui les techniques d’analyse et d’intégration de données sont devenues des atouts majeurs pour les entreprises et les services gouvernementaux En effet ces techniques per mettent un gain de temps pour regrouper et croiser l’information distribuée Dans le domaine du développement durable ces techniques sont notamment indispensables afin de rassembler et d’analyser les pratiques agricoles et ainsi garantir la traçabilité des pratiques Plus précisément nos travaux se situent dans le cadre d’un projet 1 visant à mettre en place un système d’intégra tion pour interroger les sources de données agricoles distribuées Le système doit être flexible pour permettre l’arrivée de nouvelles sources de données afin de suivre le processus d’infor matisation du domaine agricole En effet entre 2000 et 2003 le nombre d’exploitations ayant un accès à Internet a triplé 2 Il doit de plus permettre de traiter un grand nombre de sources de données car le domaine est susceptible d’accueillir en plus des services déconcentrés des ministères un grand nombre d’exploitations Dans cet article nous nous plaçons dans le cadre d’un système de médiation suivant une approche Local As View LAV où les vues sont décrites via des requêtes sur le schéma glo bal Cette approche est connue pour être flexible car l’ajout et la suppression de sources de 1Ce projet est réalisé en collaboration avec le Cemagref cemagref fr 2 acta informatique fr 77 RNTI E 6 Fouille de données pour la réécriture de requêtes données n’affectent pas le schéma global Nous nous intéressons plus particulièrement au pro blème de la réécriture de requêtes en termes de vues en présence de contraintes de valeurs Les contraintes de valeurs correspondent à la notion de type énuméré en base de données Elles permettent de spécifier les valeurs autorisées pour un attribut donné Les contraintes de valeurs sont utiles dans beaucoup d’applications comme par exemple pour la vérification des contraintes d’intégrité ou pour exprimer une forme d’information incomplète Borgida et Patel Schneider 1994 De plus ce type de contraintes connaît actuellement un regain d’inté rêt impulsé notamment par les travaux liés au web sémantique En effet les types énumérés font partie intégrante du langage d’ontologie OWL 3 un standard émergeant du web séman tique 4 L’utilisation des contraintes de valeurs est motivée par notre cadre applicatif En effet de nombreuses vues ont souvent la même description et se distinguent uniquement par les va leurs autorisées pour certains de leurs attributs De plus les contraintes de valeurs interviennent naturellement dans l’expression de requêtes typiques du domaine d’application Une version préliminaire de notre travail concernant le problème de réécriture en termes de vues dans le cadre du langage FL0 Ov a été publié à BDA’2004 Jaudoin et al 2004 L’article présenté ici étend ces résultats dans les directions suivantes – Nous considérons ici le problème de la réécriture en termes de vues dans le cadre du lan gage ALN Ov En plus des constructeurs de quantification universelle et de conjonc tion du langage FL0 le langage ALN permet une forme de négation et des contraintes de cardinalité Le langage ALN Ov augmente le langage ALN avec le constructeur Ov qui permet d’exprimer les contraintes de valeurs L’investigation théorique du pro blème de réécriture est plus complexe dans le cadre du langageALN Ov du fait notam ment des intéractions des contraintes de valeurs avec les contraintes de cardinalité ainsi que de la nécessité de tenir compte de l’inconsistance La résolution de ce problème nécessite une nouvelle caractérisation de la subsomption dans ALN Ov adaptée au problème de réécriture ainsi qu’une caractérisation des nouvelles formes de réécritures qui apparaissent dans ALN Ov c f lemme 1 – Nous étudions ensuite les problèmes algorithmiques engendrés par les nouveaux cas de réécritures dansALN Ov Nous présentons un nouveau prédicat nommé P2 issu de la formalisation du problème du calcul de ces nouveaux cas de réécriture dans le cadre de Mannila et Toivonen 1997 Ce prédicat P2 en conjonction avec le prédicat P1 présenté dans Jaudoin et al 2004 et rappelé ici permet de résoudre le problème de réécriture – Enfin nous décrivons succintement une implémentation de notre approche de réécriture qui exploite et adapte un algorithme de fouille de données existant Apriori Nous pré sentons ensuite les résultats de nos expérimentations qui viennent conforter l’intérêt des techniques de fouilles de données dans notre cadre Les premiers résultats montrent la capacité de notre prototype à passer à l’échelle en supportant le traitement d’un grand nombre de vues jusqu’à 15000 Notons que dans la littérature peu d’articles présentent les résultats expérimentaux de leurs approches de réécriture Ils se concentrent généra lement sur les résultats théoriques A notre connaissance Pottinger et Halevy 2001 est une des rares références qui décrit l’évaluation des performances d’un algorithme de réécriture Aussi la réalisation d’un prototype et son expérimentation constituent à notre avis une contribution dans le domaine de la réécriture 3 w3 org 2004 OWL 4OWL est actuellement une recommandation du W3C w3 org 78 RNTI E 6 H Jaudoin et F Flouvat La suite de l’article est organisée comme suit Dans la section 2 nous donnons les prérequis né cessaires à la formalisation du problème de la réécriture de requêtes en présence de contraintes de valeur dans le cadre des logiques de description La section 3 reformule ce problème dans un cadre de découverte de connaissances dans les bases de données La section 4 présente l’implémentation et les expérimentations réalisées En section 5 une conclusion et des pers pectives sont données Les démonstrations des lemmes et théorèmes de cet article sont donnés dans Jaudoin et al 2005 2 Réécriture de requêtes en présence de contraintes 2 1 Prérequis sur les logiques de description Les logiques de description sont un formalisme de représentation des connaissances qui permet de représenter des structures complexes et de raisonner avec elles Baader et al 2003 Elles permettent de décrire un domaine d’application à l’aide de concepts prédicats unaires et de rôles prédicats binaires Une logique de description est définie par un ensemble de constructeurs Dans cet article nous nous intéressons à la logique ALN Ov dont les constructeurs sont listés dans la table 1 colonne 1 où C est un ensemble de noms de concepts N un ensemble de noms de valeurs RC un ensemble de noms de rôles dont l’image est un concept de C etRV un ensemble de noms de rôles qui prennent leurs valeurs dans N Constructeurs Sémantique >C δC >V δV > ∆I = δC ∪ δV ⊥ ∅ P PI ¬A ∆I\AI C uD CI∩DI ∀Rc C {x ∈ δC | ∀y x y ∈ Rc I → y ∈ CI} ∀Rv {o1 on} {x ∈ δC | ∀y x y ∈ Rv I → y ∈ {oI 1 oI n } ⊆ δV } ≤ nR {x ∈ δC | ∣ ∣{y | x y ∈ RI} ∣ ∣ ≤ n} ≥ nR {x ∈ δC | ∣ ∣{y | x y ∈ RI} ∣ ∣ ≥ n} avec A ∈ C n un entier positif oi ∈ N R ∈ RC ∪RV Rc ∈ RC et Rv ∈ RV TAB 1 – Syntaxe et sémantique de la logique ALN Ov Exemple 1 Exemples de concepts pouvant être formés à l’aide des constructeurs de ALN Ov – ParcelleCulturale u ∀aRecuE ¬EffluentElevage u ≥ 1 aRecuE spécifie les parcelles culturales qui ont reçu au moins un épandage qui n’était pas un effluent d’éle vage – ∀numDepartement {63 43 03} u ∀aRecu ≤ 3 typeProduit spécifie les indivi dus qui sont dans un des départements 63 ou 43 ou 03 et qui ont reçu moins de 3 types de produit Les contraintes de valeurs ont permis ici de restreindre l’image du rôle numDepartement 79 RNTI E 6 Fouille de données pour la réécriture de requêtes La sémantique des concepts est donnée par une interprétation I = ∆I I où ∆I est un ensemble non vide appelé domaine d’interprétation et I est une fonction d’interpréta tion Nous supposons que le domaine d’interprétation ∆I est partionné en deux ensembles disjoints δC décrivant l’ensemble des individus du domaine et δV décrivant l’ensemble des valeurs Un concept est interprété comme étant un sous ensemble de ∆I Un rôle est interprété comme un sous ensemble de δC ×∆I L’interprétation I associe chaque valeur oi ∈ N à un élément oIi de δV tel que oi 6= oj implique que o I i 6= o I j Plus précisément la sémantique des constructeurs de ALN Ov est donnée dans la colonne 2 de la table 1 Une interprétation est un modèle pour un concept C ssi CI 6= ∅ Un concept est inconsistant ssi CI 6= ∅ pour toute interprétation I Etant donnée cette sémantique il est possible de définir la notion de subsomption et d’équi valence comme suit Un concept C est subsumé par un concept D noté C v D ssi CI ⊆ DI ∀I Un concept C est équivalent à un concept D noté C ≡ D ssi CI = DI ∀I Les descriptions intentionnelles d’un domaine d’application sont définies à l’aide d’une terminologie Une terminologie est un ensemble fini d’axiomes terminologiques de la forme i A v D Spécification primitive de concept ou ii A ≡ D Définition de concept où A est un nom de concept et D un concept dans ALN Ov Dans cet article nous supposons que les terminologies sont acycliques i e aucun concept ne fait référence à lui même directement ou indirectement dans sa définition ou dans sa spécification La sémantique des terminologies est obtenue en étendant la notion d’interprétation aux axiomes terminologiques comme suit Une interprétation I est un modèle pour une terminologie T ssi I est un modèle pour chaque axiome de T Pour traiter le problème de la réécriture dans la logique ALN Ov nous nous appuyons sur la forme normale donnée dans Jaudoin et al 2005 La forme normale d’un concept per met d’exprimer un concept sous une forme canonique Cette forme normale transforme tout concept C en concept > ou en une conjonction d’atomes de la forme ∀w P avec w un mot défini sur l’ensemble des rôles de RC ∪ RV 5 et P est soit un concept atomique A ou une restriction de cardinalité ≤ nR ou ≥ nR ou un ensemble de valeurs E Par la suite on note ∀w P ∈ C si ∀w P apparaît dans la description du concept C 2 2 Réécriture dans ALN Ov Dans cette section nous définissons le cadre de médiation et le problème de la réécriture dans le cadre des logiques de description Puis nous donnons les caractéristiques des réécri tures dans ce contexte Le schéma global S est une terminologie formée de définitions de concepts dans ALN Ov Une requête Q est un concept dans ALN Ov Q est décrite en termes des concepts de S De plus Q est supposée être dans sa forme normale V est une ter minologie formée de spécifications primitives dans ALN Ov Les spécifications primitives de V permettent de décrire les vues Les vues sont décrites en termes de S et sont supposées être données dans leur forme normale Dans ce contexte on cherche à répondre à une requête Q en ayant uniquement connais sance des vues de V Une technique pour répondre à Q est de reformuler Q en une expression qui utilise uniquement les vues de V L’expression obtenue est appelée réécriture On s’in 5Soit r1 et r2 deux rôles ∀r1 r2 A dénote le concept ∀r1 ∀r2 A Dans ce cas r1 r2 est un mot où r1 appartient àRC uniquement et r2 appartient àRC ∪RV 80 RNTI E 6 H Jaudoin et F Flouvat téresse ici aux réécritures maximales de Q i e les réécritures qui permettent de calculer le maximum de réponses à une requête donnée La définition de réécriture maximale est donnée ci dessous Définition 2 Réécriture maximale Soient V une terminologie de vues et Q un concept dans ALN Ov Q′ est une réécriture maximale de Q en termes de V ssi 1 Q′ est un concept dans le langage {u t} qui réfère uniquement les noms des vues de V 2 Q′ v Q 3 il n’existe pas de concept Q1 dans {u t} qui réfère uniquement les noms des vues de V tel que Q′ v Q1 v Q et Q′ 6≡ Q1 Par la suite on appelle réécriture conjonctive maximale de Q toute réécriture de Q dans le langage {u} Comme montré dans Jaudoin et al 2005 une requête Q donnée a une unique réécriture maximale formée de l’union de ses réécritures conjonctives maximales L’ensemble des réécritures conjonctives maximales de Q dans le contexte de la logique ALN Ov est fini Aussi pour calculer les réponses d’une requête Q on cherche à calculer les réécritures conjonctives maximales de Q Pour calculer les réécritures conjonctives maximales d’une requête donnée Q on suit une approche classique de réécriture basée sur l’algorithme des paniers Levy et al 1996 Informellement cette approche fonctionne de la manière suivante Etant donné une requête Q ≡ ∀w1 P1 u u ∀wn Pn la principale idée est de considérer chaque atome ∀wi Pi de Q isolément A chaque atome ∀wi Pi de la requête est associé un panier ensemble qui contient toutes les réécritures conjonctives maximales de cet atome Ensuite dans une deuxième étape les réécritures candidates de Q sont calculées en effectuant le produit cartésien entre les pa niers Ceci permet d’obtenir un sur ensemble de toutes les réécritures conjonctives maximales de Q Pour obtenir effectivement les réécritures conjonctives maximales les réécritures incon sistantes et non maximales doivent ensuite être supprimées de ce sur ensemble Les travaux présentés dans Jaudoin et al 2005 montrent en s’appuyant sur une carac térisation de la subsomption dans ALN Ov que dans le cadre de médiation défini précé demment les réécritures conjonctives maximales d’un atome donné sont formées de sous ensembles minimaux 6 de V qui vérifient les conditions énoncées dans le lemme qui suit Lemme 1 Soit Q ≡ ∀w P Soient l la cardinalité du plus grand des ensembles de valeurs qui apparaît dans les vues ou la requête et p la profondeur maximale7 des atomes apparaissant dans les requêtes et les vues Si Q′ ≡ Vi1 u u Vik où {Vi1 Vik} est un sous ensemble minimal de V tel que Q′ est subsumée par ∀w P alors une des conditions suivantes est véri fiée a k = 1 a 1 P ∈ {A ¬A} et ∀w P ∈ Vi1 ou a 2 P = ≥ nR et ∀w ≥ pR ∈ Vi1 avec p ≥ n ou a 3 P = ≤ nR et ∀w ≤ pR ∈ Vi1 avec p ≤ n b 1 ≤ k ≤ l + 1 6au sens de l’inclusion ensembliste 7la profondeur d’un atome ∀w P est égal à la longueur du mot w i e le nombre de rôles dans w 81 RNTI E 6 Fouille de données pour la réécriture de requêtes b 1 P = E et {Vi1 Vik} est tel que pour j ∈ {1 k} ∀w Eij ∈ Vij et ∩ikj=i1Ej ⊆ E b 2 P = ≤ n Rv avec Rv ∈ Rv {Vi1 Vik} est tel que pour j ∈ {1 k} ∀w Eij ∈ Vij et | ∩ ik j=i1 Ej | ≤ n c 1 ≤ k ≤ l + p et il existe un préfixe w′v de w tel que ∀w′ ≤ 0v ∈ uikj=i1Vj Ce lemme donne les conditions nécessaires pour qu’un sous ensemble de vues de V forme une réécriture conjonctive maximale de Q ≡ ∀w P i e pour qu’une conjonction de vues appartiennent au panier B w P de l’atome ∀w P Ainsi une réécriture d’un panier peut être formée d’une seule vue cas a du lemme ou d’au plus l + 1 cas b du lemme ou d’au plus l + p cas c du lemme Un examen plus attentif du lemme montre que lors de la construction des paniers on calcule des cas classiques de réécriture dans le langage ALN cas a et c du lemme et des cas de réécritures spécifiques à la présence des contraintes de valeurs cas b 1 et b 2 8 Aussi dans la suite de l’article nous nous concentrons sur les problèmes du calcul des réécritures engendrées par les contraintes de valeurs car ces problèmes posent de nouvelles difficultés en termes de réécriture de requêtes Soit une requête Q ≡ ∀w P où P est un ensemble de valeurs E ou une restriction de car dinalité ≤ n Rv Considérons maintenant le problème de la création du panier B w P Nous nous intéressons aux problèmes du calcul des réécritures des cas b 1 et b 2 du lemme 1 Pour définir plus précisément ces problèmes nous introduisons l’ensemble Vw = {V1 Vp} qui désigne le sous ensemble de vues de V telles que ∀i ∈ {1 p} ∃Ei | ∀w Ei ∈ Vi Le problème E_conj_rewrite E w correspond au calcul des réécritures de type b 1 Il est défini comme suit Problème 1 Soit Q ≡ ∀w E et une terminologie V dansALN Ov Soit Vw ⊆ V Le problème E_conj_rewrite E w consiste à calculer les plus petites conjonctions de vues de Vw subsumées par ∀w E Le problème N_conj_rewrite n wR correspond au calcul des réécritures de type b 2 Il est defini comme suit Problème 2 Soit Q ≡ ∀w ≤ n R et une terminologie V dansALN Ov Soit VwR ⊆ V Le problème N_conj_rewrite n wR consiste à calculer les plus petites conjonctions de vues de VwR subsumées par ∀w ≤ n R L’exemple suivant illustre les solutions des problèmes présentés ci dessus Exemple 3 Soit une requête Q telle que Q ≡ ∀numDepartement E u ∀aRecu ≤ 3 typeProduit avec E = {63 43 03} Supposons qu’il existe 4 vues Vi i ∈ {1 4} telles que Vi v ∀numDepartement Ei où E1 = {23 15 18 80 43 03} E2 = {03 63} E3 = {01 07 11 43 63} E4 = {26 63} et 3 vues Vi i ∈ {5 6 7} telles que Vi v ∀aRecu typeProduit Ei pour i ∈ {5 6 7} où E5 = {P1 P10 P15 P20 P27} E6 = {P1 P10 P15 P20 P26} E7 = {P1 P10 P15 P26 P27} 8Notons cependant que les réécritures du cas b 2 du lemme intéragissent avec les cas classiques de réécritures dansALN Ces réécritures sont nécessaires pour obtenir effectivement les réécritures du cas c du lemme 82 RNTI E 6 H Jaudoin et F Flouvat Ici on a VnumDepartement = {V1 V2 V3 V4} On calcule les solutions de E_conj_rewrite E numDepartement à partir de VnumDepartement On obtient les conjonc tions suivantes V2 V1 u V3 V3 u V4 et V1 u V4 On peut par exemple vérifier que E2 ⊆ E Le panier B numDepartement E contient alors les conjonctions V2 V1 u V3 V3 u V4 et V1 u V4 De la même manière à partir de VaRecu typeProduit = {V5 V6 V7} on obtient la solution de N_conj_rewrite 3 aRecu typeProduit V5 u V6 u V7 En effet l’intersection des ensembles E5 E6 E7 donne un ensemble dont la cardinalité est inférieure à 3 Ainsi V5 u V6 u V7 appartient au panier B aRecu ≤ 3typeProduit Dans la section qui suit nous montrons comment les deux problèmes E_conj_rewrite E w et N_conj_rewrite n wR se rattachent à un cadre de découverte des connaissances dans les bases de données 3 Vers la mise en place de techniques de fouille de données 3 1 Le cadre de Mannila et Toivonen 1997 Pour rattacher les problèmes énoncés précédemment à un cadre de découverte de connais sances nous nous appuyons sur le cadre théorique introduit dans Mannila et Toivonen 1997 Il formalise un problème basique de découverte de connaissances dans des bases de données qui peut être énoncé de la manière suivante Soit r une base de données L un langage pour exprimer des propriétés ou définir des sous groupes des données et P un prédicat de sélection Le prédicat P permet d’évaluer si une phrase X ∈ L est ”intéressante” dans r L’objectif est de trouver la théorie de r selon L et P i e l’ensemble T h r L P ={ ϕ ∈ L |P r ϕ est vrai} qui correspond à l’ensemble des phrases intéressantes de r Soit une relation de spécialisation généralisation i e un ordre partiel � sur les motifs de L On dit que X généralise Y et que Y spécialise X quand X � Y Soit S un ensemble de phrases de L tel que si ϕ ∈ S et γ � ϕ alors γ ∈ S Alors S peut être représenté par sa bordure positive Bd+ S ou sa bordure négative Bd− S Bd+ S = {ϕ ∈ S | pour tout θ ∈ L avec ϕ � θ θ 6∈ S} Bd− S = {ϕ ∈ L \ S | pour tout γ ∈ L avec γ � ϕ γ ∈ S} La bordure positive correpond aux éléments les plus spécifiques de la théorie tandis que la bordure négative correspond aux éléments les plus généraux de la théorie Elles permettent chancune de retrouver toutes les phrases X ∈ L ”intéressantes” dans r i e celles pour les quelles P r X est vrai Notons que si le prédicat P de T h r L P est anti monotone par rapport à � i e si ∀X Y ∈ L tels que X � Y et Pred r Y est vrai alors Pred X r est vrai alors la théorie peut être représentée par ces bordures Ce cadre peut être appliqué à de multiples problèmes Mannila et Toivonen 1997 comme par exemple le problème de la découverte des motifs fréquents Agrawal et al 1993 La section qui suit s’attache à montrer comment le problème de la réécriture peut se ramener à une formulation ensembliste puis être transposé dans le cadre précédemment introduit 83 RNTI E 6 Fouille de données pour la réécriture de requêtes 3 2 Formulation des problèmes de réécriture dans un cadre de décou verte de connaissances 3 2 1 Formulation ensembliste de la réécriture Pour un mot w un ensemble E un entier n donnés nous cherchons maintenant à donner une formulation ensembliste des problèmes E_conj_rewrite E w et N_conj_rewrite n w Pour reformuler plus précisément ces problèmes nous introduisons les définitions suivantes Définition 4 Soient w un mot E un ensemble et n un entier Soit Fw = {E1 Ep} l’en semble des Ei associés aux vues Vi de Vw et P Fw l’ensemble des parties de Fw S1 w E = {X ∈ P Fw | ∩ {x ∈ X} ⊆ E et ∀Y ⊂ X ∩{y ∈ Y } 6⊆ E} S2 w n = {X ∈ P Fw | |∩{x ∈ X}| ≤ n et ∀Y ⊂ X |∩{x ∈ X}| > n} S1 w E caractérise les plus petits sous ensembles de Fw dont l’intersection des éléments est contenue dans E tandis que S2 w n caractérise les plus petits sous ensembles de Fw dont la cardinalité de l’intersection des éléments est inférieure à n Le lemme suivant caractérise les solutions de E_conj_rewrite E w et N_conj_rewrite n wR avec les ensembles S1 w E et S2 wR n Lemme 2 Soient n un entier w et wR des mots et E un ensemble Soient deux problèmes E_conj_rewrite E w et N_conj_rewrite n wR Soit b = uikj=i1Vj 1 b est une solution de E_conj_rewrite E w ssi {Vi1 Vik} ⊆ Vw et {Ei1 Eik} ∈ S1 w E 2 b est une solution de N_conj_rewrite n wR ssi {Vi1 Vik} ⊆ Vw R et {Ei1 Eik} ∈ S2 w R n La formulation ensembliste du problème N_conj_rewrite n wR est illustrée dans l’exemple qui suit Exemple 5 Reprenons l’énoncé de l’exemple 3 On a FaRecu typeProduit = {E5 E6 E7} On a S2 aRecu typeProduit 3 = {{E5 E6 E7}} On retrouve alors la solution de N_conj_rewrite 3 aRecu typeProduit V5 u V6 u V7 Dans la section suivante nous montrons comment cette représentation ensembliste peut être transposée dans le cadre de Mannila et Toivonen 1997 3 2 2 Calcul des réécritures dans un cadre de découverte de connaissances Identification de S1 w E Dans ce contexte le premier ensemble S1 w E peut se ramener au cadre de découverte de connaissances précédent de la manière suivante – la relation r est vide – le langage Lw est l’ensemble des parties de Fw i e P Fw – le prédicat noté P1 est défini de la façon suivante Soient X ∈ Lw X = {E1 Ek} et E un ensemble de valeurs P1 E X est vrai ssi ∩ki=1{Ei} 6⊆ E – la relation d’ordre est la relation d’inclusion ⊆ 84 RNTI E 6 H Jaudoin et F Flouvat La théorie T h ∅ Lw P1 est alors l’ensemble des éléments de Fw qui vérifient le prédicat P1 De plus le prédicat P1 étant anti monotone les notions de bordure positive et négative s’appliquent ici Le théorème suivant permet de caractériser S1 w E en fonction de la bordure négative Théorème 1 Soit le problème E_conj_rewrite E w S1 w E = Bd− Th ∅ Lw P1 Nous pouvons de la même manière caractériser S2 w n dans le cadre théorique de Man nila et Toivonen 1997 Identification de S2 w n Comme précédemment la relation r est vide Lw consiste en l’ensemble des parties de Fw = {E1 Ep} et la relation d’ordre est l’inclusion Nous intro duisons un nouveau prédicat P2 n X défini comme suit X = {E1 Ek} ∈ Lw P2 n X est vrai ssi | ∩ki=1Ei |> n Le prédicat P2 n X est anti monotone par rapport à l’inclusion ce qui garantit l’existence des bordures Par conséquent le théorème suivant donne une carac térisation de S2 w n en fonction de la bordure négative Théorème 2 Soit le problème N_conj_rewrite n w S2 w n = Bd− Th ∅ Lw P2 L’exemple qui suit illustre la formulation de S2 w n dans le cadre introduit ci dessus Exemple 6 Dans la suite de l’exemple 5 pour le mot aRecu typeProduit LaRecu typeProduit est l’ensemble des parties de FaRecu typeProduit Le paramètre n du prédicat P2 est égal à 3 La théorie T h ∅ LaRecu typeProduit P2 est égale à {{E5} {E6} {E7} {E5 E6} {E5 E7} {E6 E7}} La bordure positive de T h ∅ LaRecu typeProduit P2 est donc {{E5 E6} {E5 E7} {E6 E7}} et sa bordure négative est {{E5 E6 E7}} On retrouve le résultat de l’exemple 5 A partir de cette formalisation il est possible d’utiliser des algorithmes de fouille de données pour résoudre ces problèmes et plus particulièrement les algorithmes de découvertes des mo tifs fréquents 4 Implémentation et expérimentations Choix d’implémentation Un algorithme de réécriture pour un sous langage de FL0 Ov a été implémenté à l’aide d’un système de gestion de bases de données SGBD permettant ainsi de gérer efficacement de grands volumes de données et de traiter un grand nombre de transac tions simultanées Pour le moment seul le calcul des solutions de E_conj_rewrite w E a été implémenté sous forme d’un algorithme de fouille de données extérieur au SGBD Les don nées sont expatriées vers ce programme chargé d’exécuter l’algorithme de fouille de données et de renvoyer les résultats au SGBD Nous utilisons l’algorithme Apriori Agrawal et Srikant 1994 pour trouver les solutions de E_conj_rewrite w E Cet algorithme est l’algorithme classique de découverte des motifs fréquents Il effectue un parcours par niveau de l’espace de recherche et utilise une stratégie d’élagage à partir de motifs de la bordure négative pour limiter le nombre de motifs générés Les avantages de cet algorithme pour résoudre notre problème sont multiples Cet algorithme 85 RNTI E 6 Fouille de données pour la réécriture de requêtes tout en recherchant les motifs fréquents découvre uniquement les motifs de la bordure néga tive ce qui n’est pas le cas d’une grande partie des autres approches De plus sa stratégie et son efficacité ne dépendent pas du prédicat étudié A l’opposé une grande partie des autres algorithmes fondent leur efficacité sur des techniques propres au prédicat ”être fréquent” L’ef ficacité de ce type d’approche pour un autre prédicat est donc difficilement prévisible L’implémentation d’Apriori utilisée est une adaptation de l’implémentation C++ de Bor gelt 2003 Cette implémentation est reconnue pour être l’implémentation la plus efficace d’Apriori actuellement Goethals et Javeed Zaki 2003 Bayardo et al 2004 L’implémenta tion initiale d’Apriori a été modifiée de façon à rendre l’algorithme indépendant du prédicat étudié Plus concrètement pour pouvoir appliquer Apriori à un nouveau prédicat il suffit de définir les opérations propres à ce prédicat et de le passer en paramètre de l’algorithme Actuellement en plus de différents prédicats liés aux motifs fréquents le prédicat P1 a été implémenté permettant ainsi de trouver les solutions de E_conj_rewrite w E par Apriori L’avantage de notre implémentation est donc de faciliter l’utilisation d’Apriori pour résoudre d’autres problèmes que ceux de fouille de données en évitant d’avoir à réécrire à chaque fois l’algorithme Expérimentations Nous nous concentrons ici sur l’expérimentation de la phase de résolu tion de E_conj_rewrite w E Cette phase étant l’une des plus coûteuse son étude va nous permettre d’estimer le nombre de vues pouvant être traitées Notons que cette borne corres pond au nombre de vues que l’algorithme de réécriture a identifié comme étant pertinentes à la réécriture d’un atome de la forme ∀mot valeurs i e les vues de Vmot Ainsi cette borne conditionne uniquement la taille de l’entrée d’Apriori et ne fait pas figure de limite sur le nombre de vues que l’algorithme de réécriture peut traiter Les expérimentations ont été réalisées sur des jeux de données synthétiques Les jeux d’es sais ont été créés à l’aide du générateur aléatoire d’Oracle de façon à ce que la cardinalité des contraintes de valeurs soit égale à un entier n ou comprise entre 1 et un entier n tel que n ∈ {10 20 30 40} On a mesuré les temps d’exécution d’Apriori sur ces jeux d’essais Ces expérimentations ont été réalisées sur un pentium IV pro 2 6 Ghz avec 3 Go de mémoire Comme le montre la figure 1 lorsque la taille des contraintes de valeurs est petite il est possible de prendre un grand nombre de vues en entrée e g 15000 vues pour des contraintes de taille inférieure à 10 Dès que la taille des contraintes augmente le nombre de vues que peut traiter l’algorithme diminue figure 1 En effet plus la taille des contraintes est grande plus les contraintes risquent de s’intersecter et que cette intersection ne soit pas incluse dans E Par conséquent le nombre de motifs intéressants est susceptible d’être important et le pro grammme dans ce cas nécessite plus d’espace mémoire que disponible Notons que lorsque les contraintes de valeurs sont de taille fixe figure gauche de la figure 1 Apriori est mis en difficulté plus rapidement que lorsque les contraintes sont de taille variable Ceci s’explique par le fait que par exemple pour des contraintes de cardinalité au plus 10 les contraintes sont composées en moyenne de 5 valeurs D’une manière générale ces jeux ont montré qu’il est possible de prendre en entrée pour la réécriture des atomes de la forme ∀mot valeurs jusqu’à 15000 vues Néanmoins il est difficile de comparer les performances de notre prototype avec d’autres applications de réécri ture de requêtes dans la mesure où dans ce domaine les résultats théoriques ont toujours primé sur les résultats expérimentaux A notre connaissance Pottinger et Halevy 2001 est une des 86 RNTI E 6 H Jaudoin et F Flouvat 0 5 10 15 20 25 30 35 40 3000 5000 10000 15000 Nombre de vues Te m ps d 'e xé cu tio n en s ec on de s 10 20 30 40 0 5 10 15 20 25 30 35 40 45 50 3000 5000 10000 15000 Nombre de vues Te m ps d 'e xé cu tio n en se co nd es 10 20 30 40 FIG 1 – Temps d’exécution d’Apriori pour des contraintes de taille fixe puis variable rares références qui décrit l’évaluation des performances d’un algorithme de réécriture Leur implémentation est considérée comme permettant le passage à l’échelle car pour réécrire une requête elle peut traiter près de 12000 vues Aussi par rapport à ces résultats notre approche de réécriture basée sur Apriori permet d’envisager le passage à l’échelle 5 Conclusions et perspectives Dans cet article nous avons confirmé l’intérêt des techniques de fouilles de données pour traiter le problème de la réécriture en présence de contraintes de valeurs En effet dans ALN Ov de nouveaux cas de réécritures engendrés par les contraintes peuvent bénéficier d’une formulation dans le cadre de découverte de connaissances de Mannila et Toivonen 1997 De plus l’implémentation de notre approche basé sur une implémentation générique d’Apriori permet de traiter un grand nombre de vues et d’envisager le passage à l’échelle de notre algorithme de réécriture Toutefois l’exécution d’Apriori devient problématique quand une grande partie de l’espace de recherche doit être parcourue i e quand il existe de grands motifs intéressants Dans de telles configurations pour le problème de la découverte des fré quents des algorithmes ont été proposés afin de trouver plus efficacement les motifs de grande taille Han et al 2000 Uno et al 2003 Flouvat et al 2004 L’adaptation de certaines de ces approches pourrait donc permettre de traiter un nombre plus important de vues Références Agrawal R T Imielinski et A N Swami 1993 Mining association rules between sets of items in large databases In SIGMOD conference Washington pp 207–216 ACM Press Agrawal R et R Srikant 1994 Fast algorithms for mining association rules in large data bases In VLDB conference Santiago de Chile Chile pp 487–499 Baader F D Calvanese D McGuinness D Nardi et P Patel Schneider Eds 2003 The Description Logic Handbook Theory Implementation and Applications Cambridge Uni versity Press 87 RNTI E 6 Fouille de données pour la réécriture de requêtes Bayardo R B Goethals et M J Zaki Eds 2004 ICDM Workshop on Frequent Itemset Mining Implementations Volume 126 of CEUR Workshop Proceedings Borgelt C 2003 Efficient implementations of Apriori and Eclat In ICDM Workshop on Frequent Itemset Mining Implementations Borgida A T et P F Patel Schneider 1994 A semantics and complete algorithm for sub sumption in the classic description logic Journal of Artificial Intelligence Research 1 Flouvat F F D Marchi et J M Petit 2004 ABS Adaptive borders search of frequent itemsets In ICDM Workshop on Frequent Itemset Mining Implementations Volume 126 of CEUR Workshop Proceedings Goethals B et M Javeed Zaki 2003 Advances in frequent itemset mining implementations Introduction to FIMI’03 In ICDM Workshop on Frequent Itemset Mining Implementations Han J J Pei et Y Yin 2000 Mining frequent patterns without candidate generation In SIGMOD Conference pp 1–12 Jaudoin H J M Petit C Rey M Schneider et F Toumani 2005 Query rewriting us ing views in presence of value constraints In F W Ian Horrocks Ulrike Sattler Ed Description Logics pp 112–119 Jaudoin H F Toumani J M Petit et M Schneider 2004 Utilisation d’un cadre de décou verte des connaissances pour la réécriture de requêtes en présence de contraintes de valeurs In J L Maitre Ed BDA 2004 pp 407–426 Levy A A Rajaraman et J Ordille 1996 Querying Heterogeneous Information Sources Using Source Descriptions In VLDB conference Mumbai Bombay India pp 251–262 Mannila H et H Toivonen 1997 Levelwise search and borders of theories in knowledge discovery Data Mining and Knowledge Discovery 1 3 241–258 Pottinger R et A Halevy 2001 Minicon A scalable algorithm for answering queries using views The VLDB Journal 10 2 3 182–198 Uno T T Asai Y Uchida et H Arimura 2003 LCM An efficient algorithm for enumer ating frequent closed item sets In Workshop on Frequent Itemset Mining Implementations Summary In this paper we show how data mining techniques can be used to solve efficiently the problem of query rewriting using views in presence of value constraints within the setting of description logicALN Ov Firstly we give a formalization of this problem in the framework of ALN Ov Then we show how to fit this formalization with a KDD framework Therefore we reuse KDD scalable algorithmic solutions to solve this rewriting problem We describe an implementation of this approach and give some experimental results The first results show the scability of this kind of approach 88 RNTI E 6