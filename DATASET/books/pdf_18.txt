contraintes prescriptives compatibles évaluer complétude ontologies philippe martin ea2525 university réunion 97490 sainte clotilde france philippe martin reunion phmartin adjunct researcher school griffith university australia school griffith university southport australia griffith résumé article définit contraintes prescriptives comme règles permettant moteurs inférence vérifier certains objets formels réellement utilisés seulement inférés certaines conditions montre contraintes nécessitent exploiter mécanisme héritage autres mécanismes ajoutant relations objets durant tests conclusions règles donne méthode générale effectuer commandes sparql implémenter cette méthode lorsque règles représentées relations classe entre conditions conclusions article illustre commandes vérification patrons conception ontologies généralement approche utilisée vérifier complétude ontologie représenter ontologie plutôt requêtes procédures contraintes permettant calculer degré complétude ontologie approche ainsi aider élicitation modélisation validation connaissances introduction représentations connaissances descriptions formelles permettant inférences logiques ainsi comparaisons automatiques recherches fusions formules logiques prédicats binaires logique ordre aussi appelés triplets instances propriété relations binaires graphes conceptuels article souci clarté utilisons terminologie intuitive objets information types individus types types relations types concepts classes types données connaissances formelle collection objets écrits langage ontologie portant essentiellement types créer évaluer étant difficile tâches souvent évaluation degré complétude selon certains critères abréviation complétude telle évaluation effectuée diverses tâches manière différente suivant contraintes prescriptives compatibles complétude ontologies outils parfois manière implicite exemples telles tâches domaines extraction automatique manuelle connaissances création exploitation modèles conception ontologies évaluation ontologies généralement données dernier domaine comme zaveri complétude réfère communément degré présence informations requises satisfaire certains critères certaine requête informations trouvées référence complète degré estimé oracles complétude galárraga règles requêtes permettant estimer manque répondre aussi hypothétique référence complète article adoptons cette définition générale légère extension précision requis représenté explicitement contraintes contraintes intégrité effet existe référence complète souvent utilisée directement existe oracles complétude peuvent moins partiellement implémentés exploitant contraintes avantageux représenter contraintes plutôt exemple requêtes requis faciliter exploitation réutilisation informations usage contraintes permet vérifier complétude importe moteur inférence pouvant exploiter contraintes implémentation effectuée simple vérification suffisante degré complétude recherché moyen simple définir précisément calculer diviser nombre faits satisfaisant contraintes nombre total faits cette méthode basique rapport celles agrègent résultats oracles complétude sujet article celui fournir moyen simple représenter contraintes vérifier sparql pouvoir évaluer calculer complétude section distingue contraintes descriptives contraintes prescriptives positives montre dernières peuvent représentées logiques classiques hypothèse monde fermé nécessaires vérifier complétude cette section introduit ensuite types spéciaux indiquant certaines expressions contraintes méthode vérifier contraintes prescriptives ensemble profils contraintes compatibles comme moyen simple représenter contraintes expressivité moins égale section montre comment cette méthode vérification contraintes prescriptives implémentée ensemble réduit commandes sparql section illustre exploitation commandes ainsi aussi limites compatibilité induit section compare notre approche autres évalue conclut contraintes prescriptives compatibles contraintes positives négatives descriptives prescriptives article comme chein mugnier contraintes peuvent positives négatives respectivement exprimer faits forme aussi martin comme assmann wagner modèles ingénierie peuvent descriptifs réalité plupart ontologies prescriptifs informations représentées doivent spécifications systèmes modèles schémas bases données similairement distinguons sortes contraintes positives contraintes descriptives comme définitions axiomes permettent moteurs inférence vérifier utilisation certains termes formels utilisés contraintes prescriptives permettent moteurs inférence vérifier certains termes formels réellement utilisés seulement inférés utilisés certaines conditions contraintes prescriptives peuvent utilisées vérifier défini comme ayant nécessairement certaines relations relations explicitement données utilisateurs lorsqu créent instance explicitement signifie relations doivent simplement exister suite déduction automatique héritage parce elles créées utilisateur permettent utiliser contraintes permettent généralement spécifier contraintes prescriptives positives titre exemple supposons inclut règle personne parent définition toute personne nécessairement parent utilisateur ajoute personne cette contient aussi contrainte descriptive personne parent aucun message erreur généré puisque cette contrainte satisfaite inférence utilisateur décrire parent contre cette règle marquée comme prescriptive signifie personne avoir parent ajout personne relation parent alors refusé autres termes mécanisme associe automatiquement relations objets héritage dynamique statiquement saturation chaînage avant mécanisme adéquatement désactivé contourné vérifier contraintes prescriptives positives contraintes négatives descriptives prescriptives puisqu elles permettent détection incorrects aient ajoutés automatiquement contraintes prescriptives permettent ainsi vérifications autres contraintes descriptives elles équivalentes utilisation hypothèse monde fermé expressions logiques classiques seulement descriptives comme dessus indiquer toute personne nécessairement parent seulement descriptif règles marquées comme représentant contraintes prescriptives positives nécessitent interprétation spéciale commande procédure spéciale méthode générale types contraintes prescriptives montrent représenter vérifier contraintes intégrité exploitant certaines formes hypothèse unique hypothèse monde fermé effectué requêtes sparql requête différente chaque contrainte différente notre plutôt permettre représentation contraintes utilisé augmenter possibilités exploitation réutilisation contraintes quelques requêtes sparql prédéfinies souhaitons aussi surtout prendre compte contraintes prescriptives notre approche introduire types contraintes reliant types relations instance créateurs peuvent signifier contraintes ainsi elles peuvent retrouvées contraintes prescriptives compatibles complétude ontologies interprétées manière spéciale moteur inférence ontologie similairement utilisée augmenter expressivité notre ontologie types contraintes cette ontologie constraint supertype types contraintes similairement prescriptive_constraint constraint permet retrouver spécifier seulement contraintes prescriptives constraint_via_types supertype types contraintes représentent relations entre types dernier instance ordre type_of_constraint_via_types indiquer constraint_via_types suffisant spécifier toutes définitions aussi contraintes éviter héritage plutôt indiquer instance type_of_constraint_via_types partie identifiants abréviation espace webkb vérification adéquate contraintes prescriptives positives section introduit nécessité temporairement désactiver contourner mécanismes inférence associant automatiquement relations objets toutefois mécanismes utiles vérifier objet vérifie condition contrainte prescriptive positive ainsi doivent désactivés contournés principal alias objet conclusion cette contrainte objet relations obligatoires objets satisfaisant condition contrainte proposons méthode contournement suivante statiquement traitement dynamiquement vérification telles contraintes créer clone chaque objet vérifiant condition telle contrainte vérification conclusion effectuer clone clone mêmes relations original relations instance individu anonyme avoir identifiant différent objet original clone inférences exploitant types associer relations objet évitées abrévier écrirons désormais cette méthode permet éviter héritage cette méthode fonctionne inférences exploitant types celles basées typage canard plutôt héritage saturation chaînage avant automatiquement effectuée avant traitement dessus rares cette méthode repose modification temporaire avant vérification moteur inférence ainsi cette méthode repose indépendante moteur inférence particulier ainsi différent domaines applications moteurs inférence différents peuvent utilisés vérifier évaluer complétude ontologies certains langages requête versions actuelles sparql modification temporaire effectuée dynamiquement traitement nécessaire limitation serveurs autorisent plupart leurs utilisateurs modifier vérifier contraintes compatibles comme contraintes règles particulières comme souhaitons représenter contraintes manière simple indépendante notations particulières avons abord considéré profils celui entièrement défini règles définies égalité datalog ensemble purement déclaratif prolog cependant telles règles conclusion martin inclure objets anonymes existentiellement quantifiés possible règles existentielles datalog baget montrent langage nomment représenter nombreuses sortes règles existentielles suffixe simplement utilisant relation subclassof entre expressions classe expression superclasse représentant conclusion règle autres termes relation subclassof exprimée notation fonctionnelle traduite manière suivante notation peano russel logique ordre correspond partie datalog pouvant exprimée utilisant seulement ensemble seulement relations binaires variables partagées condition conclusion règle contrainte négative représentée manières expression classe équivalente nothing conclusion règle règle forme classexpression negativeobjectpropertyassertion exprimer négation forme classexpression datalog peuvent directement représenter contrainte positive comme expliqué section exprimé spécifiant règle instance constraint article contraintes toujours représentées règles exploitons forme négative citée dessus utilisant relations subclassof façon simple quoique restrictive représenter règles baget montrent traduit datalog représenté datalog ruleml ruleml deliberation comme elles exploitent relations subclassof techniques peuvent travailler importe ayant moins expressivité permettant réutiliser dernier point expression contraintes compatibles autres termes techniques exigent moins utilisé exploitées serait pertinent article donner détails formalisation représenter règle relation subclassof implique baget offrent exploration formelle implique article sparql section suivante fournit détails formels nécessaires article formalisation contraintes prescriptives autres celle donnée sparql serait utile contraintes compatibles pourraient généralisées utilisant relation relation subclassof entre condition conclusion contrainte conformément terminologie donnée introduction permettrait utilisation types relations données seulement classes condition conclusion contrainte cependant vérification objets relations instances types données souvent effectuer contraintes instances classe liées objets relations peuvent généralement vérifiées leurs sources destinations chaque portant relations chaque instanciation negativeobjectpropertyassertion article utilisons relations subclassof entre conditions conclusions contraintes signifier expression classe condition contrainte compatible ordre like_constraint_condition ordre type_of_owl2 like_constraint_condition proposés notre contraintes prescriptives compatibles complétude ontologies ontologie utilisent respectivement comme indiqué types constraint_via_types type_of_constraint_via_types requêtes sparql article utilisent like_prescriptive_constraint_condition like_constraint_condition types ordre effet plupart moteurs inférence logiques description peuvent gérer exploitant types ordre prédéfinis logiques cette raison contraintes portant définitions doivent vérifiées moteurs inférence traitement individus requis classes ordre deviennent individus leurs relations doivent également retirées inversement avant vérifier individus outils types ordre définis doivent supprimés exemples donnés martin document associé article commandes sparql exploitation contraintes prescriptives compatibles extensions sparql telle ldscript corby commandes suivantes peuvent séquencées scripts fonctions sparql variables commencent article raisons clarté types relations débutent lettre minuscule tandis autres débutent majuscule comme sparql réutilise notation turtle turtle utilisons aussi section forme source destination1_1 destination1_2 destination2_1 destination2_2 source destination1_1 destination1_2 destination2_1 destination2_2 commande traitement retirant temporairement individus vérifier contraintes types moteurs inférences logiques description classiques clause where commande dessous sélectionne chaque objet class individu clause delete supprime relations depuis depuis leurs destinations supprime relations subclassof lorsqu elles existent remplacer relations subclassof clause insert ajoute relations subclassof effet elles signification particulière moteur inférence gênent appariement objets classes inférence relations enfin elles permettent affirmer relations subclassof initiales commande similaire delete subclassof superclass insert subclassof superclass where subclassof superclass filter exists class commande traitement créant clones objets exploiter objets mécanisme héritage sparql fournit moyen supprimer héritage exécution requête permet sélectionner régime inférence sparql entailments particulier requête toutefois martin méthode contournement héritage donnée section implémentée sparql commande dessous fournit exemple souci clarté supposé contient ordre chaque objet objet individu commande copie partielle mêmes relations moins relations cette copie partielle identifiant celui suffixe _clonewithouttype cette commande relie aussi relation clonewithouttype martin montre extension sparql telle corby faron zucker utile effectuer traitement commande seule commande nécessite requête construct inclue requête select permettre ainsi création clones volée insert clonewithouttype where filter filter exists class concat _clonewithouttype commande vérification contraintes prescriptives positives cette commande requête liste objets violant contrainte prescriptive positive comme montre objet satisfait conditions abord apparié avoir condition contrainte posconstr classe like_prescriptive_constraint_condition nothing conclusion ailleurs objet apparié avoir conclusion contrainte superclasse ainsi cette requête nécessite moteur sparql régime inférence permettant appariement alias catégorisation individu rapport expression classe déduction relation entre commandes dessous chaque ligne utilisant telle déduction finit commentaire débutant appariement exemple individus conditions contraintes conclusions contraintes décrits régime inférence requis suffisant moteur inférence capable gérer expressivité requis select objectnotmatchingposconstr posconstr where corps cette seconde commande entre premier dernier posconstr subclassof like_prescriptive_constraint_condition posconstr_conclusion initialisation posconstr filter exists posconstr subclassof nothing contrainte négative objectnotmatchingposconstr posconstr appariement condition filter exists objets satisfaisant conclusion listés objectnotmatchingposconstr posconstr_conclusion appariement commande vérification contraintes prescriptives négatives cette requête liste chaque objet violant contrainte négative chaque objet appariant ayant negconstr intance contrainte_in_owl2 nothing conclusion distinction entre descriptif prescriptif contraintes négatives cette requête simple précédente inutile moteur inférence utilisé appariement utilisé directement vérifier toute contraintes prescriptives compatibles complétude ontologies select objectmatchingnegconstr negconstr where negconstr subclassof like_constraint_condition nothing objectmatchingnegconstr negconstr appariement commande vérifier relations binaires individus lister relations binaires violant contraintes prescriptives plutôt lister individus ayant relations violant telles contraintes suffit remplacer relation relation implication entre formules logiques requêtes précédentes référer telle implication berners utilise identifiant implies berners remplacement fonctionne moteur sparql utilisé exploiter moteur inférence pouvant déduire existence telle implication quand existe entre formules appariées comme requêtes individus celles relations peuvent utiliser filtres supplémentaires commande fonctionne seulement formules négatives ajouter corps objectmatchingnegconstr negativeobjectpropertyassertion appariement commande évaluation complétude ontologie moyen simple définir calculer degré complétude diviser nombre relations violant contraintes prescriptives nombre total relations liées moins autre objet relations commande dessous recherche individus adaptée comme indiqué précédent paragraphe implémenter définition complétude dessus select nbobjs nbagainstposcs nbmatchingnegcs nbobjs completeness select count distinct nbobjs where objet autre objet select count distinct objectnotmatchingposconstr nbagainstposcs where corps commande copié select count distinct objectmatchingnegconstr nbmatchingnegcs where corps commande copié exemples contraintes prescriptives ainsi exploitables construction hiérarchies types divers travaux recherche conseillent utiliser structures arbres rector martin montre utiliser partitions types structures arbre mêmes avantages moins inconvénients cette approche inutilement lourde classer types naturels catégoriser classes réutilisant martin propose utiliser relations equivdisjointunion subclassofdisjointunion nonnaturalsubclass types trois types définit trois types ainsi supertype commun martin nonnaturalorpartitionsubclass patron conception proposé alors vérifié contrainte prescriptive positive suivante existe relation classe entre classes cette relation nonnaturalorpartitionsubclass contrainte équivalente classe relation classe classe cette relation nonnaturalorpartitionsubclass permettant utiliser variable référer ladite relation version compatible classe relation classe avoir relation nonnaturalorpartitionsubclass représentation turtle dessous contourner ambiguité inhérente cette dernière version effectuer vérification voulue vérifier chaque objet utiliser commande directement vérifier chaque relation utiliser implies comme indiqué texte associé commande subclass classe ayant classe condition contrainte associée subclassof er_prescriptive_constraint_condition equivalentclass définition condition contrainte restriction classe classe onproperty subclass somevaluesfrom class subclassof conclusion types relations doivent présents restriction onproperty nonnaturalorpartitionsubclass somevaluesfrom class martin généralise cette contrainte types exploite vérification relation transitive exactement propose commande sparql génère ajoute contrainte chaque relation transitive instance certain types ordre certains moteurs inférence traitement effectuer temporairement supprimer types avant vérifier contraintes manière similaire martin définit autre contrainte types exploite vérifier types relations instances certain systématiquement utilisés lorsque signature permet conditions données évaluation comparaisons conclusion notre approche permet représenter contraintes prescriptives expressivité moins égale permet exploiter importe moteur inférence compris requêtes sparql originalité contribution article avoir montré comment jusqu point moyennant quelles sortes traitements compenser limites sparql pourquoi possibilité représenter contraintes prescriptives plutôt requêtes procédures aussi possibilité réutiliser contraintes moteurs inférences diverse tâches liées vérification évaluation complétude construire possible utiliser contraintes prescriptives représenter patrons conception ontologies modèles tâches génériques utiliser moteur inférences vérifier complétude fonction résultats éliciter connaissance manquante auprès experts notre approche difficile évaluer théoriquement puisqu repose autres méthodes outils hérite leurs avancées théoriques pratiques baget contraintes prescriptives compatibles complétude ontologies listent avancées théoriques pertinentes cette approche avons validé notre approche expérimentalement utilisant vérifier ontologies calculer degré complétude degré faible contraintes implémentant patrons conception connus section poursuivrons expériences ajouterons leurs analyses martin concerne usage sparql vérifier contraintes montrent sparql utilisé exprimer valider contraintes intégrité utilisant formes partielles hypothèse monde fermé hypothèse uniques manière cohérente complète certaines conditions expressivité utilisée contraintes respectées notre approche requêtes servent valider contraintes exprimer généralisation approche change leurs résultats théoriques formes partielles hypothèse monde fermé uniques sparql spécifiables opérateurs exists exists sparql relations sameas differentfrom formes peuvent similairement exprimer commandes section usage relations sameas differentfrom contraintes notre approche basée utilisation particulière comparée shacl shapes constraint language shacl ontologie langage telle proposée permettre définir contraintes shacl réutilise définir contraintes introduit nouveaux termes permet réutiliser vérifier contraintes moteurs inférence comprenant spécial termes moteur inférence dédié shacl utilisé nouveau shacl appris shacl distinction entre contraintes descriptives prescriptives traite partiellement dernières effet shacl permette spécifier régime inférence utilisé quelle contrainte compris absence inférence insuffisant régime expressif nécessaire apparier objets condition contrainte prescriptive conclusion héritage effet supprimé enfin flexibilité langage sparql traitements permet atteinte shacl exemples contraintes section semblent pouvoir représenter shacl certains langages systèmes transformation exploitent zamazal svátek corby faron zucker présentent systèmes quoique entre permettent utiliser directement fonction appariement motifs aussi transformer appariés patomat zamazal svátek exception langages systèmes pourraient adaptés avoir telle fonction ainsi utilisés gérer contraintes prescriptives toutefois notre connaissance systèmes utilisent langages expressifs utilisent généralement langages basés règles permettant usage variables relier objets partagés condition conclusion règle utiliser langages simplifier écriture contraintes prescriptives cependant concernant exprimé vérifié contraintes prescriptives article martin montrent beaucoup réalisé simplement utilisant sparql puissance notre approche puissance moteur inférence utilisé appariements seulement langage utilisé martin certains systèmes transformation patomat zamazal svátek génère requêtes sparql détecter motifs basées spécifications motifs leurs transformations autre langage certains autres systèmes transformation offrent directement extension sparql telle corby faron zucker écrire spécifications motifs leurs transformations comme montré corby combiné ldscript spécifier requêtes compilées requêtes sparql détectant modèles transformer résultats toutefois corby mentionnent exploitation moteurs inférence apparier objets distinction entre contraintes descriptives prescriptives commandes sparql compris celles générant contraintes prescriptives pourraient utilement réutilisées systèmes transformation forme adaptée allons explorer utilisant ldscript références assmann wagner ontologies models model driven paradigm ontologies software engineering software technology springer baget gutierrez leclère mugnier rocher sipieter datalog ruleml formats translations existential rules challenge ruleml berlin germany berners connolly kagal scharf hendler n3logic logical framework world theory practice logic programming chein mugnier graph based knowledge representation computational foundations conceptual graphs springer corby faron zucker sparql based transformation language webist international conference information systems technologies lisbon portugal corby faron zucker gandon ldscript linked script language international semantic conference vienna austria corby faron zucker gazzotti validating ontologies against profiles sparql template transformation language reasoning systems springer galárraga razniewski enabling completeness aware querying sparql webdb chicago martin compatible prescriptive constraints evaluate ontology pleteness webkb o_knowledge d_constraints_owl2er profils ontology language profiles second edition recommendation december profiles schema recommendation february schema contraintes prescriptives compatibles complétude ontologies rector brandt drummond horridge pulestin stevens engineering cases modular development ontologies applied ontology ruleml deliberation deliberation ruleml ruleml index specification_of_deliberation_ruleml_1 shacl shapes constraint language shacl recommendation shacl conceptual graphs summary conceptual structures current research practice ellis horwood sparql entailments sparql entailment regimes recommendation march sparql11 entailment querying existential knowledge bases decidability complexity thesis university montpellier sirin mcguinness integrity constraints press turtle turtle terse triple language recommendation february turtle zamazal svátek patomat versatile framework pattern based ontology transformation computing informatics zaveri maurino pietrobon lehmann quality assessment linked survey semantic journal summary article defines prescriptive constraints rules enabling inference engines check certain formal objects inferred certain conditions shows these constraints require exploiting inheritance mechanisms other mechanisms automatically adding relations objects during tests conclusions gives general method sparql commands implement method rules represented subclassof relation condition conclusion article illustrates these commands check ontology design patterns generally approach check completeness ontology represent constraints ontology rather requests procedures calculate degree ontology completeness approach elicitation modeling validation knowledge