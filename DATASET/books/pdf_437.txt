Détection AntiModèle dans le Web ontologies: une expérience utilisant SPARQL requêtes Catherine Roussey *, Oscar Corcho **, Ondřej Šváb-Zamazal ***, François Scharffe ****, Stephan Bernard * * Irstea / Cemagref, 24 Av. des Landais, BP 50085, Aubière, France ** Ontology Engineering Group, Universidad Politécnica de Madrid, Espagne *** Groupe d'ingénierie des connaissances, Université d'économie de Prague, République tchèque **** LIRMM, Université de Montpellier, France Résumé. Ontologies sont des structures qui les anti reflètent l'ontologie de modélisation des problèmes car ils conduisent à des incohérences, les mauvaises performances de raisonnement ou mauvaise formalisation des connaissances de domaine. Nous vous proposons quatre méthodes de dé- tection des requêtes en utilisant les anti SPARQL. Nous menons des expériences pour détecter dans un corpus antimodèle d'ontologies OWL. 1 Introduction Le concept de modèle de modélisation des connaissances ou modèle de conception de l'ontologie est utilisée pour faire référence à des solutions de modélisation qui permettent la résolution de la modélisation des connaissances récurrente ou l'ontologie des problèmes de conception, Presutti et al. (2008). Antipatterns sont des modèles qui sont inefficaces ou loin de timal OP- dans la pratique, ce qui représente les pires pratiques sur la façon de structurer et de concevoir une ontologie. Il existe plusieurs outils qui peuvent être utilisés pour la détection de les anti. Pellint 1 porte sur la détection et la réparation de l'ontologie pour améliorer les anti-performances de raisonnement. Des outils tels que décrits dans Workbench Explication Horridge et al. (2008), ou SWOOP décrit dans Kalyan- pur et al. (2005), fournir des justifications des incohérences dans ontologies basées sur les sorties de raisonneurs DL. Cependant, toutes ces contributions ont besoin d'un raisonneur pour fournir leurs justifications. Nos méthodes de détection AntiModèle mettre en œuvre une approche plus générale, qui peut fonctionner sur tout antimodèle et peut être appliquée sans l'utilisation d'un raisonneur, ce qui est très utile avec de grandes ontologies et lorsque le nombre d'erreurs dans une ontologie est si grande que la précédente systèmes de justification ne sont pas en mesure de les gérer correctement, en fournissant les délais d'attente. Pour détecter la lected antimodèle sé-, nous l'avons transformé en ensembles de requêtes SPARQL. En général, correspondent à plusieurs anti-patterns requêtes, car ils sont des structures abstraites qui peuvent avoir plusieurs formes logiques lorsqu'elles sont exprimées dans la description Logiques (DL). De plus, nous avons proposé plusieurs méthodes de Tection dé-. Nous pouvons activer ou désactiver des inférences avant d'exécuter des requêtes SPARQL. Nous pouvons également transformer les ontologies originaux en une forme où les requêtes SPARQL plus simples peuvent être exécutés. Ce document est structuré comme suit. L'article 2 décrit brièvement l'antimodèle qui sera utilisé pour exécuter nos expériences. La section 3 décrit les méthodes que nous avons suivi pour exécuter les expériences. La section 4 décrit la configuration de l'expérience et les résultats du 1. http://pellet.owldl.com/pellint - 263 - AntiModèle expérimentation de détection. Enfin, la section 5 fournit quelques conclusions au travail, sur la base des résultats de l'expérience, et décrit les prochaines étapes à faire dans notre travail. 2 Un échantillon antimodèle OnlynessIsLoneliness (OIL) Un ensemble de modèles couramment utilisés par les experts du domaine dans leur mise en œuvre des tologies de OWL sont identifiés dans Corcho et al. (2009). Ces modèles ont donné lieu à des cours insatisfiables ou des erreurs de modélisation, en raison d'une mauvaise utilisation ou mauvaise compréhension des expressions DL. Dans cette section, nous allons décrire un antimodèle qui est celui qui, notre expérience a montré, est plus facile à comprendre et débogage par des experts du domaine. C3 v ∀R.C1; C3 v ∀R.C2; DISJ (C1, C2); (1) C3 ≡ ∀R.C1; C3 v ∀R.C2; DISJ (C1, C2); (2) C3 ≡ ∀R.C1; C3 ≡ ∀R.C2; DISJ (C1, C2); (3) Le développeur de l'ontologie a créé une restriction universelle à dire que les instances C3 ne peuvent être liés à la propriété R aux instances C1. Ensuite, une nouvelle restriction universelle est ajouté en disant que les instances C3 ne peuvent être liés à R aux instances C2, avec C1 et C2 disjoints. En général, cela est parce que le développeur de l'ontologie a oublié l'axiome précédent dans la même classe ou dans l'une des classes parent. 3 détection basée SPARQL-de l'huile antimodèle Dans cette section, nous décrivons les différentes méthodes que nous avons élaborées afin de dé- Tect les anti OWL ontologies au moyen de requêtes SPARQL, basées sur l'utilisation de l'PatOMat ontologie outil de détection de motif 2. Cette fait partie des outils de la suite d'outils de PatOMat, qui se concentre sur la détection de modèles dans ontologies et leur transformation. Cet outil de dé- tection est basée sur Jena 2.6.2 3 et 4 Granules 2.0.1 et permet le traitement d'un ensemble de requêtes SPARQL sur un ensemble d'ontologies, un rapport en termes de nombre de modèles détectés (requêtes de SPARQL résultats ) et les détails de chaque ontologie. Les axiomes sur lesquels l'outil de détection de motif est exécuté peut être les axiomes affirmés dans les ontologies, ou une combinaison des axiomes affirmés et inférées. Nous OWL requête ontologies au moyen d'un langage de requête (SPARQL) qui est agnostique sur le modèle de représentation des connaissances sous-jacente de OWL: nous Interrogation en fait la sérialisation RDF de OWL. D'autres options sont disponibles dans l'état actuel de la technique pour OWL ontologie appariement et la transformation modèle sont la langue OPPL et ses outils associés décrit par Iannone et al. (2009), ou plus récente syntaxe d'interrogation OWL Terp 5, basé sur la syntaxe OWL Manchester. Si SPARQL est le langage dédié à la requête triplets RDF, OPPL et Terp sont dédiés à interroger la sérialisation RDF des expressions OWL parce qu'ils contiennent des constructions OWL comme subClassOf, complementOf, disjointWith. Néanmoins pour faire 2. La version utilisée pour ce document est à l'adresse: http://eso.vse.cz/~svabo/patomat/detectionTool.zip 3. http://jena.sourceforge.net/ 4. http: // clarkparsia.com/pellet/ 5. http://clarkparsia.com/weblog/2010/04/01/pellet21-terp/ - 264 - C. Roussey et al. la construction de SPARQL requêtes plus facile, nous développons un traducteur de requête qui transforme une requête d'entrée, à l'aide de la SPARQL-DL syntaxe abstraite définie dans Sirin et Parsia (2007), dans une requête SPARQL. Transformer en requêtes SPARQL les anti-DL n'est pas une tâche triviale. Pour chaque antimodèle, plusieurs requêtes SPARQL-DL sont nécessaires pour détecter les occurrences dans AntiModèle définition de classe OWL. Les difficultés proviennent de plusieurs points: - Un antimodèle peut être associée à plusieurs formules logiques dans la syntaxe DL. Par exemple, nous avons présenté 3 formules pour les tipatterns de l'huile. - Certaines formules logiques sont composées de plusieurs axiomes atomiques. 6 Par exemple, les trois formules du antimodèle HUILE contient trois axiomes atomiques. - développeur Ontologie peut avoir un style de mise en œuvre très différente lors de la conception d'une ontologie OWL. Par exemple, certains développeurs préfèrent écrire longue définition de classe. Dans ce cas, une classe est définie par une conjonction de classes unamed: C v (∃R.X) u (∀R.Y) u .... D'autres préfèrent écrire de courtes définitions. Une classe est définie par un ensemble d'axiomes atomiques: C v C v; ∃R.X ∀R.Y; C v .... Ainsi, pour une formule anti-modèle, un axiome atomique peut être placé à différents endroits dans la définition de classe. - Un axiome atomique peut appartenir à la définition de classe ou peut être héritée d'une définition de la classe mère. - Un axiome atomique peut dire par le développeur de l'ontologie ou par un raisonneur inférer. Pour construire nos requêtes, nous imaginons d'abord les différentes versions de chaque formules AntiModèle en utilisant la syntaxe abstraite SPARQL-DL. Nous essayons d'imaginer où un axiome atomique peut dire par le développeur de l'ontologie dans une définition de classe. Nous limitons notre imagination aux définitions de classes qui ont au plus quatre conjonctions. Nous intégrons dans ces requêtes quelques-unes des conclusions qui devraient être faites par un raisonneur. Nous prenons en compte le fait que: - axiomes sont disjoints symetric DISJ (C1, C2) DISJ (C2, C1), - axiome disjoints peut être déduit d'une négation logique C1 v ¬C2 DISJ (C1, C2). Ensuite, nous traduisons automatiquement chaque requêtes SPARQL-DL dans les SPARQL. Nous générons automatiquement des requêtes SPARQL qui regroupe toutes les différentes versions. FIGUE. 1 - Les méthodes de détection AntiModèle 6. Nous avons défini un axiome atomique comme condition (v nécessaire ou suffisante ≡) associé à une classe appelée C en utilisant au plus un constructeur (∀, ∃, ¬ ou u). Tous les paramètres doivent être nommés. Un exemple d'axiome atomique peut être C v ∃R.X. - 265 - Détection AntiModèle Comme le montre la figure 1, nous allons maintenant décrire les quatre méthodes que nous avons suivi afin de détecter dans le corpus anti-patterns de l'ontologie: -Méthode 1: Utilisation de requêtes sur SPARQL Affirmé OWL Ontologie Axiomes. Dans cette ap- proche, nous prenons en compte que les moteurs de SPARQL en soi ne considèrent pas des déductions qui peuvent être faites avec ontologies OWL. Cependant, nous supposons qu'il y aura des cas où ontologies ne peuvent pas être traitées par un raisonneur ou les résultats raisonneur ne peuvent pas être obtenus dans un délai raisonnable. Cela se produit normalement avec de grandes ontologies ou ontologies avec un grand nombre de errors.- Méthode 2: Utilisation des requêtes sur SPARQL sur OWL matérialisées Déductions ontologies. Quand il est possible d'utiliser un raisonneur, nous matérialisent toutes les conséquences qui peuvent être faites par un raisonneur OWL sur les ontologies et exécuter des requêtes SPARQL sur les ontologies résultant, appelé matérialisé ontologies. - Méthode 3 et 4: Utilisation de requêtes SPARQL sur Transformed OWL ontologies. En raison de la complexité de la création d'un grand nombre de requêtes SPARQL pour un antimodèle et au fait que les différents développeurs d'ontologies peuvent avoir différents styles de mise en œuvre, nous vous proposons de suivre un processus en deux étapes où l'on applique des transformations avant d'exécuter les requêtes. Les transformations ont deux objectifs: harmoniser le style de mise en œuvre de l'ontologie et de simuler certains des axiomes par Soner inférer rai-. Les transformations actuelles que nous appliquons sont: - Lorsque l'ontologie contient C1 ≡ C2 où C1 et C2 sont nommés classes, nous ajoutons deux nouveaux axiomes C1 v C2 et C2 v C1. - Lorsqu'une classe nommée est définie par la conjonction des classes nommées ou unamed, avons-nous divisé en plusieurs axiomes plus simples. Prenons comme exemple la définition de la classe: C v X u Y, dans ce cas, nous ajoutons deux axiomes C v X et C v Y. - Lorsqu'une classe parent contient un axiome, on ajoute aussi dans sa catégorie enfant direct. Prenons comme exemple la définition de la classe: C1 v ∃R.X. Si C1.1 est un enfant direct de C1, C1 C1.1 v, on ajoute l'axiome C1.1 v ∃R.X. À ce moment-là, cette transformation ne se répète pas sur la hiérarchie des classes. Dans ce cas, nous avons exploré le comportement de la méthode de vérification de la requête SPARQL à la fois sur l'ontologie affirmé après transformation et l'ontologie matérialisée (également après transformation). 4 Trouver dans ontologies les anti-monde réel Dans cette section, nous décrivons les résultats de nos expériences avec un corpus d'ontologies de ceux ex subdivisées en secteurs public sur le Web et indexé par le moteur de recherche sémantique Watson 7. Nous allons d'abord décrire l'ontologie corpus, puis les résultats de l'application des méthodes de dif- férents décrites à la section 3 de ce corpus d'ontologie. 4.1 Les expériences Les ontologies utilisées dans notre expérimentation vient de notre expérience dans l'ontologie Debug- tâche Ging. Cinq d'entre eux ont déjà été utilisés pour la création et la mise à jour du catalogue présenté dans antimodèle Corcho et al. (2009). Il contient le HydrOntology (qui a 159 classes dont 114 sont unsatisfiables), le Forestal ontologies (qui a 93 classes dont 62 sont insatisfiable), l'ontologie Tambis (qui a 395 classes dont 112 sont insatisfiable), l'ontologie douce numérique (qui a 2364 classes dont deux sont insatisfiable) et l'ontologie Uni- versité de l'esprit Lab (qui a 29 classes dont 7 sont insatisfiable). Avis 7. http://watson.kmi.open.ac.uk/ - 266 - C. Roussey et al. que dans notre expérience Hydrontology et les ontologies Tambis ne peuvent pas être traitées par le raisonneur à granulés dans un délai raisonnable. Nous avons fait les expériences suivantes sur l'ensemble des ontologies, en utilisant les méthodes de détec- tion AntiModèle décrites à la section 3: 1. SP: Rechercher dans les ontologies d'origine (uniquement avec axiomes affirmées) à l'aide de requêtes SPARQL et aucune inférence. 2. SP + R: Recherche dans le matérialisée ontologies (et affirmé axiomes inférée) à l'aide de requêtes SPARQL après application d'un raisonneur (pellets). 3. SP_Trans: Appliquer des transformations sur les ontologies d'origine et de recherche (uniquement avec axiomes BRANCHÉ as-) à l'aide de requêtes SPARQL et aucune inférence. 4. SP_Trans + R: Appliquer des transformations sur les ontologies d'origine et de recherche dans le rialisation Maté de ces ontologies harmonisées. Dans ces expériences, nous utilisons aussi le mot-clé MANUEL pour faire référence au processus de détection manuelle à l'aide des outils de débogage de base fournis par les éditeurs de l'ontologie. Cette méthode de détection définit une ligne de base par rapport à ce qui peut être détecté sur l'état actuel de la technique. Nous avons également des expériences courir, sur la base des précédents, pour évaluer la précision du processus de détection antimodèle. Nous avons analysé manuellement chacun des ontologies dans notre jeu et attribué à chacun d'occurrence antimodèle des trois valeurs suivantes: - TI (True Incohérence): les participe d'occurrence AntiModèle dans le insatisfiabilité des classes ou l'erreur de modélisation. - UI (Information inconnue Incohérence): l'apparition antimodèle peut être lié à la capacité unsatisfi- des classes ou des erreurs de modélisation, mais l'évaluateur n'est pas certain. - FI (Incohérence Faux): l'apparition antimodèle ne participe pas à la capacité unsatisfi- des classes ou des erreurs de modélisation. 4.2 Résultats: L'HUILE détection La configuration de l'huile est composé de 3 axiomes atomiques. Nous avons présenté 3 formules mais plus formules sont possibles, en fonction du style de mise en œuvre du développeur de l'ontologie. Voir l'ontologie site web pour les formules 8 antimodèle AntiModèle plus d'huile. Pour ces formules, on imagine qu'une définition de classe peut être composée de deux parties conjonctions. Nous avons défini 84 requêtes SPARQL. Les résultats présentés dans le tableau 1 pour la détection de l'anti-modèle sont méthode nb de résultats nb de TI nb d'UI nb de nb de FI de l'onto manuel 8 3 SP 2 2 0 0 2 SP + R 2 2 1 0 2 SP_Trans 2 2 0 0 2 + R SP_Trans 72 6 66 0 2 TAB. 1 - HUILE de détection antimodèle. inattendu. On remarque que l'axiome atomique disjoints n'a pas été détecté car il est par 8. https://sites.google.com/site/ontologyantipattern/ inférer - 267 - Détection AntiModèle raisonneur. Et en utilisant un produit de raisonneur inattendus occurrences AntiModèle. Ainsi, à ce moment-là l'une de nos méthodes de détection est bonne enought pour détecter HUILE antimodèle. Nous devons limiter notre méthode de détection au début du motif d'huile sans l'axiome disjoints. 5 Conclusion et travaux futurs Dans cet article, nous avons montré comment antimodèle d'huile peut être détectée en utilisant différentes ods qui sont basés méth- sur l'utilisation de requêtes SPARQL, raisonneurs OWL et outils de transformation. Dans de nombreux cas, ces méthodes de détection AntiModèle sont très sensibles au style de mise en œuvre du développeur de l'ontologie. De plus raisonneurs ne peuvent pas être utilisés en raison du mauvais temps de réponse et des résultats inattendus. Notre travail futur se concentrera sur le perfectionnement des méthodes que nous avons proposées dans le présent document pour améliorer les résultats de détection. Nous allons également essayer de détecter de nouveaux anti-patterns. Références Corcho, O., C. Roussey, L. M. Vilches Blázquez, et I. Pérez (2009). OWL basée sur des modèles ontologie directives de débogage. Dans l'atelier sur les modèles Ontologie (WOP 2009), à la 8e colocalisé International Semantic Web Conference (ISWC-2009)., Les ceedings de CEUR atelier, pp. 68-82. Horridge, M., B. Parsia et U. Sattler (2008). justifications laconiques et précises dans OWL. Dans Actes de ISWC, pp. 323-338. Iannone, L., A. L. recteur et R. Stevens (2009). L'intégration des modèles de connaissances en OWL. Dans Actes de l'ESWC, pp. 218-232. Kalyanpur, A., B. Parsia, E. Sirin, et J. Hendler (2005). Débogage cours insatisfiables dans ontologies OWL. Journal of Web Sémantique 3 (4), 268-293. Presutti, V., A. Gangemi, S. David, G. de Cea, M. Suárez-Figueroa, E. Montiel-Ponsoda, et M. Poveda (2008). NeOn livrable d2. 5.1. une bibliothèque de modèles de conception de l'ontologie: solutions réutilisables pour collaborativ e conception d'ontologies en réseau. Projet NeOn. http: // www. projet neon-. org. Sirin, E. et B. Parsia (2007). SPARQL-DL: SPARQL pour OWL-DL. En 3ème OWL: Expériences et directions Atelier (OWLED2007). Les CV antipatrons de conception d'ontologies des structures abstraites are Qui des reflètent Problèmes de modelisation. ILS à des évincés peuvent Incohérences Mener Logiques, de per- formances des Mauvaises d'inférences Moteurs, des formalisations OU des connaissances heuristiques du inadéquates domaine. Il Est important de Fait les antipatrons Détecter, versez les ontologies Corriger. Dans l'article de nous this methods de proposons quatre saisons d'antipatrons à détection partir de requests SPARQL. Pour EVALUER nos methods, nos tested NOUS Avons requests SPARQL sur un ensemble d'ontologies REELLES. - 268 -