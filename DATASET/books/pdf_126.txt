e33support uniforme types données personnalisés sparql maxime lefrançois antoine zimmermann mines saint étienne laboratoire hubert curien 42023 saint étienne france prenom résumé littéraux nœuds terminaux modèle données permettent encoder données telles nombres ˆˆxsd decimal dates 26t23 ˆˆxsd datetime autre information pomme couleur moteurs sparql savent tester égalité comparer littéraux données connu decimal datetime lorsqu données inconnu moteur sparql comme couleur priori aucun moyen découvrir sémantique article attaquons problème dions comment permettre éditeurs données publier définition types données personnalisés moteurs sparql découvrir volée types données personnalisés utiliser nière uniforme discutons différentes solutions possibles tirent partie principes données détaillons solution concrète basée déréférencement langage javascript suffisemment générique utilisée types données personnalisés arbitrairement complexes introduction littéral composé chaîne caractères unicode forme lexicale données identifie données cyganiak forment nœuds anonymes atomes modèle données forment liens tissent toile données litté encodent données telles nombres ˆˆxsd decimal dates 26t23 ˆˆxsd datetime autre information pomme couleur moteurs sparql savent tester égalité comparer littéraux données connu decimal datetime alors supporte données pratique moteurs programmés supporter ensemble types données lorsque données langstring étiquette langue cependant littéral intéresse cadre cette étude moins ensemble types données certains moteurs supportent autres comme standard geosparql perry herring support uniforme types données personnalisés sparql cependant lorsqu données inconnu moteur sparql comme couleur priori aucun moyen découvrir sémantique article résumé lefrançois zimermann propose solution problème serait effet intéressant pouvoir ainsi rendre flexible puissance descriptive modèle données types données personnalisés permettent descriptions concises certaines structures exemple description diamètre moyen terre données personnalisé length nécessiterait triplet prefix dbpedia resource prefix lindt custom_datatypes earth dbpedia ontology planet meanradius length alors longueur décrite ontologie hodgson nécessite quatre alourdit stockage complexe requêtes longueurs prefix schema prefix vocab earth dbpedia ontology planet meanradius quantity quantity quantityvalue value value numericvalue double value kilometre souhaitons précisément étudier comment permettre éditeurs données publier définition types données personnalisés exemple length moteurs sparql découvrir volée types données personnalisés utiliser manière uniforme suite article organisé comme section identifie besoins arriver résultat étudie quelques options plémentation possibles section introduit alors solution adresse spécifiquement types données arbitrairement complexes décrit implémentation résume résultats expérimentation données support volée types données souhaitons moteurs sparql puissent découvrir volée données partir identifie traiter littéraux ayant données manière uniforme cette section donne aperçu nécessaire étudie différentes options possibles article littéral compose chaîne unicode appelée forme lexicale appelée données identifions arbitraire chaîne unicode recommandation définit données comme structure comprenant ensemble chaînes unicode appelé espace lexical ensemble appelé ensemble valeurs application appelée lexical value mapping associe toute chaîne valeur utilisons définitions hayes patel schneider notamment notion reconnue lorsqu moteur sparql reconnaît identifie données supporte considérons littéraux étiquette langue lefrançois fonctionnalités nécessaires raisonnement requêtage définition données identifié spécifie valeur forme lexicale structure mathématique toujours représentée format interpré table ordinateur nécessaire moteur sparql compren structure mathématique données reconnaître suffit implémenter certaines opérations peuvent elles programmées identifions trois fonctionnalités nécessaires suffisantes moteur supporte données identifié seulement capable vérifier bonne forme littéral égalité littéraux fonctionnalités suffisent également moteur sparql déterminer correspondance entre graphes simples seule fonctionnalité additionnelle nécessaire sparql pouvoir ordonner certains littéraux lorsque données prête bonne forme etant donné chaîne unicode forme lexicale appartient espace lexical manière équivalente littéral exemple formé decimal alors decimal decimal egalité etant données chaînes unicode littéraux valeur exemple decimal decimal valeur comparaison etant données chaînes unicode valeur petite grande celle fonctionnalités suffisantes vérifier implication simple entre graphes implication simple reconnaissant ensemble types données hayes patel schneider lefrançois zimermann discutent compliqués étendent définitions reconnaissance ensemble quelconque types données espaces valeurs peuvent chevaucher options possibles implémentation moteurs implémentation codée données doivent pouvoir obtenir version calculable fonctions décrites section impossible certains types lorsque problème associé indécidable exemple données encode formules logique ordre aurait espace valeur ensemble classes équivalence formules implication logique ordre article intéressons pratiques lesquels bonne forme égalité comparaison fonctions calculables toute solution pratique nécessite accord entre éditeur consommateur mécanisme utiliser présenter exploiter fonctionnalités requises fonctions pourraient fournies service centralisé enregistrement types données éditeurs enregistrent spécification données telle solution pratique désaccord principes fondamentaux éditeur celui spécifie données identifié support uniforme types données personnalisés sparql suite article focalisons solutions partent principe version calculable fonctionnalités accessible déréférençant données principe justement suggéré section recommandation semantics restreignons librairies spécifiques moteurs moteurs sesame permettent gistrer classes vérifient bonne forme égalité donnée permettent également enregistrer classes implémentent fonctions filtre sparql permettraient comparaison données moteur pourrait accéder archive classes nécessaires reconnaître cette solution simple dépendante implémentations éditeur données aurait écrire classes chaque moteur présente également menace importantes sécurité moins langage script utiliser classes compilées spécifiques chaque implé mentation fournir fonctions nécessaires langage script utilisation fonctions devrait alors implémentée seule chaque moteur candidat langage script javascript environnements exécution sécurisés existent beaucoup langages program mation cette solution permet utiliser expressivité langage programmation permet spécification types données arbitrairement complexes service approche alternative consiste rendre exécution fonctions cessibles service cette solution nécessiterait haute accessibi service souhaiterions étudier avenir description basée ontologie beaucoup types données simples semble excessif utiliser expressivité complète langage programmation serait téressant utiliser ontologie représenter simples possiblement inspiré restrictions types données working group investiguons actuellement cette solution types données arbitraires spécifiés scripts proposons première solution concrète basée langage javascript plémentation évaluation directives éditeur utiliser identifier données exposer moins représentation javascript données cette script implémenter interface simple customdatatypefactory unique méthode permet obtenir objets implémentent interface customdatatype interfaces ensemble contraintes formelles implémentation respecter décrites lindt cette indirection nécessaire plusieurs types données peuvent définis document comme string définis document xmlschema moteur sache quelle partie exécuter chaque données lefrançois directives moteur sparql lorsqu moteur sparql contre littéral données inconnu identifié opère option accept application javascript opéra succès interprète script exécute fonction getdatatype récupère objet contient version calculable fonctionnalités nécessaires supporter données utilise fonctions valider forme lexicale vérifier égalité littéraux comparer littéraux ayant données publication données avons publié premier données lindt custom_datatypes length abrégée length crire mesures longueurs notre serveur utilise négociation contenu servir spécification length javascript turtle espace lexical concaténation double espace optionnel unité littéraux suivants typés valeur length length 63360 inches length 609344km length metre length 609344e length implémentation support volée avons implémenté directives moteurs modifications nécessaires précisées lefrançois zimermann expérimentation article complet lefrançois zimermann décrit notre expéri mentation triplets dbpedia décrivent longueurs objectif évaluer temps chargement données ainsi temps exécution quêtes correspondantes différentes fractions triplets dbpedia utilisent types données personnalisés leurs équivalents décrit ontologie triplets leurs équivalents décrit notre données length découvrable volée lindt experiments décrit requêtes exécutées contient matériel reproduire expérimentations ainsi résultats bruts résultats montrent temps chargement données proches pénalité moyenne découverte données autre données meilleures performances concerne temps évaluation requêtes ailleurs concises conclusion types données personnalisés utilisés données facilitent interopérabilité pouvaient supportés manière générique ciliterait publication données domaines difficile représenter types données standards avons proposé principes permettraient github thesmartenergy support uniforme types données personnalisés sparql éditeurs données publier définition types données personnalisés moteurs moteurs requête sparql découvrir volée types données personnalisés utiliser accomplir opérations manière uniforme avons proposé première implémentation principes démontrer applicabilité résumé évaluation notre approche données réelles dbpedia certaines directions possibles recherches mentionnées corps article souhaitons également développer librairie types données initier adoption notre approche grande échelle remerciements travail partiellement financé projet itea2 12004 smart energy aware projet opensensingcity convention bilatérale recherche engie références cyganiak lanthaler concepts abstract syntax recommendation february recommendation hayes patel schneider semantics recommendation february recommendation hodgson keller hodges spivak quantities units dimensions types ontologies technical report lefrançois zimermann supporting arbitrary custom datatypes sparql proceedings extended semantic conference perry herring geosparql geographic query language implementation standard geospatial consortium working group ontology language document overview second edition recommendation december technical report summary literals terminal nodes model where encoded actual decimals ˆˆxsd decimal dates ˆˆxsd other information apple green color sparql engines equality compare literals whose datatype which decimal datatype unknown color there direct means discover semantics paper tackles publishers publish definition arbitrary custom datatypes generic sparql engines discover operations uniformly discuss different possible solutions leverage principles describe simple based dereferencing javascript arbitrarily complex custom datatypes