E33Optimisation performances entrepôts données NoSQL colonnes Mohamed Boussahoua Boussaid Fadila Bentayeb Université Université avenue Pierre Mendes France 69676 Cedex France mohamed boussahoua boussaid fadila bentayeb lyon2 Résumé modèle NoSQL orienté colonnes propose schéma flexible hautement dénormalisé article proposons méthode implantation entrepôt données système NoSQL colonnes Notre méthode basée stratégie regrou pement attributs issus tables faits dimensions forme familles colonnes utilisons algorithmes means évaluer notre méthode avons effectué plusieurs tests benchmark NoSQL orienté colonnes Hbase architecture MapReduce plateforme Hadoop Introduction entrepôts données jouent important collecte analyse grandes masses données décision Généralement souvent implémentés systèmes gestion bases données relationnelles SGBDR derniers imposent richesse leurs fonctionnalités performances leurs requêtes Cependant appropriés construire entrepôts distribuées nécessaires faire augmentation volume données scalabilité espace stockage Leavitt exécution requêtes décisionnelles dégrade performances entrepôts données SGBDR améliorer performances entrepôts données relationnels différents recherche existent portent notamment techniques indexation fragmentation compression données manière nécessaire recourir nouvelles solutions stockage fiables moindre systèmes décisionnels distribués Parmi solutions citer plateforme Hadoop comprend différents modules Apache système entreposage données interface Apache nouveaux modèles données NoSQL apparus dernières années impul grands acteurs Google Yahoo Facebook Twitter Amazon aussi relationnels appuient théorème Consistency hadoop apache apache wikipedia NoSQL Optimisation performances entrepôts NoSQL colonnes Availability Partition Tolerence Brewer offrent grande flexibilité représentation gestion volumes données serveurs stockage distribués travaux focalisent modélisation implémentation entrepôt données selon modèle NoSQL orienté colonnes entrepôts relationnels construction nécessite accès attributs tables faits dimensions conséquent sélectionner colonne analyse charger toute table dimension concernée Contrairement systèmes lationnels modèle NoSQL colonnes possible accéder uniquement colonne souhaitée charger mémoire facilite application fonction agrégation article intéressons techniques regroupement attributs constitution familles colonnes Notre objectif obtenir ensembles attributs homogènes permettant accroître performances requêtes décision nelles proposons alors stratégie regroupement attributs partir charge initiale requêtes utilisant algorithmes heuristique occurrence Optimisation Essaim Particulaire algorithme fouille means avons étudié performance requêtes décisionnelles comparant résultats obtenus exécutant celles entrepôt construit selon notre approche autres entrepôts construits selon autres méthodes groupement ensemble attributs tables faits dimensions famille colonnes chacune tables faits dimensions correspond famille colonnes réaliser expérimentations avons utilisé essai Transaction Processing Council Decision Support conçu mesurer perfor mances entrepôts données relationnels avons étendu charge requêtes initiale obtenir schéma regroupements attri significatif tests montrent méthodes regroupement means améliorent façon significative temps exécution requêtes décision nelles entrepôt Column NoSQL Warehouse nombre familles colonnes compris entre résultats également valables comparaison autres méthodes papier organisé comme Section présente travaux portant développement entrepôts données selon modèle NoSQL orienté colonnes Section détaille problématique accès données entrepôt systéme NoSQL colonnes Section détaillons approche proposée Section présente évaluation notre approche Enfin concluons article présentons quelques perspectives section bases données NoSQL colonnes caractérisées schéma données libre modèle logique favorisant dénormalisation définition Benchmark tpcds Boussahoua reste tâche délicate Plusieurs travaux recherche consacrés auteurs proposent approche transformer schéma données relationnelle schéma NoSQL orientée colonnes HBase schéma relationnel restructuré grande table chaque table relationnelle devient famille colonnes auteurs Abelló présentent trois méthodes construire partir entrepôt implémenté HBase auteurs recouru dénormalisation schéma entrepôt défini famille colonnes chaque attribut première méthode proposent utiliser paradigme pReduce manière naïve aucune optimisation bénéficier puissance HBase parcourir données construire inconvénient taille importante données manipulées interrogation résoudre problème auteurs proposent utiliser seconde méthode indexes niveau valeurs colonne inconvénient nombre important blocs données parcourus amenés ainsi utiliser troisième méthode index bitmap comme index supplémentaire réduire davantage nombre valeurs parcourues réaliser accès direct blocs données travaux Dehdouh proposent méthodes implantation cubes modèle NoSQL colonnes auteurs développé essai décisionnel NoSQL colonnes CNSSB Columnar NoSQL Schema Benchmark Schema Benchmark représenter tables faits dimensions système NoSQL colonnes auteurs proposé Dehdouh trois approches savoir Normalized Logical proach tables faits dimensions stockées séparément différentes tables Denormalized Logical Approach processus favorise dénormalisa schéma conceptuel dimensionnel regroupe faits dimensions table unique appelée BigFactTable chaque famille colonnes composée attribut Denormalized Logical Approach using Column Family encapsuler tables faits dimensions table chacune devient famille colonnes traveaux Chevalier auteurs présenté approche basée régles transformation modèle conceptuel multidimensionnel modèle logique NoSQL orienté colonnes orienté documents proposent alors trois modèles implémenter entrepôt donnée HBase simple model attributs tables faits dimensions combinés table seule famille colonnes avantage modèle regrouper table attributs faits famille colonnes chaque dimension famille colonnes distincte shattered model chacune tables faits dimensions correspondrait table seule famille colonnes Scabora auteurs orientent modèle données NoSQL orienté colonnes résoudre problème distribution attributs entre milles colonnes optimiser requêtes faciliter gestion données faire implémenté données entrepôts table HBase composée familles colonnes première réunit attributs faits dimensions Optimisation performances entrepôts NoSQL colonnes fréquemment interrogés deuxième regroupe attributs autres dimensions pendant auteurs utilisent techniques regroupement Définition problème implémentation entrepôt données système NoSQL colonnes prend compte spécificités environnement stockage physique données Rappelons dernières organisées familles colonnes composées ensemble attributs Ainsi principe partitionnement vertical figure montre exemple représentant table attributs familles colonnes Chaque famille consiste ensemble attributs ayant chacun valeur chaque ligne données référencée ligne Stockage orienté colonnes table réalité point stockage figure toutes données faisant référence ligne Rowkey stockées ensemble famille colonnes agissant alors comme chacune colonnes ligne comme ensemble attributs enregistrement relationnel terme remarquer cette technique stockage éléments influent vitesse exécution requêtes choix colonnes celui lignes requête portant exemple valeurs attributs table parcourue niveau familles colonnes recherche partitions données différentes balayage complet valeurs attribut concerné nécessite alors temps exécution élevé atteindre valeurs Cependant implémentation entrepôts données selon modèle NoSQL colonnes méthodes dénormalisation regroupe données faits celles dimensions table impose duplication données dimensions chaque instance minimise avantage regroupement attributs familles colonnes éviter accès plusieurs familles colonnes plusieurs données balayage complet toutes données important proposer regroupement données plutôt approprié besoins utilisateurs implémentations NoSQL habituelles exécutent entièrement memory générant ainsi Celui particulièrement élevé selon importance volume données problème construction Boussahoua table savoir comment définir nombre seuil familles colonnes bonne stratégie regroupement attributs discuterons section suivante approche proposée implantation entrepôts données selon modèle NoSQL orienté colonnes Regroupement colonnes familles Principe Notre méthode implantation entrepôt relationnel schéma étoile flocon neige selon modèle logique NoSQL orienté colonnes appuie cessus suivant extraction attributs tables faits dimensions regroupement attributs construction familles colonnes selon means génération schéma métadonnées entrepôt données modèle NoSQL colonnes fonction regroupements obtenus préparation données chargement entrepôt Processus automatique implémentation entrepôt selon NoSQL colonnes Formalisation entrepôt données défini tables dimension table faits attributs Chaque table dimension composée plusieurs attributs varier dimension autre considérons également ensemble requêtes Celles exploitent totalité schéma entrepôt Optimisation performances entrepôts NoSQL colonnes opérations sélection jointure agrégation COUNT Chaque requête contient ensemble attributs ensemble familles colonnes généré nombre familles colonnes défini contrôler nombre maximum familles colonnes créer seuil priori Extraction attributs tables faits dimensions Notre technique implantation entrepôt selon modèle NoSQL colonnes processus automatique figure analyse statistique requêtes fréquentes appuie informations qualitatives quantitatives utilisation données Celles portent relations ensemble attributs tuples accédés prédicats portant attributs requêtes nombre requêtes lecture fréquence exécution requête partir duquel requête exécutée capacité stockage transfert données entre sites Cette première étape consiste alors traiter ensemble attributs présents clauses Select Where relatifs charge requêtes construire matrice usage attributs matrice affinités faire sommes inspirés travaux Navathe derniers utilisent principe affinités entre attributs concevoir groupes attributs Construction familles colonnes cette étape notre objectif définir schéma logique NoSQL trepôt optimise mieux accès données requêtes Notre solution consiste mettre œuvre processus visant regroupement attributs fréquemment interrogés ensemble regroupement permettra former familles colonnes composant schéma logique entrepôt NoSQL avons choisi utiliser types algorithmes heuristique développée Eberhart algorithme means MacQueen Notre choix utiliser algorithmes means motivé puisse contrôler nombre classes familles colonnes means avère avantage moment voulons limiter nombre familles colonnes offre possibilité contrôler nombre attributs groupe famille colonnes avoir avantage means construire familles colonnes nombre attributs équilibrer charge Optimisation Essaim Particulaires algorithme inspiré essaims insectes animaux leurs dépla cements groupes trouver nourriture départ essaim réparti hasard espace chaque particule ayant vitesse aléatoire Ensuite parti cules déplacent espace recherche basant informations limitées chaque particule décider prochain mouvement nouvelle Boussahoua vitesse faire combine linéairement trois informations vitesse tuelle meilleure performance chaque particule capable évaluer qualité position garder mémoire meilleure performance meilleur point lequel passée meilleure performance voisines formatrices chaque particule interroger proches voisines connaître leurs meilleures performances décider déplacement algorithmes particules peuvent appliquer aussi données discrètes continues Adaptation algorithme regroupement Attributs Notre problème défini ensemble attributs nombre total requêtes fréquentes fréquence accès requête nombre maximum familles colonnes nombre attributs famille colonnes ensemble contraintes physiques nombre nœuds cluster capacité stockage nœuds espace mémoire utilisé machines taille entre ensemble toutes solutions réalisables nombre maximum itérations ensembles finis attributs fonction objectif prend valeurs problème consiste trouver solution optimisant valeur fonction objective élément fonction objectif minimiser fonction objectif permet mesurer qualité solutions obtenues après chaque itération Notre fonction inspire travaux Derrar consistent évaluer phase conception pertinence schémas partitionnement générés Initialement cette fonction calculée utilisant erreur carrée Square Error tenant compte fréquences accès requêtes attributs différents groupes erreur carrée schéma global partitionnement relation calcule comme nombre attributs groupe schéma partitionnement accédé requête trouver solution optimale utilisons algorithme exploite fonction objectif Cette fonction évalue chaque itération rithme erreur carrée schéma généré itération déterminer schéma minimise valeur ensemble contraintes cette fonction définie comme Optimisation performances entrepôts NoSQL colonnes Application means regroupement attributs algorithme prend entrée ensemble points entier problème consiste diviser points groupes minimisant somme carrés tances entre points groupe centre points alors attributs leurs distances affinités means prend entrée matrice affinités attributs nombre clusters retourne familles colonnes Implémentation expérimentations Protocole expérimental avons développé outil nommé Transformation Automatique Entrepôt Données Relationnel NoSQL orienté Colonnes langage programmation implémente méthodes means Entrepôt données utilisons benchmark implémenté PostgreSQL Celui tests performance modélise plusieurs aspects opérations commerciales lesquels données correspondent trois modes vente magasin catalogue Internet utilise schéma constel lation composé tables dimensions tables faits notre utilisons table faits store_sales tables dimensions générateur données DSDGEN permet générer fichiers données fichier différentes tailles selon facteur échelle Scale Factor chaque fichier correspond table faits table dimension avons produire données requêtes cluster noeuds Charge requêtes benchmark propose requêtes avons sélectionné charge composée requêtes distinctes exploitent table faits Store_sales dimensions Elles organisées selon nombre tables faits dimensions parcourues requêtes nombre dicats sélection définis différents attributs tables faits dimen sions requêtes concernées classées catégories nommées respectivement Configuration expérimentale mener expérimentations avons place environnements stockage premier relationnel distribué consiste machine intel 4790S disque celle fonctionne système exploitation Ubuntu utilisée comme serveur PostgreSQL dédié stockage entrepôt données relationnel deuxième environnement stockage NoSQL distri cluster ordinateurs composé serveur maître NameNode machines esclaves DataNodes NameNode équipé processeur Intel GHZx4 mémoire disque DataNodes équipés processeur Intel 2400M espace disque machines fonctionnent Ubuntu version avons utilisé version Hadoop Boussahoua NoSQL orienté colonnes HBase Hadoop2 dédié gestion environnement distribué simplifier manipulation données augmenter performances HBase avons renforcé cette configuration couche dédiée HBase appelée Phoenix utiliser cette dernière interroger données HBase avons utilisé client appelé SQuirreL interface graphique outre machine NameNode configurée jouer master server système Zookeper HBase autres machines DataNodes considérées comme Region Servers HBase Chargement transfert données processus complet chargement transfert données modèle relationnel modèle relationnel présenté figure connexion entre systèmes gestion données grâce connecteur Celui présent HBase relationnel utilisé transférer efficacement données PostgreSQL HBase avons intégré toutes fonctionnalités Sqoop Hadoop notre outil avons opéré import Sqoop transfert lignes données spécifiant ainsi colonnes intermédiaire avons créée Celle totalement dénormalisée composée semble attributs données appartenant cette proviennent table faits Store_sales instances associées chaque dimension Customer Customer_demographics Customer_address House hold_demographics Promotion Store Income chaque ligne données identifiée correspond ordre séquentiel croissant registrements données table faits Cette dernière contient enregistrements cette utilisée comme ligne Row_Key table données HBase Processus chargement transfert données Résultats expérimentaux avons choisi méthodes construction familles colonnes semble attributs tables faits dimensions famille sqoop apache Optimisation performances entrepôts NoSQL colonnes colonnes approche Plate chacune tables faits dimensions corres pondrait famille colonnes approche Naïve familles déterminées selon regroupement obtenu algorithme familles colonnes obtenues algorithme means exécution means avons utilisé attributs chaque exécution avons varier seuil nombre means entre familles colonnes chacune riations correspond schéma différent entrepôt données avons exécuté toutes séries requêtes différents schémas entrepôt NoSQL issus quatre configurations décrites dessus schémas obtenus implémentés HBase données manque place pouvons présenter discuter article résultats obtenus avons choisi présenter expérimentations série mesurer impact nombre familles colonnes temps exécution requêtes notamment requêtes Nombre familles colonnes parcourues temps exécution Naïve Nombre familles colonnes parcourues temps exécution Naïve means Discussion partir figures constatons temps exécu varie schéma entrepôt autre méthode donne meilleurs résultats temps exécution secondes schéma requête porte valeurs attributs familles colonnes parcourues ayant petite taille données regroupement attributs équilibré Cependant algorithme means temps élevé entre augmentation combinaisons rations sélection filtrage agrégation entre familles colonnes parcourues requête déterminer ensemble prédicats considérer identifier leurs attributs évident opérations représentent contrainte supplémentaire phase traitement données niveau mémoire schémas entrepôt requête appel familles colonnes homogènes regroupement attributs déséquilibré ayant tailles données grandes Boussahoua petites récupérer données résultats intermédiaires traitements système HBase exploite nombre important blocs données HFile correspon différentes familles colonnes blocs dispersés plusieurs noeuds cluster pénalise résultats intermédiaires nécessite consé quent temps exécution élevé autre constatons aussi méthode means temps exécutions observés toutefois proches varient entre schémas sollicite variation familles colonnes ayant tailles données moyennes permet entre autre réduire surcharge données niveau mémoire traduit temps exécution moins élevé rapport revanche méthode Naïve temps exécution requête nécessite explique celle exploite moins combinaisons opérations familles colonnes ayant tailles données différentes attributs taille grande autre attributs taille moyenne présente certain équilibre entre semble données traitements associés niveau mémoire permet réduire temps exécution requête terminer résultats montrent interdépendance entre variation nombre familles colonnes parcourues requête taille données remarquons aussi méthode présente meilleures performances lorsque pensons prend compte choix taille familles colonnes éviter situations pénalisent temps traitement requêtes nécessaire définir nombre maximum attributs familles colonnes Conclusion article avons présenté approche conception entrepôt données NoSQL colonnes cluster plusieurs nœuds avons procédé regroupements attributs familles colonnes pertinentes utilisant méthodes fouille means permis obtenir performance traitement requêtes décisionnelles avons développé outil cadre transformation entrepôt relationnel entrepôt NoSQL colonnes avons plusieurs expérimentations selon familles colonnes résultats obtenus confirment intérêt regrouper colonnes familles tenant compte besoins utilisateurs planifions suite étudier stratégies partitionnement placement intentionnels blocs données entrepôt NoSQL colonnes différents nœuds cluster Références Abelló Ferrarons Romero Building cubes mapreduce Proceedings International Workshop Warehousing DOLAP Optimisation performances entrepôts NoSQL colonnes Brewer Towards robust distributed systems abstract Proceedings Nineteenth Annual Symposium Principles Distributed Computing Chevalier Malki Kopliku Teste Tournier Entrepôts données multidimensionnelles nosql Dehdouh Bentayeb Boussaid Kabachi Using column oriented nosql model implementing warehouses Parallel Distributed Processing Techniques Applications PDPTA Dehdouh Boussaid Bentayeb Columnar nosql schema bench Model Engineering Springer Derrar Boussaïd Ahmed Nacer Répartition données entrepôt basée optimisation essaim particulaire Eberhart Kennedy optimizer using particle swarm theory Proceedings sixth international symposium micro machine human science Volume Leavitt nosql databases their promise Computer Transforming relational database hbase study Software Engineering Service Sciences MacQueen methods classification analysis multiva riate observations Proceedings fifth Berkeley symposium mathematical statistics probability Volume Oakland Navathe Wiederhold Vertical partitioning algorithms database design Transactions Database Systems Scabora Brito Ciferri Ciferri Physical warehouse design nosql databases query processing hbase Inter Enterprise Information Systems XVIII Systems Technologies Information Control Communication INSTICC Summary NoSQL Column Oriented model offer flexible highly normalized database schema paper propose method transforms relational house NoSQL distributed columns multi cluster method based strategy grouping attributes tables dimensions columns purpose algorithms first heuristic algorithm Particle Swarm Optimization second means algorithm evaluate method benchmark conducted several tests evaluate these algorithms generation families columns partitions NoSQL Column Oriented Hbase MapReduce paradigm Hadoop distributed system