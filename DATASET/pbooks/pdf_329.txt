Extraction motifs graphes orientés attribués présence automorphisme Claude Pasquier Frédéric Flouvat Jérémy Sanhes Nazha Selmaoui Folcher Université Nouvelle Calédonie 98851 Nouméa Nouvelle Caledonie frederic flouvat jeremy sanhes nazha selmaoui Institut Biologie Valrose UMR7277 INSERM U1091 06108 cedex claude pasquier unice unice Résumé graphes orientés attribués graphes orientés lesquels nœuds associés ensemble attributs nombreuses données monde peuvent représentées structure encore algorithmes capables traiter directement fouille graphes attribués difficile nécessite combiner exploration structure graphe identification itemsets fréquents explosion combinatoire itemsets isomorphismes graphes présence impacte énormément performances algorithmes fouille beaucoup nombreux graphes étiquetés article présentons nouvelle méthode fouille données permet extraire motifs fréquents partir plusieurs graphes orientés attribués montrons comment réduire explosion combinatoire provoquée isomorphismes graphes traitant manière ticulière motifs automorphes Introduction graphes orientés structures adaptées modélisation grand nombre données complexes présentes monde réseaux régulation génétique exemple graphes orientés nœuds représentent gènes relations inhibition activation modélisé graphe orienté lequel nœuds pages liens hypertextes circulation emails organisation graphes sociaux lesquels individu suivre activités autres personnes réseaux citations lesquels article autres articles également représentés graphes orientés nombreuses applications structures beaucoup étudiées théorie graphes récemment contexte fouille données plupart Extraction motifs graphes orientés attribués présence automorphisme travaux portent graphes étiquetés nœuds associés unique étiquette Cependant graphes modélisant données réelles nœuds représentent objets peuvent associés nombreuses caractéristiques graphes lesquels nœuds annotés ensembles attributs itemsets appelés graphes attribués heure actuelle encore travaux consacrent analyse problèmes phares abordés fouille graphes étiquetés concerne tification graphes apparaissent fréquence minimum spécifiée isateur motifs récurrents peuvent apporter éclairage particulier manière nœuds organisés Fouiller graphes attribués grand intérêt permet identifier motifs structurels également mettre évidence liens entre attributs nœuds raisons principales rendent fouille graphes attribués difficile premier nécessaire combiner manière triviale exploration structure graphe identification itemsets fréquents associés nœuds seconde raison comme fouille graphes étiquetés performances impactées présence graphes isomorphes Comme indiqué graphes creux labels diversifiés nombre graphes isomorphes plupart temps faible graphes attribués combinatoire itemsets génère fréquemment nombre important isomorphismes graphes contributions notre travail suivantes présentons fouille structures fréquentes plusieurs graphes attribués orientés montrons comment identification motifs fréquents réalisée adoptant stratégie exploration arbre couvrant chaque définissons nouvelle forme canonique adaptée parcours espace recherche détail manière étendre motifs réentrants traitons prise compte cycles analysons particulier motifs automorphes trons comment explosion combinatoire provoquée isomorphisme graphes considérablement limitée Avant conclure présentons résultats obtenus analysant plusieurs données artificiels réels algorithme AADAGE Automor phism Aware Directed Attributed Graph Explorer avons développé nombreux algorithmes proposés fouiller graphes étiquetés quasi totalité solutions proposées découlent techniques développées fouille itemsets basées consiste explorer espace solutions faisant grossir graphes candidats éliminant motifs infréquents Agrawal Jiang méthodes différencient manière parcourir espace recherche éviter génération solutions redondantes effet contrairement fouille itemsets facile générer toutes solutions manière unique fouille graphes fréquent construire plusieurs motif méthodes privilégiées éviter explorer plusieurs partie espace recherche ajouter nœuds motifs candidats manière ordonnée utiliser représentation canonique graphes jacente Pasquier utilisation formes canoniques étendre seule solutions isomorphes éviter effectuer tests coûteux isomorphisme complets représentation canon adaptée manière étendre graphes choisie Cette forme canonique permet décider rapidement motif examiné étendu lution utilisée créer séquence contenus graphe ordre ajoutés Borgelt Exemple graphe étiqueté orienté motifs présents graphe nombres affichés indiquent ordre création utilisation formes canoniques permet éviter explorer plusieurs graphe dispense nécessité identifier toutes manières générer motifs Ainsi ordonne nœuds ordre lexicographique leurs étiquettes motif figure canonique présent graphe initial motifs aussi canoniques peuvent générés façons férentes graphe initial manières possibles choisir nœuds parmi étiquetés nécessaire tenir compte toutes formes figuration choisie conditionne extensions futures motif exemple possibilité étendre chacun nœuds étiqueté motifs possèdent breux isomorphismes graphes graphe analysé posent difficultés algorithmes existants problème isomorphismes graphes complet motifs possèdent automorphismes posent problèmes contribuent manière importante dégradation performances algorithmes nombre isomorphismes graphes graphe initial augmenté graphes étiquetés creux nombre reste toutefois relativement raisonnable contraire graphes attribués puisque plusieurs attributs associés nœuds probabilité observer graphes partageant plusieurs attributs identiques grandement augmentée problème devient alors présent manière contourner éliminer graphe items fréquents prive motifs contenant attribut compris certains peuvent potentiellement intéressants Certaines études traitent spécifiquement analyse graphes lesquels nœuds associés itemsets comme travaux Miyoshi Fukuzaki problèmes abordés études différents notre traitent analyse graphes orientés rechercher graphes partageant mêmes itemsets notre travail cherchons identifier présence récurrente certains attributs associés nœuds connectés objectifs notre travail proche fouille Extraction motifs graphes orientés attribués présence automorphisme séquence arbres attribués précédent étude Pasquier avons travaillé identification structures reflétant évolutions itemsets Cependant algorithme avions proposé appliquait données prenant forme arbres attribués Concepts généraux définition problème cette section introduisons concepts définitions nécessaires présentons problème fouille graphes attribués orientés Préliminaires ensemble items itemset ensemble considérons items appartenant itemset triés selon ordre lexicographique peuvent accédés index référencer deuxième graphe attribué orienté ensemble items consiste ensemble nœuds ensemble orienté fonction associe ensemble items chaque notation représente ensemble parties parent existe cycle graphe orienté chemin trouvé entre graphe attribué orienté enraciné trouver existe chemin entre importe autre graphe graphes attribués isomorphes existe bijection telle automorphisme isomorphisme lequel graphe attribué graphe attribué existe correspondance telle Chaque graphe attribué isomorphique définit plongement embedding anglais noter certains plongé plusieurs effectuant permutations correspondance nœuds Définition problème données analyser disponibles forme données graphes orientés attribués forme unique graphe orienté attribué nécessairement connexe premier possible calculer chaque motif identifié fréquence transaction donnée nombre graphes lesquels graphe attribué second utilisons mesure fréquence définie Bringmann Nijssen égale nombre minimal occur rences chacun nœuds motif pouvons cette mesure calculer fréquence relative donnée fréquence absolue divisée nombre nœuds graphe considérons motif fréquent fréquence supérieure égale seuil minimum problème consiste énumérer motifs fréquents présents données Pasquier Forme canonique graphes orientés attribués forme canonique utilisons basée séquence liste nœuds ordre lequel ajoutés arbre couvrant graphe effectuant parcours profondeur abord identifier manière biguë chaque arbre couvrant suffisant identifier chaque attributs profondeur Comme devons également représenter liens réentrants utilisons troisième attribut contient index pointé celui présent motif Ordre portant itemsets notre application nœuds associés itemsets convient définir ordre total itemsets Etant donné itemsets Ordre portant nœuds triplet représente profondeur arbre couvrant représente ensemble items associés utilisé première numéro ordre celui présent motif comparer nœuds suffit comparer leurs codes forme triplets assertions suivantes vraie Exemple quatre motifs isomorphes nombres affichés indiquent ordre création Ordre portant graphes attribués Étant donné motifM racine définissons racine motif obtenu concaténant codes nœuds présents motif ordre lequel ajoutés forme canonique graphe attribué déterminée simplement sélectionnant petit motifs représentés respectivement codes assertions suivantes vraie Extraction motifs graphes orientés attribués présence automorphisme figure présente quatre motifs isomorphes graphe orienté attribué Leurs codes respectivement représentés séquences suivantes utilisant ordre triplets définie précédemment trouve motif forme canonique Parcours espace recherche items présents graphe départ listés constituent motifs initiaux progressivement étendus arbre recherche construit utilisant ordre défini précédemment graphes orientés attribués effectuant parcours profondeur abord Enumération arbres couvrants utilisation stratégie définie Pasquier permet énumérer arbres couvrants génération nouveaux motifs effectuée extension nœuds figurant chemin droite motif examiné rightmost extension types extensions possibles extension itemset permet ajouter nouvel itemset associé terminal droite extension structure consiste ajouter nœuds composant chemin droit méthode complète générer motifs redondants prennent forme arbres isomorphes chaque génération motifs canoniques écartés inconvénient cette approche permet trouver motifs enracinés Identification motifs canoniques automorphes graphes défini précédemment possède comme plupart codes utilisés algorithmes fouille graphes propriété suivante chaque préfixe canonique canonique extension motif change ordre triplets génération motif canonique Ainsi chaque motif canonique obtenu ajoutant nouveau triplet ajoutant itemset associé dernier triplet utilisant stratégie extension chemin droit possible vérifier canonicité motif testant nœuds appartenant chemin droit fonctions appliquées retournent respectivement dernier avant dernier possible déterminer canonicité motif manière suivante nœuds composant chemin droit alors motif forme canonique manière assez identifier extensions Pasquier produisent motifs automorphes existe noeud chemin droit motif alors motif possède automorphismes motif appelle séparation chemin droit proche racine possède Ainsi motifs illustrés figures possèdent automorphismes figures séparation Prise compte liens réentrants partir stratégie énumération arbres couvrants décrite précédemment possible définir méthode permettant énumérer graphes identifier lorsqu extension structurelle ajoute présent motif examiné Lorsque produit ajouté motif comme agissait extension structurelle normale indique réutilisation présent mémorisant index pointé exploration espace recherche stoppée partir effet notre stratégie exploration sommes certains nœuds faisant partie chemin droite motif examiné étendus phase génération cours Toutes structures faisant partie chemin droite quant elles complètement explorées Concrètement réutilisation présent reflétée graphe ajout triplet référence autre triplet génère aucun changement concernant propriétés complétude méthode manière éliminer formes canoniques Graphe Motif Motif Motif Illustration élagage motifs minimaux cycle Prise compte cycles extension motif donner création cycle seulement ajouté pointe nœuds présents chemin droit Lorsqu cycle procède manière autres liens réentrants ajouté index réutilisé extensions partir stoppées complétude méthode affectée cette opération cepen problème niveau redondance solutions réutilisé racine motif nombreux graphes isomorphes générés débutant exploration partir autres nœuds appartenant chemin droit Extraction motifs graphes orientés attribués présence automorphisme résolvons problème générant motifs ayant racine nœuds chemin droit comparant codes motifs ainsi obtenus choisissons comme motif canonique petit continuons exploration motif figure représente motif trouvé graphe racine motif vient ajouté cycle cycle composé nœuds appartenant chemin droit motif enraciné connu reste générer autres motifs fixant arbitrairement racine motifM2 motifM3 motif petit évidemment celui enraciné stoppons exploration motif Traitement motifs automorphes utilisation formes canoniques permet élaguer espace recherche cette timisation utilisée notre algorithme Cependant permet résoudre problème présence motifs automorphes motif extension droit extension itemset extension chemin droit extensions canoniques extensions canoniques Illustration extensions motif canonique possédant automorphismes Prenons exemple graphe orienté attribué représenté figure graphe contient plusieurs structures automorphes rendent élagage utilisation formes canoniques moins opérant Lorsque motif illustré figure analysé conservé étendu puisqu forme canonique motif obtenu douze façons différentes algorithme consiste chacune formes étendre motif utilisant comme défini précédemment extension itemset extension structure extension itemset génère motif illustré motif forme canonique écarté extension structure partir génère motifs décrits motif obtenu forme canonique écarté seule opération permet générer motif canonique extension structure partir séparation Lorsque identifie nouveau motif possédant automorphismes pourra faire extension dernier nœuds situés après séparation effet séparation Pasquier importe quelle extension effectuée motif racine rendra inférieur motif canonique pouvons utiliser éviter générer inutilement motifs première optimisation impact limité seconde optimisation consiste supprimer certaines manière obtenir motifs morphes permettent générer nouveaux motifs canoniques figure exemple motif obtenu façons différentes étendu ajout troisième séparation Quelle manière motif obtenu possibilités extension inchangées possible omettre solution conserver seule correspondance motif importe laquelle graphe présenté figure situation compliquée possible partir motif ajouter possible génération suivante appliquer importe extension nœuds chemin droit exemple pourrait particulier ajouter motifs possibles puissent générés conserver possibilités étendre motif nœuds parmi nœuds ayant formes différentes graphe situation souvent beaucoup moins simple déterminer quelles formes possible supprimer tâche facile éviter effectuer calculs portant structure graphe nuiraient performances algorithme choisit conserver seule forme parmi celles utilisant mêmes nœuds passe ainsi nombre formes déterminé nombre arrangements possibles nombre formes nombre combinaisons Cette solution optimale suffisante limiter explosion combinatoire configuration étoile laquelle possède étiquette existe manières différentes générer motifs inclus Après optimisation nombre chute Résultats expérimentaux méthode décrite article implémentée expéri mentations effectuées ordinateur Ubuntu processeur Intel CoreTMi5 10GHz mémoire temps exécution inclu phase prétraitement sauvegarde résultats données artificiels ensemble graphes orientés comprenant chacun nœuds générés programme Johnsonbaugh Kalin ensemble graphes servi création données graphes orientés attribués nommés lesquels nœuds associés itemsets taille variant simuler comme beaucoup donnés réels plupart attributs rares petit nombre fréquent avons attribué chaque valeur entière aléatoire distribuée suivant puissance concrètement avons utilisé distribution Pareto paramètre Extraction motifs graphes orientés attribués présence automorphisme Réseau citations PubMed Central PubMed Central données bibliographique articles scientifiques domaine sciences articles Source nombre seulement entre citent moins autre article Source avons construit graphe citations chaque représente article chaque citation attributs associés nœuds identifient article graphe creux puisqu contient cependant certains attributs retrouvent fréquemment associés ensembles nœuds connectés données Google Twitter avons utilisé données Google Twitter construits McAuley Leskovec chaque données représente individu attributs associés constituent caractéristiques cette personne existe entre personnes lorsque elles activité autre données conséquents nœuds Google nœuds Twitter Évaluation performances résultats notre algorithme présentés figure comparaison algorithmes existants possible graphes lesquels nœuds sociés seule étiquette données artificiel corresponde graphe étiqueté comparaison AADAGE implémentations gSpan isées cadre projet ParSeMiS Wörlein implémentation permet fouiller graphes orientés présentée figure algorithmes paramétrés énumérer ensemble graphes orientés enracinés connectés génèrent exactement mêmes motifs petites valeurs support stratégie filtrage mises correspondance permet faire différence gSpan données Google Twitter contiennent beaucoup nœuds beaucoup attributs surtout quelques attributs fréquents exemple attribut masculin présent nœuds seule présence génère tellement motifs échouer fouille figure attributs genre enlevés données Google Twitter modifié Malgré taille données Google fouillé fixant support minimum données Twitter pourtant modeste traité jusqu support caractéristique commune données traités relativement rapidement jusqu seuil précis correspondant prise compte nouvel attribut fréquent exploser nombre motifs données PubMed Central possible utiliser support faible permis identifier quelques motifs intéressants motif exemple concerne groupe articles annotés oncogène articles cités autres articles annotés rapamycin médicament immunosuppresseur élaboré cités articles annotés aging effets rapamycine sénescence cellulaire découverts inhibé rapamycine motif représente manière condensée cheminement certaines recherches portant vieillissement Pasquier Valeur support aadage gspan données artificiel Valeur support données artificiels Valeur support PubMed Central Données PubMed Central Valeur support Google Twitter Données Twitter Google Performances algorithme divers données Conclusion perspectives avons article présenté méthodes permettant fouiller graphes tribués orientés montré efficacité analyse plusieurs données sommes attachés configurations graphes lesquelles comme données réelles certains attributs partagés nombre important nœuds avons montré selon structure motif cours analyse toujours nécessaire étendre toutes formes prendre motif sommes intéressés particulière motifs automorphes existe autres motifs lesquels optimisations peuvent effectuées exemple lorsque motif figure possède automorphisme trouvé graphe figure assez facilement certaines mises correspondance peuvent écartées sommes convaincus analyse détaillée motifs leurs mises correspondance révéler autres figurations permettant réduire espace recherche ainsi traiter données importants denses piste avons objectif explorer Remerciements travail financé contrat FOSTER Extraction motifs graphes orientés attribués présence automorphisme Références Agrawal Imielin Swami Mining association rules between items large databases SIGMOD Borgelt Canonical forms frequent graph mining Decker Advances Analysis Springer Berlin Heidelberg Bringmann Nijssen frequent single graph PAKDD Muntz Nijssen Frequent subtree mining overview Fundam Fukuzaki Kashima Finding itemset sharing patterns large itemset associated graph PAKDD Prins Efficient mining frequent subgraphs presence isomorphism Jiang Coenen survey frequent subgraph mining algorithms Knowledge Review Johnsonbaugh Kalin graph generation software package SIGCSE McAuley Leskovec Learning discover social circles networks Neural Information Processing Systems Miyoshi Ozaki Ohkawa Frequent pattern discovery single graph quantitative itemsets ICDMW Pasquier Sanhes Flouvat Selmaoui Folcher Frequent Pattern Mining Attributed trees PAKDD Wörlein Meinl Fischer Philippsen quantitative comparison subgraph miners gspan gaston gspan Graph based substructure pattern mining Summary Attributed directed graphs directed graphs which nodes associated attributes world naturally represented structure algorithms directly handle these complex graphs Mining attributed graphs difficult because requires combining exploration graph structure identification frequent itemsets addition combinatorics itemsets subgraph isomorphisms whose presence significant impact performance mining rithms numerous labeled graphs paper present mining method extract frequent patterns directed attributed graphs reduce combinatorial explosion induced subgraph isomorphisms giving special treatment automorphic patterns