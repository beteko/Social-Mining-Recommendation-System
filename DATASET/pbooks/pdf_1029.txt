motifs séquentiels généralisés contraintes temps étendues Céline Laurent Maguelonne Teisseire Laboratoire Informatique Robotique Microélectronique Montpellier 34392 Montpellier Cedex laurent teisseire lirmm Résumé nombreux domaines recherche connaissances tempo relles appréciée techniques proposées aussi fouille données apprentissage extraire gérer telles connaissances associant également spécification contraintes temporelles nêtre temporelle maximale notamment contexte recherche séquentiels Cependant contraintes souvent rigides néces sitent bonne connaissance domaine extraire informations erronées pourquoi proposons approche basée construction graphes séquences prendre compte contraintes temps souples contraintes relâchées rapport contraintes temps précédemment proposées Elles permettent extraire motifs tinents guider analyse motifs obtenus proposons également niveau précision contraintes temporelles motifs extraits Introduction certain nombre domaines détection fraudes défaillances analyse comportements recherche connaissances temporelles seulement utile cessaire Certaines techniques apprentissage permettent gérer raisonner telles connaissances Allen notamment défini opérations règles associées intervalles temps techniques extraction connaissances cherchent quant elles extraire épisodes récurrents partir longue séquence Mannila Raissi bases séquences Agrawal Srikant Masseglia recherche telles informations devient autant intéressante permet prendre compte certain nombre contraintes entre évènements comme exemple durée minimale maximale séparant évènements cadre introduite recherche motifs séquentiels généralisés Srikant Agrawal Cette technique fouille données permet obtenir quences fréquentes respectant contraintes spécifiées utilisateur partir données séquences exemple achats successifs différents clients supermar Différents algorithmes proposés gérer contraintes directement motifs séquentiels généralisés contraintes temps étendues processus extraction Srikant Agrawal traitement séquences proposé Graph Constraint Masseglia Toutefois méthodes efficaces robustes elles principal inconvénient spécifiées utilisateur nécessitent bonne connaissance priori durées spécifier peine obtenir connaissances pertinentes travaux proposés déterminer manière automatique fenêtre optimale servation recherche épisodes séquence Meger Rigotti difficilement adaptables extraction motifs séquentiels domaine aucun notre connaissance propose détermination automatique contraintes temps optimales ailleurs certaines applications pourrait également intéressant souplir contraintes spécifiées experts domaine compléter leurs connais sances Enfin nombre motifs séquentiels extraits selon contraintes temps utilisés rapidement devenir important analyse efficace mesure mettant exploitation motifs séquentiels généralisés serait grande utilité pourquoi proposons étendre contraintes temps proposées traction motifs séquentiels généralisés utilisant certains principes théorie ensembles flous Notre méthode permet effet partir contraintes temps initiales degré respect valeurs extraire motifs séquentiels respectant contraintes étendues fournir chacun précision temporelle offrons ainsi lisateur flexibilité spécification contraintes ainsi outil analyse nombreuses séquences fréquentes extraites Après avoir présenté concepts fondamentaux associés motifs séquentiels séquentiels généralisés section présentons section notre définition contraintes temps étendues section présente notre proposition algorithme oeuvre gestion contraintes temps étendues prétraitement données section présente ensuite quelques expérimentations montrant faisabilité efficacité notre approche Enfin section conclut perspectives ouvrent travaux motifs séquentiels motifs séquentiels généralisés Motifs séquentiels motifs séquentiels initialement proposés Agrawal Srikant posent notion séquence fréquente maximale Prenons exemple données achats ensemble clients transaction triplet id_client id_date itemset caractérise client réalisé achat achat items achetés ensemble items itemset ensemble ordonné items séquence définit alors comme liste ordonnée itemsets notée séquence séquence taille composée items Exemple client achète produits selon séquence signifie abord acheté produit produits ensemble ensuite seulement produit finalement produit séquence séquence existe entiers incluse Exemple séquence séquence contre séquence inverse transactions regroupées client ordonnées chronologiquement finissant ainsi séquences données client supporte séquence incluse séquence données client support séquence alors défini comme pourcentage clients supporte séquence fréquente support moins valeur minimale minSupp spécifiée utilisateur recherche motifs séquentiels séquences telle consiste alors trouver toutes séquences maximales incluses autres support périeur minSupp Chacune séquences fréquentes maximales motif séquentiel Motifs séquentiels généralisés Telle introduite dessus notion séquence présente certaine rigidité nombreuses applications effet intervalle temps entre transactions cessives court pourrait envisager considérer comme simultanées inverse évènements éloignés peuvent avoir entre pourquoi séquence généralisée proposée Srikant Agrawal pallier restrictions introduisant prise compte contraintes temporelles contraintes nombre trois mingap durée minimale pecter entre itemsets successifs séquence maxgap écart maximal lequel doivent trouver itemsets successifs windowSize fenêtre laquelle items transactions différentes peuvent regroupés itemset modifie alors notion inclusion décrite précédemment tenir compte contraintes séquence données supporte séquence existe entiers donnant dates début itemsets windowSize mingap maxgap Exemple contraintes windowSize mingap maxgap séquences présentées séquence candidate supportent elles Client Client exemple apparaît regroupant trois premiers itemsets séquence client alors respecte contrainte motifs séquentiels généralisés contraintes temps étendues incluse séquence client client regroupant dates respecte trois contraintes incluse séquence client séquence client Représentation contraintes temps windowSize minGap maxGap séquences clients contraintes temps étendues cette section allons examiner œuvre contraintes temps analogie théorie ensembles flous ensuite proposer définition celle précision temporelle séquences soumises telles contraintes œuvre théorie ensembles flous introduite Zadeh autorise appartenance partielle classe gradualité passage situation autre Cette théorie constitue généralisation théorie ensembliste classique situations intermédiaires entre étant admises cadre objet appartenir partiellement ensemble temps complément considère exemple univers tailles possibles individu ensemble Petit Grand exemple défini fonction appartenance décrit degré lequel chaque élément univers considéré appartient degré étant compris entre Ainsi individu pourra grand petit exemple degré ensemble Grand ensemble Petit opérateurs logique floue généralisation opérateurs classiques consi notamment négation intersection union opérateur norme norme trian gulaire opérateur binaire intersection opérateur conorme conorme triangulaire opérateur union noterons opérateur généralisé Notre proposition extension contraintes temps motifs séquentiels fondée analogie théorie ensembles flous Ainsi souhaite simplement séquence respecte contraintes spécifiées permettre utilisateur relaxer contraintes jusqu certain seuil seuil correspond degré minimal satisfaction contraintes temporelles spécifié utilisateur chacune contraintes valeur initiale valeurs initiales contraintes windowSize minGap maxGap considère niveaux précision associés chacune elles niveaux étant compris entre indique alors souhaite parcourir ensemble valeurs possibles paramètre corres pondant utilisation degrés implique considérer plusieurs valeurs paramètres windowSize mingap maxgap alors possible considérer plusieurs chemins séquences achats clients reconstruire motif Cependant séquences respecte moins contrainte initiale évalué niveaux précision calcul détaillé paragraphe Extension contraintes temps définition contraintes temps étendues basée valeurs limites utiles différents paramètres peuvent prendre valeurs utiles correspondent valeurs limites desquelles pourra générer séquences candidates respectant contraintes Prenons exemple windowSize classique windowSize prend valeur condition signifie Reprenons ensemble clients chaque client transactions dates comprises entre Dcmin Dcmax contrainte impose alors considérant Dcmax Dcmin windowSize Dcmax Dcmin windowSize écart maximum clients entre dates minimales maximales sactions faire varier valeur windowSize entre valeur spécifiée valeur maximum utile peuvent alors présenter algorithme classique suffit compléter parcours effectués classique générer autres séquences candidates faire varier linéairement valeur windowSize entre comme montre valeur windowSize précision séquences générées donnée appartenance sinon valeur maximale windowSize seuil précision Variation précision selon valeur windowSize maxgap ainsi mingap détail calculs contraintes présentés 2005a Exemple Reprenons exemple cherche savoir séquence incluse séquences clients utilisant cette paramètres paramètre windowSize varie obtient windowSize prend successivement valeurs motifs séquentiels généralisés contraintes temps étendues windowSize retombe exemple incluse windowSize client respecte contrainte incluse toujours Précision temporelle séquence chacune séquences fréquentes trouvées processus extraction calcule précision laquelle chacune elles respecte contraintes temps définit précision séquence client comme degré respect simultané trois contraintes temps calculé norme chaque client cherche parmi toutes séquences achats occurrence respecte mieux contraintes temps utilisant conorme précision temporelle séquence client donnée ensemble degré respect contraintes temps donné moyenne degrés chacun clients Graph Extended Constraints algorithme proposé Masseglia permet transformer quence client graphe séquences respectant contraintes temps graphes séquences différents clients ensuite utilisés déterminer séquences quentes algorithme extraction motifs séquentiels Masseglia efficacité cette approche ayant démontrée Masseglia avons choisi inspirer développer nôtre proposons algorithme permettant construire graphe séquences contraintes temps étendues également calculer précision motifs séquentiels généralisés extraits algorithmes partir séquence entrée algorithme construit graphe séquences algorithme regroupe certain nombre fonctions addEdge propagate pruneMarked convertEdges détaillées présentées manière profondies 2005a commence créer sommets correspondant itemsets séquence ajoute ensemble sommets ensemble combinaisons itemsets permises selon différentes valeurs windowSize algorithme addWindowSize présenté parcourt chaque sommet détermine chacun entre quels autres sommets peuvent fusionnés Chaque sommet correspond Input séquence données Ouput graphe séquences associé ensemble sommets ensemble arêtes itemset faire newLevel addWindowSize first faire level begin faire contmg FALSE begin Alors sinon sommet inclus faire begin Alors contmg Sinon contmg FALSE Alors propagate faire included faire begin Alors addEdge Sinon pruneMarked convertEdges Retourner alors itemset itemset possède début begin sommets regroupés niveau itemsets permet tester respect contraintes niveau chaque sommet accède ensemble prédécesseurs sommet successeurs Ensuite chacun sommets graphe séquences ajoute respec contraintes minGap maxGap Ainsi chaque sommet cherche premier niveau accessible contrainte minGap begin chaque sommet niveau construit chaque sommet begin maxGap fonction addEdge permet éviter inclusions chemins grâce construction temporaires inclusions possibles algorithme addEdge construit entre sommets respectent contraintes temps minGap maxGap définitif sommets séquence inclusion leurs successeurs prédécesseurs construit temporaire devient définitif séquence forme maximale également exécution algorithme sommets inclus marqués pouvoir ensuite supprimés inutiles sommet atteindre niveau cause respect contrainte mingap utilise fonction propagate propager chacun sommets niveau inaccessible ajoute nécessaire respecte contraintes minGap maxGap entre chacun successeurs sommet Comme addEdge construit temporaires définitifs selon séquence construite motifs séquentiels généralisés contraintes temps étendues éventuellement incluse contraire aucune chance Enfin algorithme pruneMarked élimine sommets séquences incluses convertEdges supprime séquences incluses temporaire inclus successeur successeurs également successeurs alors existe séquence incluse supprimé Sinon indispensable obtenir toutes séquences maximales étant utilisé comme prétraitement prise compte contraintes temporelles extraction motifs séquentiels générer absolument toutes séquences issues séquence données ailleurs améliorer temps extraction nécessaire extraie séquences maximales avons montré 2005a algorithme construit exactement toutes séquences grande taille possible séquences respectant windowSize minGap maxGap Construction graphe séquences utilisons comme prétraitement prise compte contraintes temps étendues Masseglia extraction motifs séquentiels Cette approche générer élaguer utilise structure arbre prefixé organiser quences candidates permettre trouver efficacement ensemble candidats inclus séquence données utilisant ainsi graphe séquences obtenu vérification contraintes temps rendue inutile pendant parcours candidats seule inclusion devant vérifiée Cette méthode similaire celle proposée seglia permet optimiser extraction motifs séquentiels généralisés grâce parcours contraintes temps indépendant retour arrière arbre séquences candidates ainsi vérification moins combinaisons possibles Exemple dispose exemple paramètres suivants contraintes temps windowSize maxGap minGap Client Client Client exemple allons présenter construction graphe séquences séquence données client première étape consiste création ensemble sommets initiaux correspondants itemsets transactions présentés données deuxième étape consiste prendre compte windowSize dates différentes transactions créer sommets combinaisons grâce fonction addWindowSize troisième étape celle construction respectant contraintes minGap maxGap grâce algorithme principal ainsi fonctions propagate addEdge obtient graphe fonction pruneMarked supprime ensuite sommets Enfin temporaires convertis définitifs supprimés fonction convertEdges présente graphe séquences final Graphe séquence après deuxième étape prise compte mingap maxgap étendus Graphe séquences client Calcul précision temporelle séquence graphe séquences construit connaît toutes séquences autorisées contraintes temps celles interdites Cependant certaines séquences respectent contraintes fortes utilisateur alors autres construites appliquant contraintes étendues elles équivalentes calcule alors précision chemins séquences maximales affecte séquences composent déterminer appartenance chemin contraintes temps value chaque begin begin Chaque sommet valué windowSize précision séquence degré respect contraintes temps alors donnée formule Grâce algorithme valueGraph présenté graphe alors parcouru chaque sommet attribue luation begin chaque entre valuation begin begin Exemple partir données contraintes temps spécifiées exemple construit trois graphes séquences correspondants prenant minSupp obtient séquences maximales fréquentes Elles toutes support reste déterminer précision respect contraintes temps initiales chacun graphes séquences valué comme précisé section précédente sommets construits windowSize degré windowSize degré windowSize degré construits mingap degré mingap mingap concerne maxgap degré maxgap maxgap maxgap présente graphe valué séquence client utilise ensuite valuations calculer degré respect contraintes temps motifs extraits motifs séquentiels généralisés contraintes temps étendues Graphes séquences valués client Motifs séquentiels Calcul précision motifs séquentiels extraits Expérimentations expérimentations réalisées équipé processeur mémoire systèmes Linux noyau mesures comparer comportement rapport certaines comparaisons utilisons également implémentation intégrant gestion contraintes temps résultats présentés obtenus partir traitement plusieurs données synthétiques comportant environ séquences transactions moyenne Chacune transactions comportant moyenne items choisis parmi première étape consisté comparer temps exécution absence contrainte temps prenant windowSize minGap maxGap ainsi précision trois paramètres Ainsi avons comparer temps exécution notre algorithme figure montre comportement similaire celui temps exécution quasiment identiques motifs extraits mêmes avons ensuite répété mesures introduisant traitement contraintes temps toujours précision comparer comportement gestion contrainte temps étendues montre évolution temps extraction fonction valeur windowSize comportement linéaire proche celui différence provient phase traitement précision temps augmente légèrement windowSize puisque paramètre augmente augmente nombre sommets graphe séquences deuxième partie expérimentations porté analyse motifs séquentiels extraits fonction précision différentes contraintes figure présente temps extraction comparés fonction support minimum selon valeurs choisies différents paramètres valeurs calculées contraintes temps utilisées précision correspondent valeurs limites précision différentes paramètres retenus windowSize minGap maxGap précision donne windowSize minGap maxGap précision windowSize minGap maxGap constater utilisation contraintes temps étendues coûteuse celle valeurs limites contraintes permettant obtenir mêmes motifs séquentiels accompagnés précision temporel ressant ignore valeur optimale plusieurs contraintes temps utiliser précision différente certains paramètres balayer ensemble possibilités large analyse motifs obtenus précision pourra renseigner valeur adéquate contraintes temps Enfin montre évolution temps extraction fonction précision support minimum constate temps extraction atteint valeur limite correspond valeur maximale utile trois paramètres contraintes temps minSupp Running according minSupp value windowSize Running according windowSize value minSup Running according minSup value accurracy Running according accurracy value Temps extraction fonction minSupp considérant aucune contrainte temps windowSize minGap maxGap fonction windowSize minGap maxGap minSup fonction minSupp considérant contraintes temps précision fonction précision selon différentes valeurs contraintes temps minSupp Conclusion perspectives motifs séquentiels généralisés présentés Srikant Agrawal permettent définition large inclusion introduisant utilisation contraintes temps Toute cette définition reste encore rigide notamment utilisateur vague contraintes temporelles lient données article proposons extension contraintes temps motifs séquentiels généralisés souplesse spécification paramètres contraintes temporelles Notre approche construction graphes séquences intégrer contraintes temps processus extraction motifs séquentiels faisabilité robustesse cette méthode montrées Masseglia principe étant avons montrer efficacité résoudre probléme recherche séquences généralisées contraintes temps étendues similitude comportement celui avons également mettre évidence flexi bilité offerte place contraintes étendues reste encore valider robustesse Enfin envisageons étendre motifs séquentiels flous présentés 2005b motifs séquentiels généralisés contraintes temps étendues motifs séquentiels généralisés contraintes temps étendues Références Agrawal Srikant Mining Sequential Patterns International Conference Engineering Taipei Taiwan Computer Society Press Allen Maintaining knowledge about temporal intervals Readings qualitative reasoning about physical systems Laurent Teisseire 2005a Contraintes temps étendues motifs séquentiels Technical Report LIRMM Laurent Teisseire 2005b Motifs séquentiels flous beaucoup passionnément 5èmes journées Extraction Gestion Connaissances Mannila Toivonen Verkamo Discovery frequent episodes event sequences Mining Knowledge Discovery Masseglia Cathala Poncelet Approach Mining Sequential Patterns Principles Mining Knowledge Discovery Masseglia Poncelet Teisseire Extraction efficace motifs séquentiels généralisés prétraitement données Journée Bases Données Avancées Meger Rigotti Constraint based mining episode rules optimal window sizes European Conference Principles Practice Knowledge Discovery Databases Springer Verlag Raissi Poncelet Teisseire speed Mining sequential patterns streams Journée Bases Données Avancées Srikant Agrawal Mining sequential patterns Generalizations perfor mance improvements International Conference Extending Database Technology London Springer Verlag Zadeh Fuzzy Information Control Summary Mining temporal knowledge really useful fields methods proposed mining machine learning order extract manage knowledge using temporal constraints particular works proposed generalized sequential patterns However these constraints often crisp precise assessment avoid erroneous information Within context propose approach based graph sequence built extended temporal constraints These relaxed constraints enable generalized sequential patterns propose measure temporal accuracy extracted sequences compared initial constraints