actes_non_num 351rotes incrémental parallèle françois poulet thanh nguyen irisa texmex campus beaulieu 35042 rennes cedex francois poulet irisa irisa texmex people poulet index_fr lussi télécom bretagne technopôle brest iroise 83818 29238 brest cedex telecom bretagne perso bretagne irisa symbiose campus beaulieu 35042 rennes cedex vhnguyen irisa irisa symbiose people nguyen résumé présentons nouvel algorithme incrémental parallèle séparateur vaste marge support vector machine classification grands ensembles données utilisant processeur carte graphique graphics processing units méthodes noyaux permettent construire modèles bonne précision nécessitent habituellement résolution programme quadratique requiert grande quantité mémoire temps exécution ensembles données taille importante présentons extension algorithme least squares proposé suykens vandewalle obtenir algorithme incrémental parallèle nouvel algorithme exécuté processeur graphique obtenir bonne performance faible résultats numériques ensembles données delve montrent notre algorithme incrémental parallèle environ rapide significativement rapide algorithmes standards libsvm introduction algorithmes séparateurs vaste marge proposés vapnik méthodes noyaux permettent construire modèles précis deviennent outils classification données populaires trouver nombreuses applications comme reconnaissance visages catégorisation textes bioinformatique guyon cependant demandent résolution incrémental parallèle programme quadratique calcul moins complexité égale carré nombre individus ensemble apprentissage quantité mémoire nécessaire impossible utiliser grands ensembles données heure actuelle lyman besoin permettre passage échelle traiter grands ensembles données machines standard méthodes heuristiques efficaces permettent améliorer temps calcul décomposant programme quadratique série petits problèmes boser chang platt niveau œuvre méthodes apprentissage incrémental cauwenberghs poulet mangasarian poulet permettent traiter grands ensembles données solutions partielles chargeant successivement ensembles apprentissage mémoire avoir charger ensemble total algorithmes parallèles distribués poulet poulet utilisent machines réseaux améliorer temps exécution apprentissage algorithmes apprentissage actif poulet koller choisissent ensemble individus ensemble actif représentatif construction modèle algorithmes boosting poulet basent échantillonnage théorème sherman morrison woodbury golub classifier simultanément grand nombre individus dimensions article présentons algorithme incrémental parallèle least squares classification grands ensembles données exemple carte graphique nvidia geforce 8800gtx notre point départ algorithme proposé suykens vandewalle algorithme obtient solution résolution système équations linéaires programme quadratique permet classifier beaucoup rapidement ensembles ayant grands nombres individus avons étendu algorithme manières avons développé version incrémentale pouvoir traiter grands ensembles données milliard individus utilisons carte graphique architecture massivement parallèle obtenir bonne puissance calcul faible performances algorithmes temps exécution précision évaluées grands ensembles données provenant asuncion newman delve delve comme forest covertype kddcup adult ringnorm résultats montrent version notre algorithme environ rapide version exemple efficacité classification ensemble données millions individus dimension classifiés classes seconde carte graphique nvidia geforce comparé secondes nécessaires intel avons aussi comparés résultats obtenus libsvm chang joachims paragraphe présente brièvement algorithme paragraphe décrit algorithme incrémental permettant classification grands ensembles données paragraphe présentons version incrémentale parallèle quelques résultats paragraphe avant conclusion travaux futurs quelques notations utilisées article vecteurs représentés matrices colonne produit scalaire vecteurs norme vecteur matrice représente points dimension poulet algorithme tâche classification binaire linéaire représentée figure individus dimensions représentés matrice leurs classes stockées matrice diagonale algorithme cherche meilleur hyperplan séparation données éloigné classe classe ramène maximiser marge distance entre plans supports classes support classe sépare individus classe autres autre minimiser erreurs individus mauvais support distances erreurs notées variables individu support alors algorithme revient programme quadratique marge optimal marge optimal linéaire classification données classes constante utilisée contrôler marge erreurs optimal obtenu résolution programme quadratique ensuite classification nouvel individu obtenue signe peuvent utiliser autres fonctions classification comme exemple fonction polynomiale degré fonction radial basis function fonction sigmoïdale passage linéaire linéaire simplement utilisant fonction noyau produit scalaire cependant calcul solution moins ordre représentant nombre points peuvent traiter grands ensembles données incrémental parallèle algorithme proposé suykens vandewalle remplace contrainte inégalité égalité modifie également algorithme minimisant erreurs contrainte substituant fonction objectif programme quadratique obtenons alors problème optimisation calculons dérivées partielles donne système équations linéaires inconnues suivant réécrits forme système équations linéaires 1etde matrice diagonale identité dernier élément algorithme nécessite résolution système équations linéaires inconnues programme quadratique nombre dimensions ensemble données important capable traiter grand nombre individus milliard temps restreint machine standard résultats numériques montré algorithme obtient précision algorithmes références comme libsvm algorithme beaucoup rapide exemple efficacité décrit poulet classification classes milliard individus dimension seulement secondes standard pentium algorithme incrémental algorithme rapide efficace classification grands ensembles données nécessite charger totalité ensemble données mémoire effectuer classification grands ensembles données exemple milliard points dimension nécessite algorithmes apprentissage difficultés challenge grands ensembles données allons concentrer passage échelle algorithmes pouvoir traiter grandes quantités données machines standard algorithmes incrémentaux solution efficace traitement grands ensembles données évitent charger totalité données mémoire ensemble données traité instant solution partielle mesure poulet suppose grand ensemble données décomposé blocs lignes algorithme incrémental simplement calculer solution système équations linéaires manière incrémentale simple supposons ensemble données traiter décomposé blocs lignes calcul incrémental solution système équations linéaires alors effectuer manière suivante 222111 edeededee eeeeee edeeei partir équations généraliser obtenir calcul incrémental ensemble données décomposé blocs lignes edeeei entrée ensemble apprentissage blocs constante régler marge erreurs apprentissage initialisation calcul tdiei résolution système équation obtient coefficients classification nouvel individu basée signe algorithme incrémental incrémental parallèle algorithme incrémental présenté tableau traiter ensembles données grandes tailles machine standard précision algorithme exactement celle algorithme original nécessite stockage mémoire petite matrice taille vecteurs taille entre étapes successives algorithme tests montré algorithme incrémental effectuer classification milliard individus dimension minutes compter temps lecture données pentium algorithme incrémental parallèle algorithme incrémental venons décrire traiter grands ensembles données simple exécute processeur avons étendu obtenir version parallèle graphics processing durant dernière décennie wasson développés processeurs spécialisés accélération graphique plusieurs avantages rapport architecture actuelle calcul intensif parallèle parmi avantages citer meilleur transfert mémoire significativement meilleurs calculs flottant utilisation centaines unités parallèles calcul single instruction multiple peuvent alternative intéressante cluster calcul intensif récents incluent nouvelles possibilités programmation peuvent utilisés calculs graphiques general purpose comme simulations physique traitement signal calculs géométriques fouille données entrée ensemble apprentissage blocs constante régler marge erreurs apprentissage initialisation charge mémoire copie mémoire calcul tdiei copie mémoire résolution système équation obtient coefficients classification nouvel individu basée signe algorithme incrémental parallèle poulet nvidia récemment sorti nouvelle carte graphique geforce bibliothèque appelée nvidia compute unified device architecture architecture nvidia geforce basée multi processeurs chaque multi processeur comporte unités calcul total processeurs chaque groupe processeurs partage cache mémoire chaque processeur possède unité arithmétique arithmetic logic effectuer opérations flottants instructions exécutées nvidia geforce possède mémoire performances calcul gflops transfert mémoire cette architecture spécialisée profit calcul intensif massivement parallèle bibliothèque développée nvidia langage permet utiliser carte graphique calculs graphiques utilisée comme support exécution parallèle inclut pilote carte librairies mathématiques niveau usage graphique comprenant notamment cublas nvidia cublas basic linear algebra subprograms modèle application librairie cublas création matrices vecteurs mémoire appel fonctions cublas finalement récupération résultats machine transfert entre mémoire avons développé version parallèle algorithme incrémental bénéficier bonnes performances calcul faible implémentation parallèle incrémentale décrite tableau utilise librairie cublas calculs matriciels architecture massivement parallèle programme utilisé importe quelle carte graphique compatible cublas aujourd cartes différentes toutes nvidia utilisation cublas parallélisation effectuée manière implicite ensemble données abord découpé petits blocs chaque étape algorithme incrémental données chargée mémoire transféré mémoire mémoire ensuite sommes eitei eitdiei calculées parallèle finalement résultats eitei recopiés mémoire mémoire résoudre système équations linéaires précision algorithme incrémental parallèle exactement celle algorithme original quelques résultats expérimentation avons utilisé intel carte graphique nvidia geforce 8800gtx pilote nvidia version linux fedora avons développé versions algorithme incrémental parallèle bibliothèques cublas librairie lapack dongarra bénéficier bonnes performances calcul matriciel résultats version comparés version linux fedora prend compte temps calcul temps nécessaire lecture données version temps transfert compte temps calcul inférieur présenté incrémental parallèle focalise tests grands ensembles données comprenant ensembles données forest cover adult tableau aussi grands ensembles données utilisant programme ringnorm dimensions classes millions individus classes individus dimensions protocole adult 48842 32561 16281 forest cover 581012 495141 45141 ringnorm 1000000 1000000 100000 ringnorm 10000000 10000000 1000000 description ensembles données temps précision ratio adult forest cover ringnorm ringnorm résultats classification avons abord découpés ensembles données petits blocs lignes version avons varier taille traité chaque étape algorithme points jusqu occuper toute mémoire disponible comparer temps nécessaire chaque étape classification meilleurs résultats obtenus petite taille utilisant mémoire secondaire disque ensembles données découpés blocs lignes assurer meilleures performances résultats classification versions algorithme incrémental parallèle présentés tableau version moyenne rapide version ensemble données forest cover avons essayé effectuer classification libsvm après jours calcul avions toujours résultat cependant résultats publiés récemment montré algorithme effectué classification ensemble données secondes processeur intel signifie notre version algorithme environ rapide ensemble données contient données réseau indiquant connexion réseau normale classe négative constitue attaque classe positive libsvm exécuter manque mémoire effectué classification ensemble données précision secondes pentium 800mhz alors notre algorithme effectue classification précision seulement secondes avère rapide poulet résultats numériques montrent efficacité notre algorithme classification grands ensembles données avons notre algorithme était incrémental aussi décrémental particulièrement adapté fouille données ajouter nouvelles données supprimer anciennes données modèle alors partir étape précédente ainsi possible avoir importe quelle fenêtre temporelle données calculer modèle correspondant adult forest cover types ringnorm ringnorm temps exécution versions domingos hulten listés critères algorithme fouille données suivre pouvoir traiter efficacement grandes quantités données prendre faible temps constant individu notre algorithme complexité linéaire nombre individus utiliser quantité mémoire constante quelque quantité données traiter mémoire nécessaire notre algorithme déterminée taille capable construire modèle lisant données traite chaque individu permettre obtenir modèle données moment construire modèle faisant somme importe moment prenant compte données traitées produire modèle équivalent algorithme aurait contraintes résultat obtient exactement celui version originale séquentielle quand données évoluent cours temps pouvoir faire évoluer modèle garder trace changements notre algorithme incrémental décrémental suivre aisément changement notre algorithme vérifie critères listés garantit pouvoir traiter incrémental parallèle aisément grandes quantités données conclusion perspectives avons présenté nouvel algorithme incrémental parallèle classification grands ensembles données processeurs graphiques principale étendre manières algorithme proposé suykens wandewalle avons développé version incrémentale classification grands ensembles données notre algorithme évite charger ensemble données mémoire instant ensemble données mémoire modèle mesure traitement avons ensuite développé version parallèle algorithme incrémental basée processeurs graphiques bénéficier bonnes performances faible avons évalué performances précision temps calcul ensembles données delve résultats montrent version notre algorithme environ rapide version avons aussi comparé algorithmes référence libsvm autres algorithmes récents notre version environ rapide libsvm précision similaire avons aussi appliqué méthode algorithmes proposés mangasarian collègues newton mangasarian lagrangian mangasarian musicant mêmes propriétés algorithme nouvelles implémentations algorithmes parallèles efficaces classification grands ensembles données avons seulement utilisé processeur graphique expérimentations temps exécution rapide algorithmes actuels libsvm amélioration évidente immédiate consister utiliser simultanément plusieurs processeurs graphiques avons montré version poulet temps calcul était divisé nombre machines utilisé propriété version utilise alors temps calcul divisé 10000 rapport algorithmes courants actuels signifie tâche classification nécessitait année calcul effectuée heure voire moins dernières cartes graphiques sorties trois rapides celle utilisée amélioration significative possibilités algorithmes classification ouvrir nouvelles applications fouille données autre explorer extension méthode algorithmes linéaires références asuncion newman repository machine learning databases mlearn mlrepository poulet boser guyon vapnik training algorithm optimal margin classifiers annual workshop computational learning theory pittsburgh pennsylvania cauwenberghs poggio incremental decremental support vector machine learning advances neural information processing systems press chang libsvm library support vector machines cjlin libsvm delve evaluating learning valid experiments utoronto delve poulet classifying billion distributed algorithm international conference computer science research innovation vision future vietnam poulet mining large datasets visualization iceis entreprise information systems miami poulet towards dimensional mining boosting visualization tools iceis entreprise information systems porto portugal domingos hulten general framework mining massive streams journal computational graphical statistics dongarra walker lapack design overview object oriented extensions performance linear algebra supercomputing press mangasarian incremental support vector machine classification mining arlington virginia golub matrix computations hopkins university press balti maryland guyon applications clopinet isabelle projects joachims training linear linear sigkdd lyman varian swearingen charles jordan information berkeley research projects mangasarian finite newton method classification problems mining institute technical report computer sciences department wisconsin mangasarian musicant lagrangian support vector machines journal machine learning research nvidia programming guide incrémental parallèle nvidia cublas cublas library platt training support vector machines using sequential minimal optimization advances kernel methods support vector learning schoelkopf burges smola poulet mining large datasets support vector machine algorithms enterprise information systems filipe hammoudi piattini kluwer academic publishers suykens vandewalle least squares support vector machines classifiers neural processing letters incremental learning support vector machines sigkdd diego koller support vector machine active learning applications classification machine learning stanford vapnik nature statistical learning theory springer verlag wasson nvidia geforce graphics processor technical report hardware explored classifying large using hierarchical clusters sigkdd summary present parallel incremental support vector machine algorithm classification large datasets graphics processing units kernel related methods shown build accurate models learning usually needs quadratic program large datasets requires large memory capacity extend recent least squares proposed suykens vandewalle building incremental parallel algorithm algorithm graphics processors performance numerical results delve dataset repositories showed parallel incremental algorithm using about times faster implementation significantly faster times state algorithms libsvm