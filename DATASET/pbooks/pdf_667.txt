articles assemblage pdfKGRAM machine abstraite graphes connaissance Olivier Corby Catherine Faron Zucker INRIA route lucioles 06902 Sophia Antipolis cedex olivier corby sophia inria route Colles 06903 Sophia Antipolis cedex catherine faron zucker unice Résumé article présente machine abstraite graphes connaissance KGRAM unifie notions homomorphisme graphe calcul quêtes telles celles langage SPARQL données KGRAM implémente ensemble extensible expressions définissent famille langages abstraits interrogation graphes GRAAL décrivons mantique dynamique GRAAL Sémantique Naturelle présentons machine abstraite KGRAM conçue comme interprète GRAAL implé mente règles sémantique naturelle langage Introduction article présentons machine abstraite graphes connaissance KGRAM acronyme Knowledge Graph Abstract Machine unifie notions homomorphisme graphe calcul requêtes telles celles langage SPARQL données KGRAM implémente ensemble extensible expressions définissent famille langages abstraits interrogation graphes connaissance quelconques GRAAL acronyme GRAph Abstract query Languages travail abstraction avons définir GRAAL alimenté résultats projet GRIWES auquel avons participé définissons GRAAL sémantique dynamique Sémantique Naturelle définissons KGRAM comme implémentation règles sémantique naturelle GRAAL Quant machine KGRAM proprement montrons niveau abstraction implémentation manipule interfaces aussi structures données opérations graphes Ainsi différents gestionnaires graphes luateurs contraintes peuvent connectés implémentant KGRAM montrons interopérabilité KGRAM connectant indifféremment gestionnaires graphes moteurs sémantiques Corese Corby évaluateur contraintes Corese partie suivante présente langage GRAAL partie machine KGRAM inria edelweiss software corese sourceforge KGRAM machine abstraite graphes connaissance famille GRAAL langages requête Syntaxe abstraite syntaxe abstraite GRAAL donnée grammaire suivante FILTER union option graph query exist primitives partagent langages famille GRAAL expressions permettant rechercher relation hyperarc graphe expressions FILTER permet exprimer contraintes nœuds recherchés graphe interrogé Remarquons expressions FILTER primitives verrons partir elles correspondent interfaces machine abstraite KGRAM interprète GRAAL expressions UNION permettent exprimer conjonction disjonction entre expressions expression OPTION permet considérer certaines expressions comme optionnelles expression GRAPH permet spécifier graphe connaissances lequel évaluer expression absence telle expression graphe défaut considéré expression QUERY permet exprimer requêtes résultat détermine liaisons variables requête appelante expression exprime négation échec expression EXIST permet rechercher solution première trouvée autres expressions encore disponibles GRAAL présentées faute place outre GRAAL conçu extensible Sémantique naturelle Sémantique Naturelle initialement conçue fournir sémantique opérationnelle langages programmation règles mantique naturelle constituant spécifications interprètes langages manière analogue définissant sémantique opérationnelle GRAAL spécifions chine abstraite KGRAM comme interprète GRAAL expressions celle permettant interroger bases graphes connaissance Sémantique Naturelle sémantique opérationnelle langage donnée forme ensemble règles inférence expressions langage évaluées environnement application règle inférence produit nouveaux environne ments Ainsi règles inférence sémantique GRAAL décrivent évolution vironnement évaluation expressions langage composent requête précisément expression requête évaluée environnement consistant liste variables apparaissant requête liées nœuds graphe interrogé liaisons résultant évaluation précédente autres expressions requête évaluation expression produire plusieurs environnements plusieurs solutions autres expressions requête évaluées ensuite chacun Lorsque toutes expressions requête évaluées chaque environnement résulte correspond solution trouvée décrivons opérationalisation expressions FILTER GRAAL travers règles sémantique naturelle Faute place règles opérationalisant Corby Faron Zucker autres primitives GRAAL décrites article règles suivantes montrent calcul listes environnements évaluation expression demandant recherche relation graphe évaluation telle expression environnement requiert rechercher liste environnements contenant appariements possibles relation graphe interrogé fusionner opérations synthétisées règles bases règles graph merge décrivent sémantique respectivement gestionnaire graphe gestionnaire environnement graph merge graph merge règles suivantes montrent filtre évalué utilisant liaisons variables requête environnement courant filtre évalué règle environnement devient solution sinon règle opérateur trans forme environnement liste unique environnement FILTER false FILTER FILTER FILTER langages GRAAL remarquables Selon ensemble primitives GRAAL considère adopte langage requêtes particulier autre limitation expressions définit langage correspondant celui Graphes Concep tuels simples Chein Mugnier opérationalisation règles sémantique naturelle associées expressions correspond recherche homomorphismes graphes étique relations peuvent aires verrons partie calcul homomorphismes graphes colonne vertébrale algorithme KGRAM ajoutant langage expressions FILTER considère modèle Graphes Concep tuels contraintes présenté Baget Mugnier ajoutant langage expressions UNION OPTION GRAPH définissons fragment langage SPARQL machine abstraite KGRAM Interfaces abstraites machine abstraite KGRAM accède graphe interrogé travers interface abstraite masque structure implémentation Autrement KGRAM opère abstraction graphe travers structures fonctions traites graphe interrogé modélisé forme sommets arité quelconque travers interfaces langage requêtes KGRAM permet ainsi terroger graphe connaissances exemple aussi graphes conceptuels relations aires graphes relations binaires seulement structures données manipulées KGRAM abstraites aussi opérateurs KGRAM machine abstraite graphes connaissance gestionnaire graphes KGRAM permet accéder graphe interrogé objet implémentant interface Producer énumère sommets cibles correspondant sommet requête correspondance entre sommets effectué objet plémentant interface Matcher objet charge comparaison étiquettes labels types sommets Selon implémentation interface Matcher prendra compte cette comparaison relations subsomption entre types pourra autoriser appariements approchés basés mesures similarité contraintes filtres objets abstraits implémentent interface Filter évalués objet implémente interface Evaluator KGRAM ignore structure interne filtres manipule contente appeler fonction interface Evaluator objets Filter passant argument Environment interfaces montrent niveau abstraction auquel sommes tenus conception KGRAM algorithme KGRAM manipule interfaces ainsi totalement abstrait indépendant toute implémentation toute structure données Algorithme fonction KGRAM évalue expression langage GRAAL forme stack expressions élémentaires appel gestion naire graphes abstrait producer considère expression stack environnement courant memory liaisons variables graphe requête nœuds graphe interrogé fonction candidate gestionnaire graphes utilise environ nement trouver éventuels nœuds expression sorte retourne seules relations candidates compatibles liaisons présentes environ nement relations candidates respectent liaisons environnement ajoutées relations ainsi nœuds relation nœuds vironnement Cette nœuds utilisée comme environnement évaluation filtres comme verrons recherche homomorphisme aboutit morphisme partiel construction devient complet lorsque sommet expressions requête atteint environnement courant représente alors solution KGRAM conçu comme interprète langage GRAAL algorithme repose opérationalisation règles sémantique naturelle associées expressions GRAAL permettent rechercher homomorphismes graphe stack stack store return stack switch producer candidate memory match bindings types memory stack memory similar FILTER evaluator memory stack instruction contrôle switch blocs types comme valeur variable implémentent paquets règles graph merge règles Corby Faron Zucker augmentent environnement courant liaisons nœuds requête nœuds graphe interrogé KGRAM permet ainsi recherche homomorphismes guidée appariement nœuds appariement relations FILTER comme valeur variable contrôle opérationa règles sémantique naturelle relatives expressions FILTER GRAAL faisant KGRAM implémente recherche homomorphismes graphe contraintes algorithme KGRAM utilise évaluateur filtres abstrait evaluator reste pendant nature filtres traités dépendent langage filtres implémenté évaluateur appelé fonction évaluation évaluateur filtres prend argument filtre évaluer nœuds constitue environnement courant évaluation filtre évalué recherche homomorphismes continue comme ronnement celui évaluation filtre contraire homomorphisme partiel constituait environnement courant aboutit solution règles sémantique naturelle expressions UNION OPTION GRAAL opérationalisées KGRAM intégrant colonne vertébrale algorithme présentée dessus trois nouveaux blocs instruction contrôle switch KGRAM implémente ainsi langage SPARQL avons développé compilateur traduit expressions SPARQL expressions GRAAL KGRAM opérationalise également règles sémantique naturelle autres expressions GRAAL présentées partie GRAPH QUERY EXIST détaillé article faute place Interopérabilité avons testé portabilité KGRAM réalisant implémenta interfaces Producer Matcher Evaluator KGRAM Corese interfaces KGRAM conçues minimiser réaliser sorte maquettes portage KGRAM moteur autre demandé relativement développement connexion Corese KGRAM presque immédiate explique avons conçu KGRAM abstrayant principes Corese Connecté Corese KGRAM interprète ensemble expressions GRAAL portage nécessité lignes quatre classes EdgeImpl ProducerImpl EvaluatorImpl NodeImpl KGRAM interprète actuellement expres sions FILTER UNION OPTION travail maquettage poursuit implémentations témoignent généricité conception KGRAM laissent supposer connexion facile KGRAM autres implémentations gestion naires graphes connaissance Conclusion avons présenté article machine abstraite graphes connaissances KGRAM langage requête graphes GRAAL avons établi règles sémantique naturelle chacune expressions GRAAL règles inférence consti tuant spécifications KGRAM opérationalise comme terprète langage GRAAL avons lumière niveau abstraction KGRAM simplicité algorithme reposant manipulation interfaces aussi opérateurs structures données KGRAM machine abstraite graphes connaissance continuité résultats présentés article travaillons actuellement intégration optimisations telles celles proposées Corby Faron Zucker comme relations environnement selon heuristiques permettant ensuite opérations backjump encore possibilité demander plusieurs relations adjacentes gestionnaire graphes plutôt demander prolongement notre expérience réussie implémentation interfaces KGRAM moteurs Corese perspectives travail aborder problème distribution traitement données interconnectant différents gestionnaires graphes responsables chacun annotations implémentant chacun KGRAM envisageons KGRAM comme élément réponse problème passage échelle traitement données autre comme voute applications mashup combinant résultats différents gestionnaires graphe Références Baget Corby Dieng Kuntz Faron Zucker Gandon Giboin Gutierrez Leclère Mugnier Thomopoulos GRIWES Generic Model liminary Specifications Graph Based Knowledge Representation Toolkit International Conference Conceptual Structures Toulouse France Volume Lecture Notes Computer Science Springer Baget Mugnier Extensions Simple Conceptual Graphs Complexity Rules Constraints Artif Intell Chein Mugnier Graph based Knowledge Representation Computational Foundations Conceptual Graphs Springer London Corby Dieng Kuntz Faron Zucker Querying Semantic Corese Search Engine Eureopean Conference Artificial Intelligence Press Corby Faron Zucker Implementation SPARQL Query Language Based Graph Homomorphism International Conference Conceptual Structures Sheffield Volume Lecture Notes Computer Science Springer Natural Semantics Annual Symposium Theoretical pects Computer Science Passau Germany STACS Volume Lecture Notes Computer Science Springer Summary paper present KGRAM Knowledge Graph Abstract Machine unifies graph homomorphism SPARQL query processing datasets KGRAM imple ments extensible expressions which define GRAAL family GRAph Abstract query Languages describe dynamic semantics GRAAL Natural Semantics present KGRAM which designed interpret GRAAL implements rules natural semantics GRAAL