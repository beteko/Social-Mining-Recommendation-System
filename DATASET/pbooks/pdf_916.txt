EGC2007 dviClassement fragments documents méthode décision Faïza Abbaci Pascal Francq Departement sciences information communication Université Libre Bruxelles Roosevelt Bruxelles Belgique fabbaci homepages fabbaci Departement sciences information communication Université Libre Bruxelles Roosevelt Bruxelles Belgique pfrancq Résumé accroissement constant volume information accessible ligne format devient primordial proposer modèles adaptés recherche information documents Tandis recherche information classique repose indexation contenu documents recherche information documents tente améliorer qualité résultats tirant profit sémantique véhiculée structure cuments article présentons méthode classement items éléments retournés recherche collection ments classement repose prise compte ensemble tères discriminants particularité notre approche réside façon utilisons employons méthode décisionnelle classer items comparant général fonction scoring globale utilisée Introduction conséquences prolifération information ligne jours versité données distingue comme format excellence représentation stockage échange données Internet systèmes recherche information documents utilisent paradigme appariement exact celui appariement approximatif appariement classement premier requête vérifier contraintes contenu structure spécifiées requête ainsi chaque document fragment document élément lesquels recherche effectuée pertinent second items classés selon pertinence requête contexte pariement approximatif approprié effet appariement exact nécessite langage PROMETHEE classer fragments interrogation structuré connaissance priori structure documents recherchés Cependant environnement ouvert comme utilisateurs nécessai rement aptes exprimer besoin information langage interrogation complexe outre structure documents recherchés toujours disponible riement exact naturellement nécessite classement résultats présenter items pertinents premiers plupart méthodes classement existantes proposent étendre modèles tradi tionnels classement utilisés classique méthodes définissent fonction globale calcule score Relevance Status Value chaque documents alors triés façon globale selon leurs scores présentés utilisateur score document calculé fonction ensemble critères ayant impact tinence document comme exemple fréquence apparition termes requête moyenne pondérée valeurs critères exemple souvent utilisée calcul score Notre approche diffère trions résultats façon globale partielle items comparés déterminer classement partiel résultats classement combinés obtenir classement global avons choisi utiliser méthode décision notre choix porté méthode PROMETHEE suite article organisée comme section clarifions certaines différences primordiales entre recherche information classique recherche informations documents important suite article présentons section architecture générale notre système recherche information section approches classement section détaillons notre approche classement ainsi méthode décision utilisée terminons enfin conclusion recherche information documents recherche information classique présentons cette section différences principales entre techniques celles interrogation première différence réside processus interrogation effet alors requêtes majoritairement existe grand nombre langages interrogation comme exemple XPATH Consortium XQUERY Consortium permettent inclure requête contraintes structurelles sommes forcés constater environnement aussi vaste Internet utilisation langage représente frein structure documents toujours connue utilisateur autre langages interrogation souvent complexes utilisateurs lambda existence méthodes proposent interrogation indexation Deuxièmement indexation document contenu prendre compte aussi structure document fréquent considérer document comme arbre noeuds éléments attributs arêtes représentent appartenance noeud noeud feuilles contenus éléments valeurs attributs Ainsi indexation Abbaci structure revient garder trace relations frère entre noeuds indexer contenu documents technique reprises souvent adaptation liées existence structure documents effet unité indexation pouvant élément document entier statistiques comme exemple fréquence apparition termes représentera fréquence apparition terme élément document entier fréquence documentaire Document Frequency représentera nombre éléments documents contenant terme donné résultats problématique similaire recherche segments documents passage retrieval effet documents structurés peuvent contenir large spectre information hétérogènes préférable retrouver partie parties document répond requête utilisateur plutôt document entier Wilkinson Survient alors difficulté supplémentaire déterminer niveau granularité élément retourné Lorsque utilisateur exprime requête langage structuré possibilité définir garnularité éléments désire exemple requête XPATH suivante poisson milieu douces utilisateur spécifie désire seulement contenu noeud Lorsque revanche sommes situation utilisateur exprime uniquement système devra calculer granularité adéquate globale notre système conception notre système notre principal était accessibilité utilisateur Ainsi interrogation système devait adaptable niveau utilisateur requêtes peuvent varier complexité partant simple ensemble complexes expressions booléennes système analyse requêtes détermine éléments susceptibles correspondre besoin utilisateur retourne utilisateur triés ordre pertinence résultats présentés façon utilisateur puisse naviguer structure document élément extrait Notre système constitué parties principales figure première partie parseur documents analyse indexe structure documents leurs contenus résultats cette analyse sauvegardé données deuxième partie constituée trois composants analyseur requête module appariement module classement résultats analyseur requête décompose requête lorsqu contient opérateurs booléens structure permet appariement documents module appariement retrouve données éléments appropriés requête Enfin module classement résultats charge trier selon ordre pertinence éléments issus module appariement Abbaci avons détaillé indexation documents notre système analyse requête ainsi processus appariement requête documents données article présentons fonctionnement module classement éléments approches classement certain nombre critères décelés importants jugement pertinence document requête donnée Quelque critères devenus classiques quence apparition termes ainsi pouvoir discrimination Inverse Document Frequency existe autres critères comme exemple proximité termes requête PROMETHEE classer fragments architecture globale notre système document emplacement document début titre résumé prise compte synonymie Lorsque étudions méthodes classement documents fragments proposées littérature constatons elles utilisent mêmes critères adaptant format Ainsi Aharon Cohen Mandelbrod Theobald Weikum représente fréquence apparition termes élément Sigurbjörnsson Sigurbjornsson Mandelbrod Theobald Weikum Cohen Inverse élément Frequency représente pouvoir discrimination entre éléments collection Mandelbrod Theobald Weikum auteurs utilisent nombre éléments nombre documents Aharon proximité entre termes moyenne documents corpus distances entre termes lorsqu apparaissent élément Certains critères utilisés connus document considéré comme simple document texte comme exemple proximité entre termes requête Ainsi Sauvagnat auteurs considèrent proximité entre termes comme étant nombre séparant termes fenêtre termes Kotsakis Sauvagnat calculent manière auteurs Theobald Weikum quant intègrent proximité sémantique calculée ontologie entre termes augmenter performance fonction calcul score autres critères structure documents utilisés citons distance entre noeuds auteurs proposent utiliser distance dimensions distance classique entre termes distance horizontal arbre document distance terme noeuds distance verticale arbre document autres travaux Aharon Kotsakis Cohen poids attribués élément favoriser scores élément intéressant retourner exemple préférer retourner résumé plutôt titre autre critère structure documents rentre compte calcul score éléments spécificité éléments classer Sigurbjörnsson élément profond spécifique Abbaci Notre approche classement majorité méthodes classement adoptent approche global classement autres termes critères rassemblés fonction unique maximisée convénient majeur cette approche globale réside critères peuvent mutuellement compenser Ainsi solution critères présente valeur faible pénalisée critères restants présente valeur élevée conséquent avons approche classement partiel classe items comparant décrivons méthode décision avons choisie principe cette méthode compare solutions paire paire Ainsi solution surclasse autre solution plupart critères meilleure résultats comparaison paire alors combinés établir classement total solutions PROMETHEE méthode décision méthode décision permet effectuer classement ensemble solutions sibles problème donné commençant solution adéquate ensemble critères importance relative accordée chacun derniers décrivons méthode PROMETHEE Vincke avons utilisée ensemble solutions notre éléments chaque représente évaluation solution critère table représente table générique évaluation Table évaluation fonction préférence définie attribuer degré préférence solution solution critère général modélise différences valeurs solutions critère donné fonction normalisée comme préférence entre faible préférence forte préférence préférence stricte paramètres seuil indifférence préférence respectivement définis Lorsque différence entre évaluations inférieure alors significative fonction préférence égale Lorsque cette différence supérieure considérée comme significative fonction préférence égale classement solutions construits prenant compte critères selon expression suivante PROMETHEE classer fragments poids associés critères poids nombres naturels positifs dépendent échelles critères exprime degré préférence solution critères valeurs calculées chaque paire solutions cette façon relation surclassement définie surclassement définies surclassement positif représente puissance solution rapport toutes autres grand solution mieux autres surclassement négatif représente faiblesse solution rapport toutes autres petit autres solutions mieux ordre total solution déduit comme préférable indifférent exemple illustrons méthode PROMETHEE exemple choix voiture décision achat voiture plusieurs critères rentrent aussi possible consommation carburant aussi basse possible confort donné comme étant nombre entre aussi possible puissance aussi haute possible table montre valeurs critères quatre voitures différentes exemple aucune voiture semble meilleure autres Cependant chaque personne avoir propre préférence exemple puissance critère important Consommation 100km Confort Puissance Voiture Voiture Voiture Excellent Voiture Exemple problème décision multicritère seuil préférence chaque critère solutions différence critère donné solutions préférable autre critère question outre seuil indifférence chaque critère solutions différence moins critère donné solutions doivent considérées comme égale critère question Abbaci Voiture Voiture Voiture Voiture classement méthode PROMETHEE lorsque critères poids égaux Calculons classement voitures méthode PROMETHEE lorsque poids critères fixés Table résultats montrent solution idéale voiture numéro voiture moins ressante numéro méthode classer voitures numéros Calculons présent classement voitures méthode PROMETHEE lorsque poids critère Consommation Table Voiture Voiture Voiture Voiture classement méthode PROMETHEE lorsque critère Consommation poids effet changement clair voiture numéro devient solution idéale PROMETHEE classer fragments documents cette section présentons différentes étapes adaptation PROMETHEE notre problématique classement fragments documents derniers étant résultat cherche information collection documents abord définissons ensemble critères souhaitons prendre compte processus classement Ensuite associons chaque critère ensemble valeurs possibles ainsi valeur optimale souhaitée Lorsqu requête soumise notre système tableau critères rempli fragments documents collection guise solutions critères classement fragments pertinence contexte partons principe pertinence élément pertinence document contient Ainsi score global document consti critère décision concernant classement éléments contient instant proposons représente score classique ignorant structure document Ainsi requête élément document critère représente contenu élément attribut valeur attribut proposons impliquer classement éléments comme lorsque élément termes relation élément contenu élément attribut valeur attribut alors PROMETHEE classer fragments avantagé classement rapport autres éléments relation autre sinon représente élément attribut valeur attribut contenu élément distance entre adaptons notion distance entre contexte Ainsi distance entre noeuds contiennent respecti vement élément représentée longueur chemin court entre noeuds Cette distance nulle lorsque appartiennent élément sinon représente chemin court entre noeuds apparaissent respecti vement fréquence apparition Comme classique supposons termes fréquents élément contribuent fortement description dernier conséquent éléments contiennent plusieurs occurrences chance pertinents requête représente nombre occurrences terme élément spécificité élément Specif Intuitivement supposons élément contient autre élément alors classé Specif nombre noeuds élément liens structurels entre faisons référence relation parenté structure élément supposons relation ancêtre descendant entre noeuds contenant respectivement requête indicateur tinence calculons comme Abbaci Ansestors sinon représente distance verticale profondeur arbre élément entre noeuds contiennent respectivement étant identifiant noeuds trouve terme Ansestors ensemble noeuds ancêtres terme élément valeurs optimales critères classement tableau illustre valeurs optimales souhaitées critères classement présentées dessus Critère Échelle Valeur optimale grand possible petit possible grand possible Specif grand possible grand possible échelles valeurs critères classement tableau évaluation application méthode PROMETHEE classement ments issus étape appariement valeurs critères classements calculés chacun éléments tableau évaluation construit Concernant poids attribuer critères Éléments Specif échelles valeurs critères classement envisageons effectuer plusieurs tests déterminer Conclusion avons présenté cette article notre approche classement éléments documents pertinents requête donnée avons montré originalité notre approche distingue façon combiner différents critères rentrent jugement pertinence PROMETHEE classer fragments classement ordre pertinence effet majorité approches littérature binent critères fonction calcul score unique tentent optimiser cette dernière Notre approche éviter cette méthode globale inconvénient principal permettre critères compenser autres appliquons méthode décision effectue partiel paire paire éléments combine résultat partiel obtenir global éléments tests validité notre approche phase implémentation Références Abbaci Valsamis Francq Index search documents combining content structure International Conference Internet Computing Vegas Nevada Aharon Cohen Grumbach Kanza Mamou Sagiv Sznajder Twito Searching corpus using content structure Initiative Evaluation Retrieval Germany Germany Cohen Mamou Kanza Sagiv XSearch Semantic Search Engine Conference berlin Germany papers S03P02 Consortium language xpath version Technical report xpath Consortium Xquery query language Technical report xquery Botev Shanmugasundaram Xrank Ranked keyword search documents International Conference Management Diego California Diego California Kotsakis Structured information retrieval documents Proceedings symposium Applied computing Press Configurable indexing ranking information retrieval SIGIR Proceedings annual international SIGIR conference Research development information retrieval Press Sauvagnat Hubert Boughanem Mothe INitiative Evaluation Retrieval Dagstuhl Germany December Norbert Lalmas Mounia Malik Saadia Sigurbjornsson Kamps Rijke element based approach retrieval Initiative Evaluation Retrieval Germany Germany Sigurbjörnsson Kamps Rijke Processing structure queries retrieval first Twente Management Workshop Databases Informa Retrieval Enschede Netherlands Theobald Weikum index based search engine querying relevance ranking Proceedings International Conference Extending Database Technology London Springer Verlag Vincke Multicriteria decision Wiley Wilkinson Effective retrieval structured documents SIGIR Proceedings annual international SIGIR conference Research development information retrieval Springer Verlag Abbaci Mandelbrod Retrieving relevant components INitiative Evaluation Retrieval Dagstuhl Germany December Norbert Lalmas Mounia Malik Saadia Summary exponential growth online format becomes important investigate trieval models documents classical information retrieval systems index content documents retrieval models advantage document structure greatly improve trieval precision Existing retrieval systems support either exact matching paradigm approximate matching paradigm first results exactly matching content structure conditions query second results ranked accordingly their relevance query paper present results ranking technique which takes account content structure documents frangments ranked define criterions which think portant computing results ranks multi criterion decision support method these results