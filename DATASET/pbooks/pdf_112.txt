E33Nouveau modèle passage échelle subsomption Hippolyte Léger Dominique Bouthinon Mustapha Lebbah Hanane Azzag Universite Paris Sorbonne Paris 93430 Villetaneuse France leger bouthinon lebbah azzag paris13 Résumé subsomption opération fondamentale Programmation Logique Inductive tester validité hypothèse exemples particulièrement coûteux Ainsi systèmes apprentissage récents passent échelle proposons nouveau modèle subsomption fondé réseau acteurs pouvoir décider subsomption grandes clauses Introduction subsomption utilisée nombreux systèmes Programmation Logique ductive tester validité hypothèse exemples clause subsume clause seulement existe substitution telle Malheureusement complexité temporelle subsomption nombreuses cherches menées créer algorithmes subsomption efficaces Ferilli Kuzelka Zelezný Santos Muggleton Cependant passage échelle subsomption plate formes distribuées beaucoup moins atten aucun système notre connaissance concentre subsomption Notre créer modèle générique subsomption pouvant passer échelle facile intégré systèmes apprentissage relationnel utilisant plate formes distribuées Preliminaires considérons subsomption entre clauses clauses définies fonctions contenant variables constantes substitution ensemble variable constante variable apparaît seule substitution substitutions compatibles elles assignent valeurs distinctes variable exemple revanche union substitutions compatibles toujours valide présentons dessous exemple subsomption utilisé article Ferilli étude approfondie travaux Passage échelle subsomption Exemple exemple montre subsume propriétés suivantes seront utilisées notre modèle Propriété subsume seulement existe substitution référant variables telle existe substitution référant variables telle preuve évidente Propriété conjonction littéraux conjonction littéraux Alors subsume seulement existe ensemble substitutions compatibles Preuve existe ensemble substitutions compatible réfère variables Considérons mentionnés remarque après propriétés problème subsomption entre clauses modélisé comme trouver substitution référant variables étape réussi trouver ensemble stitutions compatibles référant variables telle étape réussi subsomption assuré substitution étape facile vérifier modèle subsomption présenterons section suivante concentrera étape subsomption basée réseau acteurs Étant donné conjonction généralement close conjonc close cherchons ensemble substitutions compatibles réfère variables appartient schéma subsomption proposons fondé modèle acteurs Hewitt acteur entité indépendante autres acteurs système messagerie asynchrone acteurs forment graphe orienté appellera réseau acteurs résoudre problème subsomption entre conjonctions construit abord réseau acteurs partir algorithme Ensuite envoie atomes réseau retournera première toutes substitution vérifiant subsomption Léger ainsi message problème aucune solution réseau retourne Algorithm Construction réseau acteurs buildNetwork conjonction littéraux begin create output actor buildTree création arbre acteurs create input actor chaque acteur substitution feuille arbre racine faire internal label return buildTree acteur jointure sortie niveau précédent nombre feuilles restant considérer begin alors create substitution actor store nouvelle feuille arbre sinon create actor buildTree buildTree finSi Construction réseau réseau graphe orienté constitué quatre types teurs comme montre figure acteur entrée unique point entrée réseau Chaque message reçoit atome acteur substitution représenté cercle chacun associé atome construire substitutions partir atomes reçoit acteur jointure représenté rectangle parents possible substitutions reçoit parents acteur possède mémoires internes gauche droite stocker substitutions fournies parents acteur sortie point sortie réseau reçoit substitutions existe établissent subsomption entre procédure subsomption Illustrons procédure subsomption travers présenté Figure construit partir conjonction clause donnée exemple Supposons atomes envoyés réseau Lorsqu atome fourni acteur entrée dernier envoie acteurs substitution associés atomes construits partir dicat acteur entrée reçoit envoie acteur Lorsqu acteur substitution associé atome reçoit atome vérifie existe substitution telle existe acteur envoie cette substitution acteur jointure auquel substitution envoyée acteur jointure envoyé Passage échelle subsomption Réseau acteurs construit partir conjonction Lorsqu acteur jointure reçoit substitution parent gauche droit stocke mémoire gauche droite tente chaque substi tution mémoire droite gauche chaque substitution compatible envoie successeur acteur jointure reçoit parent gauche stocke cette substitution mémoire gauche posons mémoire droite contienne substitutions Ainsi envoyé successeur alors considéré substitution valide Lorsque acteur sortie reçoit substitution affiche comme solution seule solution termine Sinon acteur attend autres solutions assurer réseau arrête envoie message acteur entrée lorsque dernier atome envoyé message propagé travers réseau jusqu acteur sortie termine exécution Expérimentations cette section décrivons implémentation réseau acteurs introduit section présentons expériences résultats obtenus Implémentation utilisons Allen intégré Scala Odersky implémenter notre modèle acteur subsomption parallélisme Léger throughput temps Temps calcul moyen chaque configuration Dispatcher Temps calcul moyen chaque configuration Dispatcher Dispatcher paramètres principaux parallelism limite nombre threads disponibles exécution throughput limite nombre messages traités acteur avant passer acteur suivant expériences avons varier paramètre parallelism entre paramètre throughput entre tests éxécutés machine Linux équipée processeur Intel 5600U coeurs hyperthreading mémoire Scala Données avons exécuté notre implémentation couple hypothèse exemple observer comment comporte réseau acteurs différentes configurations parallélisme données issues Santos Muggleton engendrées partir instances problème transition phase Giordana Saitta hypothèse clause littéraux symboles prédicats arité symboles variables exemple mêmes propriétés contient littéraux Performances figures chaque paramètre impact temps calcul nombres entre crochets nombres effectifs threads utilisés particulier augmentation parallélisme amène réduction significative temps calcul Notons Passage échelle subsomption nombre acteurs dépend directement nombre littéraux présents hypothèse rapport efficacité parallélisme augmente taille clause hypothèse Conclusion avons nouveau modèle subsumption montre certain potentiel passage échelle avons montré modèle acteurs efficace réduire temps calcul venons commencer tests modèle environnement distribué cluster Références Allen Effective Reilly Media Ferilli Mauro Basile Esposito Advances ficial Intelligence Congress Italian Association Artificial Intelligence Italy September Proceedings Chapter Complete Subsumption Algorithm Berlin Heidelberg Springer Berlin Heidelberg Giordana Saitta Phase transitions relational learning Machine Hewitt Bishop Steiger universal modular actor formalism artificial intelligence Proceedings International Joint Conference Artificial Intel ligence IJCAI Francisco Morgan Kaufmann Publishers Kuzelka Zelezný restarted strategy efficient subsumption testing Inform Odersky Overview Scala Programming Language Technical Report Lausanne Switzerland Santos Muggleton Subsumer Prolog theta subsumption engine menegildo Schaub Technical Communications International Confe rence Logic Programming Volume Leibniz International Proceedings Informatics LIPIcs Dagstuhl Germany Schloss Dagstuhl Leibniz Zentrum Infor matik Summary subsumption known bottleneck Inductive Logic Programming state learning systems field scalable introduce model subsumption algorithm based actor model being decide subsumption large clauses