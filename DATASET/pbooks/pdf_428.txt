approche programmation contraintes classification supervisée Khanh Chuong Duong Christel Vrain Université Orléans 45067 Orléans cedex France khanh chuong duong christel vrain orleans Résumé article abordons problème classification pervisée contraintes fondé programmation contraintes considérons comme critère optimisation minimisation diamètre maximal clusters proposons modèle cette tâche montrons aussi importance stratégies recherche améliorer efficacité Notre modèle distance entre objets permet données qualitatives quantitatives contraintes supplémentaires clusters instances peuvent directement ajoutées expériences ensembles données classiques montrent intérêt notre approche Introduction problématique classification supervisée aussi appelée clustering guement étudiée pendant nombreuses années approches comme means médoïdes général problème consiste partitionner ensemble objets classes vides disjointes champ recherche difficile plusieurs choix mesure dissimilarité entre objets dépendant principalement application influant fortement résultats définition critère optimiser taille espace recherche conséquence nécessité définir heuristiques conduisant souvent optimum local Poser contraintes solution recherchée modéliser finement applications réelles autre restreindre taille espace recherche Néanmoins plupart algorithmes classiques développés classification supervisée contraintes doivent adaptés possible prendre compte contraintes posées utilisateur Développer solveurs généraux applicables grande variété problèmes nouveaux défis autre avancées récentes Programmation Contraintes rendu paradigme beaucoup puissant Plusieurs travaux Raedt Boizu mault étudié intérêt modéliser problèmes fouille données montré apport déclarativité inhérente papier proposons cadre modéliser classification supervisée contraintes Programmation Contraintes intérêt notre approche fournir modèle déclaratif permettant spécifier problème classification supervisée intégrer facilement contraintes notre modèle faisons hypothèse approche classification supervisée disposons mesure dissimilarité entre paires objets nombre classes théorie aucune limite donnée valeur grand complexité élevée considérons papier problème trouver tition minimisant diamètre maximal classes montrons notre cadre intègre naturellement contraintes instances classes reconnu choix modèle fondamental insistons aussi stratégie recherche aussi importante améliorer efficacité sieurs stratégies étudiées différant manière ordonner points reposant résultats théoriques expérimentations bases données classiques montrent intérêt notre approche Contrairement plupart travaux existants notre modèle trouver optimum global pouvons espérer compétitif terme temps calcul méthodes heuristiques comparons qualité solutions obtenues notre méthode celles obtenues méthode Gonzalez thode efficace classification supervisée optimisant diamètre maximum classes conduisant solution approchée travaux récents Métivier proposé utiliser classification supervisée conceptuelle problème formalisé comme recherche ensemble motifs fréquents recouvrants semble couvre toutes données transactions comme objets motifs comme définitions intension classes Plusieurs critères optimisation consi dérés comme maximiser taille minimale classe minimiser différence entre tailles classes Notons approches adaptées bases données litatives alors notre approche traiter données dispose mesure dissimilarité entre données Davidson propose cadre classification supervisée contraintes uniquement problème classes traite contraintes instances cannot contraintes classes diamètre clusters séparation entre clusters rithme converge optimum global Notre approche générale mesure nombre classes limité papier organisé comme section rappelons notions classification supervisée contraintes Programmation Contraintes section dédiée présentation notre modèle section expérimentations conclusion discussion travaux futurs données section Préliminaires Classification supervisée classification supervisée clustering consiste regrouper données classes clusters manière regrouper cluster données similaires séparer données distantes clusters différents Etant donnés données objets espace mesure dissimilarité entre objets objectif regrouper objets différentes classes telle manière partition obtenue satisfasse critère donné problème clustering formulé comme problème optimisation problèmes clustering variés dépendant différents critères comme struc souhaitée partition hiérarchie classes recouvrantes encore critère optimiser papier intéressons recherche partition objets classes telle critère optimisé critère optimisé entre autres Critère moindres carrés centre chaque cluster Critère variance intra classe critère valent critère moindres carrés distance euclidienne Critère erreur absolue représentant cluster Critère diamètre maximal diamètre maximal clusters diamètre cluster distance maximale entre chaque paire objets algorithme means représente chaque cluster moyenne points cluster minimiser critère moindres carrés algorithme médoïdes choisit objets représenter clusters cherche minimiser critère erreur absolue chaque ration méthodes réduisent valeur critère jusqu optimum général local algorithme Furthest Point First Gonzalez minimise diamètre maximal clusters algorithme commence choisir point comme représentant premier cluster affecte points cluster itération suivante point représentant choisi comme représentant second cluster points proches second représentant premier réaffectés second cluster algorithme réitère cette façon choisir comme nouveau représentant point représen tants existants réaffecter points arrête après itérations ayant ainsi formé clusters complexité temps optimum global alors algorithme garantit trouver clustering diamètre maximal clusters 2dopt mesure utilisée satisfait inégalité triangulaire Gonzalez prouvé trouver Difficile lorsque points espace dimensions algorithme modifié proposé Geraci rapid temps solution trouvée identique celle classification supervisée contraintes tient compte contraintes définies utilisateur identifier clusters contraintes peuvent posées clusters instances points contraintes clusters imposent conditions forme taille autres caractéristiques exemple contrainte taille exprime chaque cluster avoir nombre minimum points contrainte capacité minimale encore chaque cluster avoir nombre maximum points contrainte capacité maximale utilisateur aussi limiter diamètre clusters contrainte diamètre maximal paramètre autre exemple contrainte séparation minimale impose distance entre chaque paire objets différents clusters supérieure seuil contraintes instances général posées paires objets individuels types contraintes souvent utilisés cannot contrainte approche classification supervisée indique objets doivent cluster contrainte cannot indique objets peuvent appartenir cluster contraintes définies utilisateur nécessaires applications réelles pendant algorithmes adaptables gérer telles contraintes existe solution générale étendre algorithme traditionnel means médoïdes contraintes Notre approche basant Programmation Contraintes permet ajouter directement contraintes définies utilisateur modifier modèle Programmation contraintes Programmation Contraintes paradigme puissant résoudre blèmes combinatoires basant techniques issues intelligence artificielle recherche opérationnelle principe suivant programmeur spécifie problème façon déclarative comme problème satisfaction contraintes solveur cherche solutions intégrant propagation contraintes recherche problème satisfaction contraintes Constraint Satisfaction Problem triplet ensemble variables ensemble domaines ensemble contraintes chaque contrainte condition ensemble solution affectation complète valeur chaque riable satisfaisant toutes contraintes problème optimisation contraintes Constraint Optimization Problem auquel associée fonction objec solution optimale solution optimise fonction objectif général Difficiles Cependant techniques utilisées veurs permettent résoudre grand nombre applications réelles façon efficace techniques connues reposent propagation contraintes stratégies recherche propagation contraintes consiste contrainte supprimer domaine variables valeurs lesquelles déterminer elles peuvent participer solution chaque contrainte associé ensemble propagateurs dépendant choix consistance cette contrainte exemple contrainte posée consistance propagateurs implantés manière supprimer toutes valeurs inconsistantes domaine variables posée consistance borne propagateurs modifient seulement bornes inférieures supérieures domaines variables choix consistance indiqué programmeur lorsque contraintes posées chaque contrainte réalisée ensemble propagateurs implique toute formule relation mathématique contrainte seules celles quelles construire ensemble propagateurs disponibles disposons relations arithmétiques logiques relations complexes représentées forme contraintes globales solveur recherche solutions itérant étapes propagation contraintes branchement solveur propage toutes contraintes jusqu stable lequel domaine variable réduit ensemble aucun domaine réduire davantage premier existe solution solveur effectue retour arrière autre domaines singletons solution trouvée sinon solveur choisit variable domaine singleton découpe domaine parties nouvelles branches arbre recherche solveur explore ensuite chaque branche propagation contraintes devenir nouveau active suite modifications domaine variable stratégie exploration arbre recherche déterminée program stratégie recherche profondeur abord solveur ordonne branches ordre spécifié programmeur explore profondeur chaque branche problème optimisation stratégie recherche profondeur devient stratégie branch bound chaque solution trouvée valeur fonction objectif cette solution calculée nouvelle contrainte ajoutée imposant nouvelle solution meilleure celle solveur effectue recherche exhaustive solution retournée garantie optimale choix variables valeurs chaque chement extrêmement importants peuvent aider réduire façon drastique arbre recherche détails programmation contraintes lecteur invité consulter ouvrage Rossi illustrer problème optimisation contraintes stratégies recherche considérons exemple suivant Exemple Trouver affectation lettres chiffres telle maximisant valeur MONEY problème modéliser comme variables domaine ensemble chiffres contraintes spécifiant problème lettres doivent lettres différentes alldifferent Notons poser contraintes chaque paire variables utilise cette seule contrainte porte ensemble variables Cette contrainte appelée contrainte globale comme contrainte linéaire suivante 1000S 1000M 10000M 1000O maximise 1000M 1000O solution optimale affectation MONEY 10876 propagation initiale contraintes stable domaines stratégies précisent choix variables chaque variable choisie choix valeurs variables choisies ordre chaque variable valeurs domaine restant choisies ordre croissant arbre recherche compose états solutions intermédiaires solutions meilleures précédente optimales variables choisies ordre arbre recherche seulement états solutions intermédiaires arbres recherche donnés Figure arbres recherche générés environnement solveur Gecode approche classification supervisée Arbre recherche cercle stable encore solution carré rouge échec solution losange solution intermédiaire losange orange solution optimale chaque stable branche gauche variable choisie reçoit valeur choisie branche droite autre valeur choisie supprimée domaine variable Modélisation problèmes clustering contraintes présentons cette section modèle clustering contraintes disposons collection points objets mesure dissimilarité entre objets perte généralité supposons points indexés nommés indice distance entre points notée considérons nombre clusters connu avance modèle objectif trouver partition points clusters minimisant diamètre maximal clusters Modèle Variables fixons chaque cluster représentant point petit indice introduisons variable entière chaque donne représentant cluster domaine chaque intervalle chaque point représentant Affecter point cluster devient associer point représentant cluster introduisons chaque point variable entière donne valeur représentant associé introduisons également variable représente diamètre maximal variable entière utilisons solveurs variables entières domaine intervalle formé distance minimale distance maximale entre chaque paire points expérimentations lorsque distance entière multipliée seule partie entière conservée Notre modèle permet trouver solution optimale affectation complète variables satisfait contraintes suivantes Modélisation partition relation entre points cluster exprimée contraintes représentant représentant représentant point parmi représentants valeur chaque présente représentant indice minimal ensemble clusters pourrait représenté différentes manières selon ordre clusters contraintes suivantes permettent éviter cette symétrie représentants ordre croissant représentant premier cluster premier point Contraintes portant diamètre maximal points distance supérieure diamètre maximal doivent clusters différents représenté contraintes réifiées suivantes diamètre maximal minimisé minimise Modélisation contraintes définies utilisateur avantage modèle extensible autres contraintes Plusieurs contraintes définies utilisateur clusters points peuvent ajouter directement contraintes portant clusters capacité minimale clusters capacité maximale clusters contrainte séparation minimale indique séparation entre clusters moins points distance inférieure doivent cluster chaque posons contrainte contrainte diamètre maximum indique diamètre chaque cluster autrement points distance supérieure doivent clusters différents chaque posons contraintes contraintes couples points contrainte traduit points repré sentant contrainte cannot exprimée Stratégie recherche stratégies choix variables valeurs doivent solveur variables choisies ordre ordre indique représentants cluster doivent identifiés premier chaque borne diamètre maximal solveur essaye déterminer affectation points clusters approche classification supervisée variables choisies premier dernier représen Puisqu représentant avoir indice minimal cluster valeurs chaque choisies ordre croissant variable utilisons recherche dichotomique chaque point choix domaine restant découpé parties Puisque cherchons minimiser partie inférieure considérée premier variables choisies ordre croissant taille domaine restant choix valeur chaque indice représentant proche choisie premier Améliorations modèle solveurs réalisant recherche exhaustive modèle permet trouver solution optimale améliorer efficacité modèle différents aspects considérés Amélioration stratégie recherche réordonnant points identifier représentants variables choisies ordre Puisque représen avoir indice minimal chaque variable valeurs indices possibles ordre croissant indice points grande importance conséquent points réordonnés façon probables représen aient indice faible présentons versions utilisant heuristiques réordonner points heuristique poids version heuristique version version repose ordonnancement préalable points premier point autres points deuxième point premier aussi assez autres points troisième point premiers aussi assez restes réaliser cette heuristique supposons premiers points soient identifiés point version ordonne points algorithme prenant autant classes points Ainsi chaque point choisi algorithme ordre choix donne ordre points Amélioration contraintes connaissances contraintes utilisa prouvé Gonzalez diamètre calculé algorithme vérifie 2dopt diamètre optimal Cette connaissance implique bornes variable savoir chaque couple points posons contrainte réifiée posons contrainte contrainte remplacée contrainte cannot données objets attributs classes ionosphere kdd_synthetic_control vehicle yeast inconnu bases données résultat permet supprimer plusieurs contraintes réifiées modifier sémantique modèle Puisque contraintes réifiées nécessitent gestion variables supplémentaires suppression permet améliorer efficacité modèle versions loppées cette méthode partir versions respectivement Expérimentations cause complexité classification supervisée plupart algorithmes classiques contentent optimum local performance méthodes diminue souvent ajout contraintes définies utilisateur Notre modèle garantit trouver optimum global directement extensible contraintes utilisateur cette présentons expérimentations différentes bases données comparaison entre optimum global optimum local trouvé algorithme expérimentations contraintes utilisateur ajoutées avons réalisé notre modèle solveur Gecode version expérimenta tions réalisées processeur Intel Ubuntu considé bases données caractéristiques présentés Tableau Clustering quatre versions implantées variables ordre Figure représente temps secondes différentes versions chaque absence temps signifie limite temps minutes dépassée heuristique utilisée versions donne général meilleure performance bases ionosphere yeast utilisation bornes diamètre contraintes versions efficaces versions peuvent traiter kdd_synthetic_control vehicle yeast tandis versions peuvent traiter valeurs grandes Qualité solution algorithme rapide complexité retourne solution telle 2dopt solution optimale Cette borne stricte Gonzalez satisfaire Difficile espace dimensions Notre modèle trouve optimum global nécessite évidemment beaucoup temps Cependant intérêt trouver solution optimale comparons qualité solutions Figure observe nombre assez faible clusters solution algorithme assez comparable contre lorsque nombre augmente différence entre solutions devient significative gecode approche classification supervisée Clustering distance Qualité solutions Clustering contraintes utilisateur Clustering contraintes autre avantage notre modèle extensible direc tement contraintes utilisateur expérimentations contraintes instances réalisées bases connaît avance classe objets contraintes instance peuvent générées cette façon choisissons aléatoirement plusieurs paires objets posons contraintes cannot fonction leurs classes expérimentations version faites différentes combinai contraintes chaque combinaison tests effectués temps moyen contraintes utilisateur temps effectif contraintes présentés Figure résultats montrent ionosphere contraintes aident général réduire espace temps recherche contraintes Cependant kdd_synthetic_control contraintes utilisateur diminuent perfor mance différence entre diamètres optimaux contraintes souvent significative diamètre optimal contraintes souvent grand celui contraintes pensons critère diamètre maximal approprié structure réelle cette pourrait expliquer résultats Conclusion présentons papier modèle programmation contraintes sification supervisée modèle trouve optimum global minimise diamètre clusters données qualitatives quantitatives peuvent considérées extensible directement contraintes clusters instances présentons également stratégies recherche améliorer efficacité modèle expérimentations données classiques montrent intérêt notre approche approche classification supervisée modèle actuel considère critère diamètre maximal souhaitons renforcer générique modèle rendre extensible autres critères comme variance intra classe erreur absolue Outre généricité amélioration efficacité constitue autre objectif travaux futurs passer échelle aspects possibles étudier propagation contraintes efficace exploiter contraintes utilisateur Enfin souhaitons également étendre cadre adresser autres tâches cluste comme exemple classification recouvrante Références Boizumault Crémilleux Khiari Loudni Métivier Discovering Knowledge using Constraint based Language Davidson Shamis based Framework Efficient Constrai Clustering Raedt Nijssen Constraint programming itemset mining Sunita Proceedings SIGKDD International Conference Knowledge Discovery Mining Vegas Nevada August Raedt Nijssen Constraint Programming Mining Machine Learning Proceedings Twenty Fourth Conference Artificial Intelligence Geraci Pellegrini Maggini Sebastiani Cluster Generation Cluster Labelling Snippets Accurate Hierarchical Solution Proceedings String Processing Information Retrieval Gonzalez Clustering minimize maximum intercluster distance Theoretical Computer Science Nijssen Raedt Pattern mining under constraints Transactions Knowledge Engineering Accepted Métivier Boizumault Crémilleux Khiari Loudni Clustering constraintes utilisant Rossi Walsh Handbook Constraint Programming Foundations Artificial Intelligence Amsterdam Netherlands Elsevier Summary paper address problem constraint based clustering based Constraint Programming consider problem optimizing maximum diameter clusters propose model importance search strategies improving efficiency model based distance between objects allowing consider qualitative quantitative Cluster based instance based constraints easily added Experiments classical datasets interest approach