nouvel automate permettant extraction efficace itemsets fréquents flots données nouvel automate permettant extraction efficace itemsets fréquents flots données émile symphor alban mancheron lionel vinceslas pascal poncelet grimaag université antilles guyane martinique france symphor alban mancheron lionel vinceslas martinique lg2ip eerie scientifique georges besse 30035 nîmes cedex france pascal poncelet résumé frequent itemset automaton nouvel automate traiter façon efficace problématique extraction itemsets fréquents flots données cette structure données compacte informative présente également propriétés incrémentales intéres santes mises granularité algorithme loppé effectue unique passage données prises compte abord batch itemset itemset chaque itemset montrons cadre proche prédictive intermédiaire bordure statistique permet indexer itemsets véritablement fréquents maximisant rappel fournissant moment information pertinence statistique itemsets indexés valeur introduction extraction itemsets fréquents problématique recherche intéresse munauté fouille données depuis dizaine années intervient recherche règles association motifs séquentiels encore itemsets maximaux premiers traiter cette question furent agrawal srikant suivis traditionnellement différents algorithmes proposés littérature reposent structures données arbre encore treillis priori agrawal srikant growth problématique cherche motifs généralisation itemsets apparaît domaines aussi variés bioinformatique fouille textes concerne dernier nouvelles struc tures données basées automates apparues extraire séquences communes ensemble textes troníc exemple hoshino introduit nouvel automate déterministe acyclique subsequence automaton permet reconnaître toutes séquences ensemble textes blèmes principaux auxquels faire approche extraction motifs disposer structures soient suffisamment compactes informatives minimiser explosion combinatoire importants espaces recherche effet applicabilité algorithmes automate itemsets fréquents proposés remise question raison coûts prohibitifs temps calcul espace mémoire utilisé premier objectif article apporter réponse question suivante possible trouver nouvelles structures données suffisamment informatives compactes extraire façon efficace itemsets fréquents récemment faire données peuvent disponibles forme flots arrivent manière continue éventuellement quantités infinies cheurs communauté fouille données intéressés extraction connaissance telles conditions nombreuses applications transactions financières navigation téléphonie mobile rentrent cadre nécessitent obtenir résul rapidement problématique extraction itemsets fréquents prise compte données disponibles forme flots engendre nouvelles problématiques premier indispensable considérer aspects effet étant donné données arrivent manière continue données sujette mises régulières fréquentes ainsi connaissance obtenue moment donné forcément valable lorsque nouvelles données arrivent envisageable relancer algorithme toute maintenance connaissance incré mentale exemple étudiée masséglia auteurs proposent maintenir connaissance mesure mises successives malheureusement travaux recherche basés approche incrémentale adaptés flots mesure pouvons disposer intégralité cessaire second disposer nouveaux algorithmes effectuent seule passe algorithmes passe travaux récents flots montré était envisageable obtenir réponse exacte itemsets réellement fréquents fallait accepter approximation quant estimation fréquence motifs itemsets obtenus itemsets fréquents observés prendre compte incertitude engendrée connaissance toujours incomplète données important noter flots itemsets classés comme fréquents peuvent devenir longue période observation inversement itemsets servés fréquents peuvent après certain temps vapnik auteur montré statistiquement impossible affranchir sources erreurs partir connaissance partie grande toutefois chercher minimiser sources erreurs maintenant autre dessous seuil raison nable seconde question laquelle intéressons article suivante possible trouver structure données ayant propriétés incrémentales satisfai santes permette construire maintenir façon efficace ensemble itemsets fréquents données minimisant autre sources erreurs suite article organisée manière suivante section présente mellement problématique section proposons aperçu autres travaux abordant cette problématique section présente notre approche solutions rimentations décrites section conclusion proposée section problématique ensemble items relation ordre utilisés données transactions chaque transaction identifiée manière unique associée ensemble items ensemble appelé itemset symphor représenté entier longueur ensemble itemsets itemsets obtenus supprimant plusieurs items support itemset correspond nombre transactions lesquelles itemset apparaît itemset fréquent correspond support minimal généralement spécifié utilisateur taille données problème recherche itemsets fréquents consiste rechercher itemsets support supérieur cette problématique étendue flots données exprimer comme données bbiai ensemble infini batches chaque batch associé période temps récent batch obtenu chaque batch bbjaj correspond ensemble transactions itemsets supposons également batches nécessairement taille cardinalité données instant donné définie bbiai bbjaj correspond cardinalité batch fréquence itemset instant donné défini comme étant ratio nombre transactions contiennent différents batches nombre total transactions connu instant ainsi support minimal utilisateur problème recherche itemsets fréquents données consiste rechercher itemsets vérifient exemple table support itemset fréquence ensemble support fréquence exemple repris suite papier abcde ensembles batches construits travaux antérieurs différents travaux portant problématique extraction itemsets fréquents flots données déclinent selon trois fonction modèle traitement itemsets premier utilise fenêtres point conservés itemsets acquis manku motwani second différent cédent simplement introduit distinction entre itemsets récemment moins récemment acquis chang 2004b attribuent poids décroissant sactions fonction ancienneté acquisition autrement anciennes transac tions contribuent moins nouvelles calcul fréquence itemsets exemple giannella utilisent structure rechercher itemsets quents différents niveaux granularité temporelle dernier concerne extraction partir fenêtres glissantes considère seulement acquisition aussi retrait itemsets travaux chang 2004a approche développons article inscrit premier aussi préciserons suite automate itemsets fréquents graphe caractéristiques algorithmes ainsi erreur types approximation résultats relatifs manku motwani développé algorithme lossy counting propriété antimonotonie support algorithme effectue passage données utilise structure arbres représenter itemsets auteurs introduisent paramètre erreur utilisateur voulu inférieur support minimiser nombre résultats positifs améliorer valeur fréquence obtenue itemsets donnent garanties suivantes leurs résultats itemsets réellement fréquents trouvés négatifs itemsets considérés fréquents positifs fréquence proche fréquence voulue incertitude fréquence itemsets fonction paramètre erreur proposent extraire itemsets fréquents partant grands petits utilisent structure compacte résulte extension représentation basée arbres préfixés candidate frequent itemset toutefois algorithme développé effectuant passage données comprend phase élagage nécessite plusieurs parcours structure obtenir infor mation fréquence itemsets garanties apportées quant résultats indiquent négatifs erreur fréquence itemsets bornée notre approche premier temps intéressons extraction itemsets fréquents données introduisons nouvel automate frequent itemset maton constitue structure données compacte informative permettant traire façon efficace itemsets fréquents données second temps étendons cette approche prise compte flots données trons comment mettre incrémentalement ajout nouveaux batches issus cependant tenir compte incertitude engendrée connaissance toujours incomplète étudions représentation bordure statistique développer approche prédictive effet plutôt extraire itemsets observés fréquents partie connue considérons préférable prédire itemsets véritablement fréquents partir itemsets connus rappels théorie automates présentons cette section principes fondamentaux théorie mates finis hopcroft ullman seront utilisés suite définition automate états finis quintuple ensemble états alphabet ensemble transitions respectivement ensemble états initiaux finaux étiquette transition passant symbole chemin suite transitions consécutives étiquette écrit également chemin réussi reconnu étiquette chemin réussi langage reconnu automate ensemble reconnus automate symphor accessible existe chemin coaccessible existe chemin automate émondé états accessibles coaccessibles ensemble états accessibles coaccessibles automate émondé construction comme chemin réussi passe états accessibles coaccessibles automates équivalents définition automate états finis déterministe seulement existe unique initial adaptons définitions proposées initialement hoshino automate séquences itemsets définition étant donnés ensemble itemsets ainsi relation ordre point position ensemble uplet numéro position itemset longueur ordonné selon cette position correspond celle itemset trouvant devant premier cette autre position correspond celle itemset trouvant derrière dernier autrement cette position correspond position position particulière correspondant appelée point position initial autre position particulière correspondant appelée point position puits ensemble définition étant donnés ensemble itemsets ainsi point position atteint automate itemsets fréquents cette section introduisons définition nouvel automate tègre notion fréquence permet reconnaître ensemble itemsets fréquents données définition étant donnés ensemble itemsets ainsi entier correspondant valeur support choisi satisfait contrainte support seulement échéant satisfaisant ensemble satisfaisants ensemble exemple considérons batch table correspondant ensemble itemsets partir initial atteint selon définition comme schématique représenté dessous automate itemsets fréquents illustre itemsets première position numéroté point position atteint itemsets illustre existe exprimé utilisation symbole point position atteint satisfaisant effet inéquation définition vérifiée inférieur revanche satisfaisant définition étant donnés ensemble itemsets relation ordre ainsi entier représentant support seuil automate itemsets fréquents quintuple constater états satisfaisants coaccessibles contraire signifierait itemset fréquent inclus itemset fréquent ainsi émondé obtient construisant états satisfaisants accessibles simple algorithme glouton permet construire requiert aucun phase élagage support itemset étiquetant chemin initial donné obtient calculant nombre valeurs égales associé ainsi itemset étiquetant fréquent seulement satisfaisant propriété suivante propriété étant donnés ensemble itemsets ainsi entier représentant support seuil langage reconnu ensemble itemsets fréquents déduit assez aisément itemsets fréquents reconnus nécessairement support outre construction étant donnés itemsets étiquetant chacun chemin alors alors alors propriété après propriété étant donnés ensemble itemsets entier ainsi correspondant existe transition support itemset reconnu itemset fermé unique réciproquement itemsets fermés reconnus états existe transition menant support considérant batch table montrons figure émondé états finaux repérés double cercle initial représenté flèche entrante label itemset reconnu initial support ailleurs observons itemsets valeur support reconnus itemsets support reconnus support propriété structure compacte effet seuls états identifient itemset fermé propriété donne équivalences suivantes itemsets fermés symphor enfin choisit fréquence décroissante comme relation ordre items instar algorithme growth résultant compte nœuds états fia40 abcde appliqué flots données incrémentale hoshino exploité propriétés incrémentales première concer ajout séquence tandis seconde concerne ajout symbole nière position dernière séquence traitée propriétés appliquent difficulté itemsets effectuer incrémentale ainsi construction passe données incrément nouveau batch considéré itemset itemset premier dernier chaque itemset également premier dernier représentons figure fia40 émondé valeur ppos1 compte batch considérant batch figure demeure inchangé itemset reconnu prise compte provoquerait création satisfaisant intégration bordures statistiques appliquée flots données requiert connaître semble états accessibles compris états satisfaisants effet mettre émondé reviendrait considérer itemsets reconnus automate support engendrerait nécessairement grand nombre négatifs totalité inverse considérant états satisfaisants grand nombre itemsets vrais négatifs seraient analysés inutilement illustrer aspect considérons représentation fia40 émondé figure autre représentation fia40 émondé états accessibles états satisfaisants satisfaisants finaux question revient savoir automate convient considérer effectuer nécessaire trouver compromis entre conserver aucun satisfaisant pratique construits support calculé automate itemsets fréquents états accessibles idéalement seuls états correspondent itemsets vrais fréquents devraient construits quand satisfont contrainte support instant donné solution avons adoptée utiliser bordure tistique supérieure présentée symphor laquelle maximisé rappel définition théorème après fia40 abcde émondé définition valeur support statistique utilisée approcher motifs vrais fréquents données théorème dessous permet établir valeur support statistique permet construction bordure statistique supérieure théorème étant donné données observé nombre itemsets respectivement fréquents fréquent valeur ainsi probabilité appelée risque statistique supports statistiques respectivement rappel précision probabilité moins égale fréquences obtenues statistiquement presque optimales celle repose utilisation inégalités concentration variables aléatoires précis permettent obtenir résultat statistiquement presque optimal optimalité entendons toute technique estimation obtenant meilleures bornes symphor condamnée tromper critère maximiser temps calcul bordure statistique supérieure correspondant réduire autant possible nombre négatifs savoir itemsets véritablement fréquents retenus comme partie observée lorsque seuls états bordure statistique supérieure conservés états satisfaisants automate obtenu après incrémentale approximation observé noterons toutefois théorème permet affirmer risque sorte minimise première source erreurs section forte probabilité langage petit ensemble possible contient itemsets véritablement fréquents partie observée négatifs rappel risque ensemble contient également itemsets positifs fréquents partie connue figure représente fia40 émondé obtenu partir fia40 émondé figure compte batch états figure après seraient égaux satisfaisants états disparaissent fia40 émondé contre point position après devient satisfaisant apparaît comme final fia40 émondé figure typiquement aurions obtenu effectuant partir fia40 émondé figure revanche fallu également traiter inutilement états alors finaux existent fia40 émondé figure fia40 abcde ailleurs théorème permet établir propriété suivante propriété étant donné itemset fréquence partie observée ensemble itemsets fréquents alors valeur itemset probabilité existe itemset fréquence observée fréquent totalité inférieure intérêt calcul valeurs clairement illustré denise valeur traduit littéralement probabilité existe positif itemset fréquence observée fréquent inférieure automate itemsets fréquents expérimentations support kosarak algorithm growth apriori temps construction essai kosarak 10000 100000 support kosarak algorithm growth apriori mémoire construction essai kosarak batchs t10i4d100k online temps requis crémentale essai t10i4d100k batchs t10i4d100k online mémoire requise incrémentale essai t10i4d100k présentons expérimentations réalisées données2 kosarak t10i4d100k tests réalisés ordinateur processeur athlon disposant algorithme construction écrit norme figures illustrent temps mémoire résidente quise fonction fréquence construction données kosarak comparant algorithmes growth priori3 notre algorithme construc passe comparaison notamment growth avons utilisé version passes premier passage permettant uniquement réordon items ordre fréquences décroissantes résultats obtenus meilleurs large plage fréquence temps mémoire quise observe effectivement valeurs fréquence écart temps ordre mémoire faveur prend temps total consomme rapport growth algorithme priori effectue plusieurs passages données donne meilleurs résultats seulement partir fréquences dépas 2disponibles helsinki versions optimisées disponibles adrem goethals helsinki adrem goethals symphor toutefois performances dépendantes données indexées effet cette structure autant avantageuse itemsets fréquents grands contre partie lorsque itemsets fréquents majoritairement singletons faibles fréquences ressembler arbre lexicographique algorithme construction devient inadapté regard méthodes classiques construction arbres structure autant efficace données denses informa tions extraire figures illustrons résultats obtenus algorithme incrémental représentant temps mémoire requise fonction insertion nouveaux batches nombre constant transactions t10i4d100k temps mémoire consommée demeurent stables montre applicabilité algorithme incrémental flots données conclusion article apportons contribution originale élaborant nouvel tomate permet traiter façon efficace problématique extraction itemsets fréquents flots données notre connaissance automates structure données utilisés aborder cette question montrons structure compacte informative plusieurs itemsets fréquents ayant valeur support reconnus ailleurs structure indexe rectement itemsets fréquents nécessaire associer tableau finalement obtenir résultats présente également propriétés incrémentales cilitent grandement flots données granularité batch utilisé cadre approche prédictive permet indexer itemsets véritablement fréquents maximisant rappel fournissant moment information pertinence statistique valeur avantages permettent notamment construire incrément partir initiale algorithme développé mettre requiert passage données prises compte batch itemset itemset chaque itemset acquisition nouveaux batches connaissance augmentant possible mettre bordure supérieure celle diminuer valeur tends tends mesure mises devient possible construire partir automate premiers résultats obtenus présentés article faute place essentiellement montrent clairement robustesse notre approche également étayé expérimentations présentées analyse temps calcul mémoire consommée donnent résultats satisfaisants prouvent applicabilité passage échelle algorithme notre contribution ouvre prometteuse quant utilisation nouvelles structures données automate problématiques extraction motifs fréquents flots données références agrawal srikant algorithms mining association rules large databases large bases automate itemsets fréquents chang 2004a sliding window method finding recently frequent itemsets online streams journ chang 2004b decaying obsolete information finding recent frequent itemsets streams ieice trans inform denise régnier vandenbogaert assessing statistical significance overrepresented oligonucleotides workshop bioinf volume giannella generation challenges future directions chapter mining frequent patterns streams multiple granulari press mining frequent patterns without candidate generation sigmod records hopcroft ullman introduction automata theory languages computation addison wesley longman publishing hoshino shinohara takeda arikawa online construction subse quence automata multiple texts string processing informa retrieval spire symphor poncelet mining evolving streams frequent patterns pattern recognition efficient algorithm mining frequent entire history streams workshop knowledge discovery streams manku motwani approximate frequency counts streams large bases masséglia poncelet teisseire incremental mining sequential patterns large databases knowledge engineering symphor bordures statistiques fouille incrémentale données streams volume troníc common subsequence automaton automata number vapnik statistical learning theory wiley interscience summary present paper automaton which allows efficiently frequent itemsets stream summary informative struc incremental properties update processing easier granularity incremental algorithm updating needs which considered batch itemset itemset itemset within framework predictive approach through statistical border recognizes truly frequent itemsets stream maximizing recall providing information statistical relevance indexed itemsets their value introduction problématique travaux antérieurs notre approche rappels théorie automates automate itemsets fréquents appliqué flots données incrémentale intégration bordures statistiques expérimentations conclusion