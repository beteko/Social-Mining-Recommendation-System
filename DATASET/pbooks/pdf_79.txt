e33approche préventive gestion élastique traitement parallèle distribué données roland kotto kombi nicolas lumineau philippe lamarre liris umr5205 69621 villeurbanne france affil2 université claude bernard liris umr5205 69622 villeurbanne france liris prénom liris résumé contexte traitement données important garantir utilisateur propriétés performance qualité résultats passage échelle mettre adéquation ressources besoins allouer ressources nécessaires traitement efficace tualité majeur croisement problématiques green approche suggérons permet adapter dynamiquement automati quement degré parallélisme différents opérateurs composant quête continue selon évolution débit traités proposons métrique permettant estimer activité future opérateurs selon évolution entrée approche autoscale évaluant priori intérêt modification degré parallélisme opérateurs prenant compte traitement données globalité grâce intégration notre proposition apache storm exposons tests performance comparant notre approche rapport solution native outil introduction multiplication sources données capteurs objets connectés méthodes acquisition stockage traitement données évolué gérer masse vélocité séquences uplets débit distribution valeurs peuvent varier cours temps interrogation requêtes dites continues sattler beier soulèvent défis majeurs terme performance passage échelle terme performance systèmes gestion données doivent pouvoir traiter volée données issues capacité systèmes absorber traiter dépend également qualité résultats seront produits concerne passage échelle systèmes doivent mesure absorber débits données potentiellement variables élevés travaux partiellement financés projet socioplug socioplug nantes index socioplug_project autoscale traitement adaptatif données répondre enjeux systèmes gestion données gedik neumeyer schneider zaharia développés concentrerons systèmes représentant quêtes continues comme graphe opérateurs workflow gérant support exécu distribué solutions répondent mieux défis ciblés plaçons cadre techniques celles réécriture permis identifier différentes factorisations possibles entre ensemble requêtes continues workflows notre problème traiter mieux workflows évolutions entrée accord ressources disponibles contexte parallèle distribué aspects distincts jouent rôles majeurs usage ressources gestion degré parallélisme opérateurs stratégie location ressources dispersion globale traitements dépend degré parallélisme chaque opérateur modifier dynamiquement degré parallélisme opérateur permet adapter capacité absorption fonction variations données entrée stratégie adoptée mécanisme allocation impact évident ressources utilisées exemple stratégie répartition charge utilisera maximum ensemble sources disponibles contrario stratégie centrée diminution trafic réseau effet concentrer davantage opérateurs ensemble ressources qualité adaptation dynamique point qualité résultats usage ressources résultat solutions apportées aspects ainsi interaction article focaliserons adaptation degré parallélisme chaque opérateur débits variants effet augmentation débit entrée opérateur conduire congestion gedik traduit augmentation rédhibitoire latence pouvant conduire défaillance système éviter problème mécanisme allocation déplacer opérateurs ressources ayant puissance disponible lorsque possible changement degré parallélisme constitue solution travaux récents gedik intéressent notion élasticité optimiser performances usage ressources sources entendons machines ainsi bande passante réseau notre connaissance solutions adaptant dynamiquement degré parallélisme opéra teurs gedik schneider permettent anticiper activité opérateurs autre solutions neumeyer nécessitent intervention utilisateur avons choisi intégrer notre système gestion dynamique degré parallélisme chaque opérateur apache storm nombre répliques opérateur calculé partir métrique permettant anticiper activité court terme cette métrique évolution entrée activité récente opérateur reconfigurations passant augmentation scale diminution scale degré parallélisme évaluées notre approche autoscale individuellement globalement identifier celles cohérentes favorables performance stabilité système suite présentons limites solutions existantes section triques caractérisant activité opérateur introduites section approche autoscale adaptant dynamiquement degré parallélisme opérateurs décrit apache storm storm apache kotto kombi lumineau lamarre section enfin exposons résultats évaluation expérimentale approche proposons section motivation contexte exécution préciser problème traitons positionner rapport considérons trois requêtes continues comme illustré figure requêtes représentées topologies correspondent leurs plans exécution logiques respectifs principe traitement parallèle distribué multi requêtes données chaque requête porte entrée topologie séquentielle organisée diamant étoile chacune topologies représente motif élémentaire toute topologie considérée comme composition topologies chaque opérateur associé ensemble tâches nombre tâches associées opérateur correspond degré parallélisme opérateur exemple associé tâches degré parallélisme tâches allouées selon allocation unités traitement machines disponibles exécutées figure quatre tâches topologie distribuées machinesm1 distinguons trois types machines trois types ressources machines ressources actives elles traitent tâches leurs affectées machines ressources configurées actives aucune leurs unités traitement traitent tâches enfin machines autoscale traitement adaptatif données ressources disponibles configurées utilisable mécanisme allocation posons hypothèses suivantes contexte exécution premièrement sources latences réseaux homogènes ressources suffisantes traiter entrée plaçons plusieurs requêtes continues peuvent traitées simultanément ensuite stratégie allocation gérée gestion données enfin considérons ensemble débits variant distribution valeurs écart faible problématique adaptation dynamique distribution variante valeurs abordée rivetti scope article approches existantes performance solution traitement qualité résultats produits fortement dépendants réactivité système variations environnement exécu problème cependant complexe réagissant variations contexte exécution éviter instabilité système affecterait performance qualité résultats certaines solutions aniello basent sources trafic réseau déterminer ensemble quasi optimal affectations tâches unités traitement permet réduire latence globale topologie évitant échanges réseaux coûteux entre machines toutefois solutions impact limité capacité traitement chaque opérateur effet toutes tâches associées opérateur réparties maximum ressources capacité traitement augmentée solutions basant systématiquement usage maximal ensemble sources neumeyer zaharia permettent garantir selon thèse traitement requête continue dégradation qualité résultats exemple support exécution donné revient paralléliser maximum opéra teurs placer unités traitement selon stratégie répartition charge heureusement cette solution avère inappropriée contexte exécution multi requêtes point énergétique économique souhaitable auteurs présentent algorithme permettant faire scale scale demande cette approche repose utilisateur nition script règles métier elles existent enfin cette approche uniquement curative augmente degré parallélisme opérateurs congestionnés possibilité anticipation solutions gedik schneider permettent adapter dynami quement automatiquement degré parallélisme opérateurs toutefois elles reposent détection congestions effectives solutions puissent réduire durée congestion opérateurs elles peuvent prévenir heinze auteurs proposent solution basée algorithme apprentissage cette nière système adapter degré parallélisme opérateurs apprenant mesure gains réalisés fonction reconfigurations effectuées toutefois cette détection consommation ressources congestions système kotto kombi lumineau lamarre différentes approches toutes curatives puisqu elles interviennent soudre problème congestion produit conséquences qualité résultats plupart nécessite présence expertise utilisateur lution anticipant congestions limiter voire éviter naturellement souhaitable anticipation activité opérateur proposons formalisation différentes notions manipulons caractériser exécution topologie requête continue introduisons métriques nécessaires estimation adéquation entre degré parallélisme niveau tivité opérateurs topologie requête continue représentée graphe orienté ensemble nœuds représente opérateurs ensemble représente transmission données considérons chaque opérateuroi comme opérateur physique pouvant exécuté parallèle ensemble tâches nombre tâches degree définit degré parallélisme opérateur ensemble fenêtres analyse chacune composée ensemble itérations chaque fenêtre analyse associée opérateur chaque définit durée regroupe mesures effectuées durant intervalle temps mesures effectuées selon ensemble prédéfini timestampsmi chaque opérateuroi effectuons chaque timestampm mesures prenant compte uplets reçus traités intervalle important préciser mesures effectuées opérateurs appartenant topologie synchrones ensemble potentiellement infini uplets entrée opérateur définissons ensemble uplets reçus opérateur durant fenêtre ensemble uplets reçus durant intervalle estimation charge traiter opérateur proposons estimer itération nombre uplets système devra traiter durant itération suivante estimer capacité traitement compatible cette charge opérateur considéré comme source potentielle congestion système charge traiter opérateur durant itération correspond nombre uplets nouvellement reçus ajoutent uplets traités itération précé dente charge effective itération correspond valeur chargeij nbenattentef nbenattente correspond nombre uplets attente traitement durant ration traitement achevé durant itération ultérieure valeur formule calcul cette charge effective faire autoscale traitement adaptatif données pouvoir anticiper congestion avons besoin estimer cette charge estimons nombre nouveaux uplets reçus durant itération régres linéaire basant nombre uplets observés durant itération fonction affine calculée régression linéaire partir couples estimation nombre total uplets attendus durant itération itération définie estimri estimation charge attendue durant itération définie estimchargef estimri nbenattentef estimation capacité traitement opérateur maintenant avons estimation quantité uplets devrait avoir traiter opérateur itération reste estimer capacité traitement opérateur cette itération définissons capacité traitement opérateur comme étant nombre moyen uplets opérateur capable traiter durant itération capacitef degree correspond latence intra opérateur attente moyenne observée uplets traités durant itération hypothèse portant caractère uniforme distribution données entrée opérateurs utilisons simplement covariance estimer capacité moyenne traitement opérateur durant fenêtre estimcapacitef capacitef correspond covariance entre capacité traitement estimée itération capacités traitement observées itérations précédentes estimation niveau activité congestion opérateur différentes observations estimations permettent présent définir trique contrôle activité opérateur notion niveau activité représente intuitivement adéquation entre degré parallélisme débit entrée définie estimchargef estimcapacitef choix arbitraire auteurs technique régression remise cause résultats expérimentaux kotto kombi lumineau lamarre seuils paramétrables définissant respectivement niveau faible niveau activité interprétation opérateur suivante sindaf activité opérateur faible capacité opérateur considérée comme importante rapport nombre uplets attente traitement durant itération activité opérateur normale opérateur capacité traiter uplets attente traitement durant itération activité opérateur forte opérateur arrive limite capacité traiter uplets attente traitement durant itération activité opérateur critique opérateur mesure traiter uplets attente traitement durant itération approche autoscale approche autoscale détermine chaque opérateur modification degré parallélisme augmentation scale diminution scale conservation nothing notre approche prend compte estimation activité chaque opérateur aussi contexte global effet reconfigurations effets cascade prévisibles exemple augmentation capacité opéra activité forte critique augmenter débit sortie avoir impact débit entrée opérateurs initialisation graphe actions possibles premier temps allons définir ensemble reconfigurations effectuer chaque opérateur fonction activité ensemble représenté forme graphe disposant structure topologie sommets étiquetés proposition action opérateur correspondant actions possibles scale scale nothing graphe actions possibles fenêtre rappel fonction affine calculée régression linéaire estimer charge opérateur formule cette fonction permet estimer tendance évolution charge dérivée cette dérivée strictement positive charge considérée comme croissante sinon considérée comme décroissante constante opérateurs topologie parcourus après autres fenêtre courante opérateur courant selon niveau activité opérateur faible normal critique tendance évolution charge possible proposer action modification degré parallélisme selon matrice décision locale définie tableau autoscale traitement adaptatif données tendance évolution charge activité opérateur activité faible activité normale activité forte activité critique décroissante constante scale nothing nothing scale croissante nothing nothing scale scale matrice décision locale construction graphe actions possibles prise compte contexte global graphe actions possibles construit approche autoscale vérifie hérence globale graphe actions possibles ainsi obtenu introduisons relation ordre ensemble actions possibles ainsi action scale prédomine action scale prédomine action nothing déterminer action prise localement cohérente globalement définissons matrice décision globale tableau déclenchement actions reconfiguration parcourons graphe tions possibles partir opérateurs entrée utilisant matrice décision globale identifions ensemble reconfigurations cohérentes effectuer opérateurs pologie action prédominante amont opérateur décision locale opérateur nothing scale scale nothing nothing scale scale scale nothing scale scale scale scale nothing scale matrice décision globale grâce ordre ensemble actions possibles pouvons déterminer action prédominante observée nœuds précédant courant topologie ainsi après tableau scale validé amont courant action prédominante scale contraire scale remplacé action nulle éviter contradiction court terme quantification reconfigurations étapes précédentes permettent savoir reconfigurer opérateur ainsi reconfiguration reste quantifier degré parallélisme chaque opérateur reconfigurer degreej nombre tâches associées opérateur kotto kombi lumineau lamarre durant itération soitmaxpoi nombre maximal tâches pouvant initialisées opérateur action scale scale validée alors degré parallélisme degreej défini degreej maxpoi degreej particulier scale préconisé cause activité forte critique degré parallélisme courant opérateur incrémenté expérimentations apache storm permet définir requête continue forme topologie rateurs langage programmation niveau python clojure outil permet utilisateur configurer parallélisation opérateurs contrairement neumeyer zaharia storm impose paradigme représenta données comme modèle valeur fondement approches mapreduce zaharia offre grande flexibilité définition opérateurs apache storm garantit chaque uplet suivi individuellement jusqu sortie topologie avons développé notre approche intégrant apache storm présentons protocoles résultats expérimentaux protocole expérimental notre cluster compose machines virtuelles disposant chacune intel cadencés 00ghz mémoire disque machine coordination autres dédiées exécution tâches leurs affectées chacune machines supervisors unités traitement workers notre module gestion dynamique degré parallélisme implémente interface ischedu storm coordinateur nimbus avons également déployé données mysql stocker historique différentes mesures détaillées section valider notre approche avons choisi mettre avant impact topologies caractéristiques topologie linéaire topologie étoile diamant chaque topologie caractéristique composée types opérateurs opérateurs intermediate ayant faible latence intra opérateur opérateurs possédant forte latence intra opérateur avons construit synthétique possédant plusieurs caractéristiques tribution uniforme valeurs variations caractéristiques effet comme présenté figure entrée stable émettant uplets augmente exponentiel lement stabilisant débit important enfin débit synthétique diminue paliers jusqu stabiliser débit faible avons également sorte irrégulier approcher permet observer adaptation automatique storm approche autoscale comparons solution native configurations storm lesquelles paramétrons nombre tâches opérateur notre support exécution autoscale traitement adaptatif données entrée topologies workers peuvent alloués topologie configuration confmin nombre initial tâches opérateur équivalent nombre minimal tâches intuitivement configuration confmin adaptée faibles débits entrée absorber débits maximaux configuration confexpt nombre initial tâches opérateur intermediate opérateur nombre initial tâches topolo étoile topologies linéaire diamant choix faits configuration confexpt justifie expertise entrée effet paramètres confi guration confexpt permettent absorber débits maximaux entrée gaspillage ressources chaque configuration avons mesuré latence globale topologie perfor mance calcul nombre uplets déphasés qualité résultats concerne réactivité système consommation ressources sommes intéressés nombre tâches affectées chaque opérateur résultats comparatif entre storm default autoscale confmin avons choisi exposer uniquement résultats topologie linéaire représentatifs résultats autres topologies élémentaires intégralité résultats expérimentations peuvent consultés annexe respecter pratiques programmation apache storm avons implémenté rejeu uplets lorsque annexe disponible liris rkottoko autoscale kotto kombi lumineau lamarre déphasés confmin observons absorbé conduit congestion totale topologie effet topologie mesure émettre uplets uplets source finissent déphasés rejoués indéfiniment source jusqu intervention utilisateur inverse notre proche autoscale augmente dynamiquement automatiquement degré parallélisme opérateur critique absorber variations entrée lorsque degré parallélisme diminué conséquence éviter surconsommation ressources comparatif entre storm default autoscale confexpt confexpt figure partons configuration capable absorber maximal entrée cependant cette configuration surévaluée début notre synthétique notre approche autoscale diminue degré parallélisme lorsque opérateurs nécessitent telle capacité traitement charge instar confmin degré parallélisme adapté progressivement autos parvient ainsi diminuer dynamiquement automatiquement quantité ressources allouées maintenir latence équivalente conclusion avons proposé approche permettant adapter dynamiquement automatique degré parallélisme opérateurs topologie apache storm fonction évolution entrée expérimentations montré cette proche permet limiter risques congestion opérateurs également converge configuration utilisant uniquement ressources nécessaires cette proche offre traitement élastique hypothèse support exécution fournisse fisamment ressources travaux cours portent expérimentation large échelle ainsi problématiques liées configurations ressources insuffisantes références aniello baldoni querzoni adaptive online scheduling storm international conference distributed event based systems arlington autoscale traitement adaptatif données gedik schneider hirzel elastic scaling stream proces trans parallel distrib heinze pappalardo jerzak fetzer scaling techniques stream processing proceedings international conference distributed event based systems neumeyer robbins kesari distributed stream computing platform mining workshops icdmw international conference hosseini farivar campbell storm resource aware scheduling storm proceedings annual middleware conference vancouver canada december rivetti querzoni anceaume busnel sericola efficient optimal balancing stream processing systems proceedings international conference distributed event based systems norway sattler beier towards elastic stream processing patterns infrastruc cormode deligiannakis garofalakis volume workshop proceedings schneider andrade gedik elastic scaling parallel operators stream processing parallel distributed processing ipdps international symposium stela enabling stream processing systems scale scale demand international conference cloud engineering storm traffic aware online scheduling storm distributed computing systems icdcs international conference zaharia hunter shenker stoica discretized streams fault tolerant model scalable stream processing technical report department university california berkeley summary context stream processing important guarantee properties perfor mance quality results scalability final users adjusting resource usage processing requirements order consume necessary resources major challenge dealing green approach suggested article adapts dynamically matically parallelism degree operators belonging continuous query takes account evolution input stream rates suggest metric estimating activ level operators future approach autoscale which evaluates brought parallelism degree modifications local global scope thanks integration solution apache storm performance tests comparing approach native solution stream processing engine