Extension SPARQL échantillonnage graphes Amadou Zakia Aliou Yousra Chabchoub Vanves 92130 MOULINEAUX France prenom Université Cheikh Dakar Dakar Sénégal prenom Résumé technologies sémantique utilisées gestion données Plusieurs systèmes traitement proposés SPARQL CQELS SPARQLstream SPARQL SPARKWAVE derniers étendent langage interroga sémantique SPARQL données entrée système volumineuses générées continu rythme rapide variable stockage traitement totalité deviennent coûteux raisonnement presque impossible conséquent recours techniques permettant réduire charge conservant sémantique données permet optimiser tements voire raisonnement Cependant aucune extensions SPARQL inclut cette fonctionnalité Ainsi article proposons étendre système SPARQL générer échantillons volée graphes ajoutons trois opérateurs échantillonnage UNIFORM RESER CHAIN syntaxe SPARQL expérimentations montrent performance notre extension terme temps exécution préser vation sémantique données Introduction Notre usage quotidien réseaux sociaux Facebook Twitter Linkedin teformes contenus multimédias YouTube Flickr iTunes réseaux capteurs observation relève produit continu données Plusieurs groupes recherches proposés systèmes appliquant technologiques sémantique données Étant donné vitesse génération données volume traitement totalité contenu difficile raisonnement presque impossible systèmes néces sitent techniques allocation dynamique ressources système réduction charge données entrée résumé Concernant cette dernière technique aucune extensions SPARQL proposées Streaming SPARQL Bolles SPARQL Barbieri CQELS Phuoc SPARQLstream Calbimonte Extension SPARQL échantillonnage graphes SPARQL Anicic Sparkwave Komazec plémente mécanismes permettant délester partie données construc volée résumés article proposons étendre système SPARQL ajout fonction nalités permettant échantillonner continu entrée Notre objectif réduire volée charge données entrée gagner performance réduction temps traitement préservant liens sémantiques faire avons travailler premier concerne format entrée données Toutes extensions posées prennent entrée successions triplets assortis estampilles temporelles Suivant cette forme représentation application techniques actuelles échantillonnage conduit disparition liens entre données impliquant perte partie sémantique Ainsi place format sujets predicat objet estampille adoptons approche orientée graphe succession graphes estampillés deuxième consiste ajouter nouveaux opérateurs syntaxe SPARQL implémentés module continu SPARQL article organisé comme section introduit notion graphes déduction représentation standard données sémantiques faisons extensions existantes SPARQL section section présente trois algorithmes échantillonnage implémentés section consacrée principale contribution notre travail syntaxe architecture étendue SPARQL section porte évaluation performances solution implémentée données réelles issues capteurs déployés réseau distribution potable Enfin donnons conclusion perspectives travaux graphes cette section présentons notion graphes utilisons échantillonnage SPARQL approche orientée triplet Resource Description Framework recommandation formelle représentation sémantique données données représentées forme triplet ensemble ensemble anonymes ensemble littéraux représentent information respective appelés sujet prédicat objet Golab définissent données comme séquence items conti ordonnée implicitement temps arrivée Système Gestion Données explicitement timestamp production source arrivant temps adoption technologies sémantique monde données dynamiques capteurs donné naissance notion données Ainsi introduits comme extension naturelle modèle environnement Exemple graphes données séquence ordonnée paires chaque paire constituée triplet estampille temporelle triplet observé arrivé instant monotone décroissante strictement croissante subjecti predicatei objecti subjecti predicatei objecti Étant donné vitesse génération portion fenêtre traitées utilisant langage Arasu Cette forme représentation permet traite volée large données ignore complètement structuration graphes approche orientée graphe Étant donné ensemble triplets définissons comme graphe orienté labellisé arrêtes chaque représente sujet objet triplet chaque arrête prédicat triplet notion connectivité graphe importante triplets devant constituer événement effet triplets formant événement partagent entre plusieurs chemins Cette connectivité définie séquence arrêtes partage sujet objet manière similaire graphe défini comme séquence paires graphe représentant événement complet instant occurrent figure montre exemple graphes issus capteurs déployés réseau distribution potable données prélevées concernent pression débit chlore température déploiement particulier échantillonnage triplets casser liens entre plets formant événement adoptons travaux extension approche orientée graphe garantir préservation sémantique entre données échantillon Extension SPARQL échantillonnage graphes extensions SPARQL systèmes traitement proposés partagent mêmes problématiques terme hétérogénéité données multisources absence sémantique explicite permet satisfaire requêtes complexes raisonnement cette section faisons travaux extensions SPARQL Streaming SPARQL Bolles étend simplement grammaire SPARQL ajoutant possibilité définir fenêtre physique logique représente portion système inclut opérateurs agrégation reste jusqu théorique implémenté SPARQL Barbieri ajoute définition spécifique notion fenêtre image relationnels inclut fenêtres physique logique opérateurs agrégation fonctions temporelles permet également combinaison données statiques plusieurs multiples CQELS Phuoc utilise approche native implémente système traitement réutilisant technologies existantes comme SPARQL comme SPARQL CQELS inclut également opérateurs streaming register query windowing traitement données statiques SPARQLstream Calbimonte comme SPARQL CQELS étend également SPARQL inclut également solutions additionnelles prend entrée virtuel identifié fenêtrage syntaxe inclut fenêtres logiques nombre triplets donné SPARQL Anicic oriente traitement événements complexes inclut opérateurs séquence simultanéité EQUALS OPTIONAL EQUALSOPTIONAL SPARQL opérateurs fenêtrage Sparkwave Komazec comme SPARQL garde approche basée traitement événements complexes implémente variante algorithme portion données traiter fenêtre extraite utilisant mécanismes fenêtrage similaires techniques traditionnelles utilisées SPARQL tableau fournit quelques éléments comparaison entre différents langages tension Streaming SPARQL limité terme opérateurs comparé SPARQL CQELS SPARQLstream étendent SPARQL SPARQL Sparkwave férents autres propositions introduisent notion traitement événements tèmes implémentés adoptent approches différentes architecture toujours évident façon générale quelle approche demeure meilleure Étant donné CQELS Sparkwave utilisent approches natives peuvent apporter optimisa tions adaptables contrairement autres systèmes peuvent faire optimisation algébrique Cependant fonctionnalité SPARQL système fournit System Streaming SPARQL SPARQL CQELS SPARQLstream SPARQL Sparkwave Input Format Window Triple Window UNION OPTIONAL FILTER Temporal Function Aggregate Sequence Simultaneity Continuous Query streams stream Statics Virtual Periodic Trigger Quelques éléments comparaison extensions opérateurs Union Optional Filter fenêtres logiques physiques opérateurs agrégation exécution continue multiples interrogation données tiques dynamiques fonctions temporelles architecture modulaire utilise Sesame traitement sémantique Esper traitement continu Algorithmes échantillonnage systèmes traitement données nécessitent tement rapide continu intelligent données nécessaire extraire échantillon représentatif entrée Plusieurs techniques échantillonnage proposées littérature parmi lesquelles citer échantillonnage aléatoire échantillonnage réservoir échantillonnage chain Échantillonnage aléatoire uniforme remise Comme défini Cochran échantillonnage aléatoire consiste sélectionner aléatoirement probabilité remise échantillon taille parmi ensemble indexes présents fenêtre index élément présent sélectionné seule Cette méthode basique avantage simple facile implémenter Cependant cette technique donne éléments chance inclus échantillon constitue inconvénient contexte données intéresse souvent données récentes constitution échantillon préférable favoriser données récentes rapport autres données Extension SPARQL échantillonnage graphes Échantillonnage réservoir principale échantillonnage réservoir Vitter maintenir échantillon taille réservoir chaque processus fenêtrage échantillon valide taille extrait réservoir Initialement chargeons premiers indexes réservoir Ensuite chaque arrivée nouveau élément indice remplaçons probabilité élément depuis réser Cette méthode favorise clairement éléments anciens effet avance nêtre probabilité inclusion élément réduite Ainsi éléments anciens chances inclus échantillon Échantillonnage chain redondance échantillonnage chain Babcock consiste construire échantillon taille fenêtre glissante taille Comme montre algorithme première fenêtre ajoute indexes échantillon probabilité indice remplacement index aléatoirement choisi intervalle remplace échantillon expiration fenêtre remplaçant choisi manière aléatoirement intervalle processus ainsi répété façon indépendante échantillon remplaçant construits échantillon final fusion échantillons chaque fenêtre garantir obtention éléments distincts processus choix remplaçant répété jusqu obtention nouvel élément présent échantillon Algorithm Échantillonnage chain redondance function CHAINSAMP indexes first window probability index Select random replacement probability between while index added window index Replace expired index replacement without redondancy Choose random replacement between without redondancy while function Return Cette méthode particulièrement adaptée types fenêtres glissantes moins utilisation mémoire négligeable critère choix redondant remplaçants Architecture SPARQL Architecture étendue Notre extension SPARQL Barbieri proposent SPARQL comme langage framework interrogation données sémantiques auteurs introduisent abord ajoutent nouveaux éléments syntaxe SPARQL Barbieri proposent ensuite architecture constituée modules principaux ESPER STREAM moteur SPARQL Sesame figure présente architecture SPARQL Query Translator composant réalise configuration initialisation dispatching Cette dernière tâche consiste abord considérer entrée requête respectant syntaxe SPARQL produire instances destinées modules continu statique ContinuousEngine constitué traite volée triplets appliquant ainsi notion fenêtre travers requête Arasu produit sortie ensemble quadruplets sujet prdicat objet estampille destiné moteur SPARQL SparqlEngine composant sémantique exécute partie SPARQL respond requête SPARQL chaque résultat produit module traitement continu principale contribution notre travail extension SPARQL niveau taxique architectural échantillonnage continu graphes réduire charge traiter stocker uniquement échantillon destiné éventuels analyses raisonnements notre implémentation située trois principales étapes Considération format graphe suite ordonnée triplets préservation liens sémantiques Ajout opérateurs échantillonnage syntaxe requête SPARQL Implémentation méthodes correspondant opérateurs module traite continu interne SPARQL Esper apache rdf4j sesame Extension SPARQL échantillonnage graphes Opérateurs échantillonnage présentons opérateurs échantillonnage ajoutés syntaxe requête SPARQL extension clauses STREAM source continue source statique PREFIX prefixName SELECT variables STREAM StreamIRI Window SAMPLING Token StaticIRI SAMPLING Token WHERE Mapping variables FILTER condition GROUP variables expression HAVING aggregation condition ORDER variables syntaxe étendue contient nouveaux opérateurs méthodes échantillonnage appli données continues graphes statiques repository indique plusieurs occurrences clause précède requête utilisons termes SAMPLING Token uniquement généralités écriture syntaxe SAMPLING représente opérateur utilisé prend valeurs UNIFORM RESERVOIR CHAIN Token correspond paramètres échantillonnage opérateur effet correspond pourcentage échantillonnage opérateur UNIFORM taille reser opérateur RESERVOIR fenêtre pourcentage échantillonnage opérateur CHAIN Extension architecture Notre approche extension basée implémentation méthodes échantillonnage Esper figure montre extension proposée architecture SPARQL dules traditionnels restent toujours plugins indépendants Trois instances Query Trans lator ContinuousEngine SparqlEngine toujours créées cette étendues QueryTranslator parsons requête reçue vérifiant syntaxe rateurs échantillonnage parties statique continue STREAM requête inclut opérateur échantillonnage entrants traités continu aucune phase échantillonnage préalable Sinon après lidation créons instances ContinuousSampQuery SparqlSampQuery seront exécuter respectivement ContinuousEngine SparqlEngine module ContinuousEngine reçoit requête continue opérateurs échantillonnages associés Chaque méthode échantillonnage invoquée appliquée continu fenêtre graphes entrant WindowSampling exécutons ensuite partie Esper requête SPARQL données disponibles échantillon résultat alors transmis troisième module SPARQLEngine SPARQLEngine dernier entrer données issues continu prend entrée échantillons statiques SampStaticRDF issus graphes sources statiques repository fichier Vient dernière étape exécution proprement requête SPARQL graphes statiques continus échan tillonnés Évaluation Cette section évalue qualité pertinence notre extension faire sommes intéressés performances obtenues terme temps exécution préser vation sémantique données échantillonnage considérons traitement ensemble 80000 graphes chaque graphe étant composé triplets ensemble données envoyé forme graphes triplets respectivement débits graphes triplets seconde évaluation performances temps exécution considérons requête simple retourne après échantillonnage derniers graphes reçus moyenne valeurs pression prélevées chaque capteur REGISTER QUERY AvgWaterPressure PREFIX wtrdi SELECT sensorID pressureValue AvgPressure STREAM wtrdi RANGE TRIPLES SAMPLING window percent WHERE sensorID hasPressure pressureValue GROUP sensorID opérateurs échantillonnage UNIFORM RESERVOIR figures observons courbes évolution temps traitement requête faisant varier respec tivement pourcentage échantillonnage percent taille réservoir Enfin opérateur CHAIN observons chaque pourcentage échantillonnage courbe évolution temps traitement fonction taille fenêtre Window Uniforme Réservoir Chain noter échantillonnage uniforme remise temps traitement croît fonction pourcentage échantillonnage notons également évolution similaire échantillonnage réservoir figure fonction taille réservoir maintenue Extension SPARQL échantillonnage graphes mémoire durant exécution évolution temps traitement échantillonnage chain figure dépend taille fenêtre ratio notons ratio temps exécution requête évolution croissante explique doute technique recherche aléatoire remplaçants duplication éléments échan tillon Ainsi observations confirment performances gagnées réduisant volée charge entrée évaluation préservation liens sémantiques données figurant échan tillon considérons requête suivante REGISTER QUERY sourceSensorID PREFIX wtrdi SELECT sensorID pressureValue STREAM wtrdi RANGE TRIPLES SAMPLING window percent WHERE sensorID hasPressure pressureMnemonic OPTIONAL pressureMnemonic value pressureValue ORDER sensorID Cette requête abord exécutée continu échantillonnage échantillon orienté triplet enfin échantillonnage orienté graphe considérons autre débit temps exécution requête retourne derniers graphes triplets observés échantillon capteur valeur pression mesurée considérons format graphe représentant identifiant capteur valeur pression intermédiaire autre avons calculé chaque méthode échantillonnage triplet graphe nombre résultats corrects complets identifiant capteur valeur pression correspondante avons suite calculé perte rapport résultats corrects complets échantillonnage utilisant formule suivante perte NbrSE NbrAENbrSE NbrSE Nombre résultats corrects complets échantillonnage NbrAE nombre résultats corrects complets échantillonnage tableau présente perte calculés variant paramètres échantillonnage méthodes uniforme réservoir nombre résultats corrects complets NbrSE 10625 observons échantillonnage orienté graphe perte large ssous celui orienté triplet effet explique échantillonnage aléatoire orienté triplet identifiant capteur figurant échantillon retrouver valeur pression correspondante comparai échantillonnage orienté graphe préserve liens sémantiques garantissant ainsi capteur toujours associé valeur pression échantillon Conclusion perspectives gestion données massifs demeure préoccupation industrielle scientifique application technologies sémantique données reste Opérateur Échantillonnage orienté triplet Échantillonnage orienté graphe Résultats corrects complets perte Résultats corrects complets perte UNIFORM RESERVOIR perte entre échantillonnage graphe triplet volumes actuels fréquence génération rapide avons article parti techniques échantillonnage existantes proposant extension système SPARQL échantillonnage temps graphes utilisation graphes permis préserver sémantique échantillons améliorer ainsi représentativité échantillon obtenu comptons travaux futurs échantillonner volée utilisant méthodes prennent considération spécificités contexte requête exécutée échantillon faire échantillonnage orienté contenu graphes Remerciements travail réalisé cadre projet Waves projet conception développement plateforme traitement distribué données massifs domaine application concerne supervision temps réseau distribution potable Références Anicic Fodor Rudolph Stojanovic sparql unified language event processing stream reasoning Proceedings international conference World Arasu Widom language continuous queries streams relations Database Programming Languages Springer Babcock Datar Motwani Sampling moving window strea Proceedings thirteenth annual symposium Discrete algorithms Society Industrial Applied Mathematics Extension SPARQL échantillonnage graphes Barbieri Braga Grossniklaus execution environment sparql queries Proceedings International Conference Extending Database Technology Bolles Grawunder Jacobi Streaming sparql extending sparql process streams Semantic Research Applications European Seman Conference Tenerife Canary Islands Spain Volume Springer Calbimonte Corcho Enabling ontology based access strea sources Semantic Springer Cochran Sampling techniques Wiley Golab Issues stream management Sigmod Record Komazec Cerri Fensel Sparkwave continuous schema enhanced pattern matching streams Proceedings International Conference Distributed Event Based Systems Phuoc Parreira Hauswirth native adaptive approach unified processing linked streams linked Semantic Springer Vitter Random sampling reservoir Transactions Mathematical Software Summary Semantic technologies increasingly adopted stream management Several stream processing systems proposed SPARQL CQELS SPARQL SPARQL SPARKWAVE These extend semantic query language SPARQL Input large continuously generated storage processing entire stream become expensive reasoning almost impossible Therefore technology reduce while keeping semantics required optimize treatments reasoning However SPARQL extensions include feature paper propose extend SPARQL system generate samples graphs streams while keeping semantics three sampling operators UNIFORM RESERVOIR CHAIN SPARQL syntax These operators integrated Esper SPARQL management module Experiments performance extension terms execution preserving semantics