Antipattern Detection Ontologies Experiment using SPARQL Queries Catherine Roussey Oscar Corcho Zamazal François Scharffe Stephan Bernard Irstea Cemagref Landais 50085 Aubiére France Ontology Engineering Group Universidad Politécnica Madrid Spain Knowledge Engineering Group University Economics Prague Czech Republic LIRMM Université Montpellier France Abstract Ontology antipatterns structures reflect ontology modelling problems because inconsistencies reasoning performance formalisation domain knowledge propose methods tection antipatterns using SPARQL queries conduct experiments detect antipattern corpus ontologies Introduction concept knowledge modelling pattern ontology design pattern refer modelling solutions allow solving recurrent knowledge modelling ontology design problems Presutti Antipatterns patterns ineffective timal practice representing worst practices about structure design ontology There several tools detection antipatterns Pellint focuses detection repair antipatterns improve ontology reasoning performance Tools Explanation Workbench described Horridge SWOOP described Kalyan provide justifications inconsistencies ontologies based outputs reasoners However these contributions reasoner provide their justifications antipattern detection methods implement general approach antipattern applied without reasoner something useful large ontologies number errors ontology large previous justification systems handle properly providing timeouts detect lected antipattern transformed SPARQL queries general antipatterns correspond several queries because abstract structures several logical forms expressed Description Logics Moreover proposed several tection methods switch inferences before running SPARQL queries transform original ontologies where simpler SPARQL queries paper structured follows Section briefly describes antipattern experiments Section describe methods followed order experiments Section describes experiment setup results pellet owldl pellint Antipattern Detection experimentation Finally Section provides conclusions based experiment results outlines steps sample antipattern OnlynessIsLoneliness patterns commonly domain experts their implementation tologies identified Corcho These patterns resulted unsatisfiable classes modelling errors misuse misunderstanding expressions section describe antipattern which experience shown easier understand debug domain experts ontology developer created universal restriction instances linked property instances universal restriction added saying instances linked instances disjoint general because ontology developer forgot previous axiom class parent classes SPARQL based detection antipattern section describe different methods elaborated order antipatterns ontologies means SPARQL queries based usage PatOMat ontology pattern detection tools PatOMat suite tools which focused detection patterns ontologies their transformation tection based Pellet enables processing SPARQL queries ontologies producing report terms numbers patterns detected SPARQL queries results details ontology axioms which pattern detection axioms asserted ontologies combination asserted inferred axioms query ontologies means query language SPARQL agnostic about underlying knowledge representation model actually querying serialization Other options available current state ontology pattern matching transformation language associated tools described Iannone recent querying syntax based Manchester syntax SPARQL language dedicated query triples dedicated query serialization expressions because contain constructs subClassOf ComplementOf DisjointWith Nevertheless release paper svabo patomat detectionTool sourceforge clarkparsia pellet clarkparsia weblog pellet21 Roussey construction SPARQL queries easier develop query translator transforms input query using SPARQL abstract syntax defined Sirin Parsia SPARQL query Transforming antipatterns SPARQL queries trivial antipat several SPARQL queries needed detect antipattern occurrences class definition difficulties several points antipattern associated several logical formulae syntax example presented formulae tipatterns logical formulae composed several atomic axioms example three formulae antipattern contains three atomic axioms Ontology developer different implementation style designing ontology example developers prefer write class definition class defined conjunction unamed classes Others prefer write short definitions class defined atomic axioms antipattern formula atomic axiom located different places class definition atomic axiom belong class definition inherited parent class definition atomic axiom stated ontology developer infered reasoner build queries first imagine different versions antipattern formulae using SPARQL abstract syntax imagine where atomic axiom stated ontology developer class definition limit imagination class definitions conjunctions embed those queries inferences should reasoner account disjoint axioms symetric disjoint axiom inferred logical negation automatically translate SPARQL queries SPARQL automatically generate SPARQL queries which merges different versions antipattern detection methods defined atomic axiom condition necessary sufficient associated named class using constructor parameters should named example atomic axiom Antipattern Detection shown figure describe methods followed order detect antipatterns ontology corpus Method SPARQL Queries Asserted Ontology Axioms proach account SPARQL query engines consider inferences ontologies However assumption there cases where ontologies cannot processed reasoner reasoner results cannot obtained reasonable normally happens large ontologies ontologies large number errors Method SPARQL Queries Materialised Inferences Ontologies possible reasoner materialise inferences reasoner ontologies SPARQL queries resulting ontologies called materialised ontologies Method SPARQL Queries Transformed Ontologies complexity creating large number SPARQL queries antipattern different ontology developers different implementation styles propose follow process where apply transformations before executing queries Transformations goals harmonise implementation style ontology simulate axioms infered soner current transformations apply ontology contains where named classes axioms named class defined conjunction named unamed classes split several simpler axioms example class definition axioms parent class contains axiom direct child class example definition class direct child axiom point transformation repeated class hierarchy explored behaviour SPARQL query checking method asserted ontology after transformation materialised ontology after trans formation Finding antipatterns world ontologies section describe results experiments corpus ontologies tracted those publicly available indexed Watson semantic search engine first describe ontology corpus results applying differ methods described Section ontology corpus Experiments ontologies experimentation comes experience ontology debug already creation update antipattern catalogue presented Corcho contains HydrOntology which classes whose unsatisfiables Forestal Ontology which classes whose unsatisfiable Tambis ontology which classes whose unsatisfiable Sweet Numeric ontology which classes whose unsatisfiable versity ontology which classes whose unsatisfiable Notice watson Roussey experiment Hydrontology Tambis ontologies cannot processed Pellet reasoner reasonable following experiments ontologies using antipattern detec methods described Section Search original ontologies asserted axioms using SPARQL queries inference Search materialised ontologies asserted inferred axioms using SPARQL queries after applying reasoner Pellet SP_Trans Apply transformations original ontologies search serted axioms using SPARQL queries inference SP_Trans Apply transformations original ontologies search rialisation these harmonised ontologies these experiments keyword MANUAL refer manual detection process using basic debugging tools provided ontology editors detection method baseline respect detected current state experiments based previous evaluate precision antipattern detection process analysed manually ontologies assigned antipattern occurrence following three values Inconsistency antipattern occurrence participates unsatisfiability classes modelling error Unknown Inconsistency antipattern occurrence linked unsatisfi ability classes modelling error evaluator about False Inconsistency antipattern occurrence participate unsatisfi ability classes modelling error Results detection pattern composed atomic axioms presented formulae formulae possible depending implementation style ontology developer ontology antipattern antipattern formulae these formulae imagine class definition composed conjunctions parts defined SPARQL queries results presented table detection antipattern method results manual SP_Trans SP_Trans antipattern detection unexpected notice disjoint atomic axiom detected because infered sites google ontologyantipattern Antipattern Detection reasoner using reasoner produce unexpected antipattern occurrences detection methods enought detect antipattern should limit detection method beginning pattern without disjoint axiom Conclusion future paper shown antipattern detected using different based SPARQL queries reasoners transformation tools cases these antipattern detection methods sensitive implementation style ontology developer Moreover reasoners cannot response unexpected results future focus refinement methods proposed paper improve detection results detect antipatterns References Corcho Roussey Vilches Blázquez Pérez Pattern based ontology debugging guidelines Workshop Ontology Patterns collocated International Semantic Conference Workshop ceedings Horridge Parsia Sattler Laconic precise justifications Proceedings Iannone Rector Stevens Embedding knowledge patterns Proceedings Kalyanpur Parsia Sirin Hendler Debugging unsatisfiable classes ontologies Journal Semantics Presutti Gangemi David Suárez Figueroa Montiel Ponsoda Poveda deliverable library ontology design patterns reusable solutions collaborative design networked ontologies Project project Sirin Parsia SPARQL SPARQL query Experiences Directions Workshop OWLED2007 Résumé antipatrons conception ontologies structures abstraites reflètent problèmes modèlisation peuvent mener incohérences logiques mauvaises formances moteurs inférences formalisations inadéquates connaissances domaine important détecter antipatrons corriger ontologies article proposons quatre méthodes détection antipatrons partir requêtes SPARQL évaluer méthodes avons testé requêtes SPARQL ensemble ontologies réelles