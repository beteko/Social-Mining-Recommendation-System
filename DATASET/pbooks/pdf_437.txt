Détection AntiModèle ontologies expérience utilisant SPARQL requêtes Catherine Roussey Oscar Corcho Ondřej Zamazal François Scharffe Stephan Bernard Irstea Cemagref Landais 50085 Aubière France Ontology Engineering Group Universidad Politécnica Madrid Espagne Groupe ingénierie connaissances Université économie Prague République tchèque LIRMM Université Montpellier France Résumé Ontologies structures reflètent ontologie modélisation problèmes conduisent incohérences mauvaises performances raisonnement mauvaise formalisation connaissances domaine proposons quatre méthodes tection requêtes utilisant SPARQL menons expériences détecter corpus antimodèle ontologies Introduction concept modèle modélisation connaissances modèle conception ontologie utilisée faire référence solutions modélisation permettent résolution modélisation connaissances récurrente ontologie problèmes conception Presutti Antipatterns modèles inefficaces timal pratique représente pires pratiques façon structurer concevoir ontologie existe plusieurs outils peuvent utilisés détection Pellint porte détection réparation ontologie améliorer performances raisonnement outils décrits Workbench Explication Horridge SWOOP décrit Kalyan fournir justifications incohérences ontologies basées sorties raisonneurs Cependant toutes contributions besoin raisonneur fournir leurs justifications méthodes détection AntiModèle mettre œuvre approche générale fonctionner antimodèle appliquée utilisation raisonneur utile grandes ontologies lorsque nombre erreurs ontologie grande précédente systèmes justification mesure gérer correctement fournissant délais attente détecter lected antimodèle avons transformé ensembles requêtes SPARQL général correspondent plusieurs patterns requêtes structures abstraites peuvent avoir plusieurs formes logiques lorsqu elles exprimées description Logiques avons proposé plusieurs méthodes Tection pouvons activer désactiver inférences avant exécuter requêtes SPARQL pouvons également transformer ontologies originaux forme requêtes SPARQL simples peuvent exécutés document structuré comme article décrit brièvement antimodèle utilisé exécuter expériences section décrit méthodes avons suivi exécuter expériences section décrit configuration expérience résultats pellet owldl pellint AntiModèle expérimentation détection Enfin section fournit quelques conclusions travail résultats expérience décrit prochaines étapes faire notre travail échantillon antimodèle OnlynessIsLoneliness ensemble modèles couramment utilisés experts domaine œuvre tologies identifiés Corcho modèles donné cours insatisfiables erreurs modélisation raison mauvaise utilisation mauvaise compréhension expressions cette section allons décrire antimodèle celui notre expérience montré facile comprendre débogage experts domaine développeur ontologie restriction universelle instances peuvent propriété instances Ensuite nouvelle restriction universelle ajouté disant instances peuvent instances disjoints général parce développeur ontologie oublié axiome précédent classe classes parent détection basée SPARQL huile antimodèle cette section décrivons différentes méthodes avons élaborées ontologies moyen requêtes SPARQL basées utilisation PatOMat ontologie outil détection motif Cette partie outils suite outils PatOMat concentre détection modèles ontologies transformation outil tection basée Granules permet traitement ensemble requêtes SPARQL ensemble ontologies rapport termes nombre modèles détectés requêtes SPARQL résultats détails chaque ontologie axiomes lesquels outil détection motif exécuté axiomes affirmés ontologies combinaison axiomes affirmés inférées requête ontologies moyen langage requête SPARQL agnostique modèle représentation connaissances jacente Interrogation sérialisation autres options disponibles actuel technique ontologie appariement transformation modèle langue outils associés décrit Iannone récente syntaxe interrogation syntaxe Manchester SPARQL langage dédié requête triplets dédiés interroger sérialisation expressions parce contiennent constructions comme subClassOf complementOf disjointWith Néanmoins faire version utilisée document adresse svabo patomat detectionTool sourceforge clarkparsia pellet clarkparsia weblog pellet21 Roussey construction SPARQL requêtes facile développons traducteur requête transforme requête entrée SPARQL syntaxe abstraite définie Sirin Parsia requête SPARQL Transformer requêtes SPARQL tâche triviale chaque antimodèle plusieurs requêtes SPARQL nécessaires détecter occurrences AntiModèle définition classe difficultés proviennent plusieurs points antimodèle associée plusieurs formules logiques syntaxe exemple avons présenté formules tipatterns huile Certaines formules logiques composées plusieurs axiomes atomiques exemple trois formules antimodèle HUILE contient trois axiomes atomiques développeur Ontologie avoir style œuvre différente conception ontologie exemple certains développeurs préfèrent écrire longue définition classe classe définie conjonction classes unamed autres préfèrent écrire courtes définitions classe définie ensemble axiomes atomiques Ainsi formule modèle axiome atomique placé différents endroits définition classe axiome atomique appartenir définition classe héritée définition classe axiome atomique développeur ontologie raisonneur inférer construire requêtes imaginons abord différentes versions chaque formules AntiModèle utilisant syntaxe abstraite SPARQL essayons imaginer axiome atomique développeur ontologie définition classe limitons notre imagination définitions classes quatre conjonctions intégrons requêtes quelques conclusions devraient faites raisonneur prenons compte axiomes disjoints symetric axiome disjoints déduit négation logique Ensuite traduisons automatiquement chaque requêtes SPARQL SPARQL générons automatiquement requêtes SPARQL regroupe toutes différentes versions FIGUE méthodes détection AntiModèle avons défini axiome atomique comme condition nécessaire suffisante associé classe appelée utilisant constructeur paramètres doivent nommés exemple axiome atomique Détection AntiModèle Comme montre figure allons maintenant décrire quatre méthodes avons suivi détecter corpus patterns ontologie Méthode Utilisation requêtes SPARQL Affirmé Ontologie Axiomes cette proche prenons compte moteurs SPARQL considèrent déductions peuvent faites ontologies Cependant supposons ontologies peuvent traitées raisonneur résultats raisonneur peuvent obtenus délai raisonnable produit normalement grandes ontologies ontologies grand nombre errors Méthode Utilisation requêtes SPARQL matérialisées Déductions ontologies Quand possible utiliser raisonneur matérialisent toutes conséquences peuvent faites raisonneur ontologies exécuter requêtes SPARQL ontologies résultant appelé matérialisé ontologies Méthode Utilisation requêtes SPARQL Transformed ontologies raison complexité création grand nombre requêtes SPARQL antimodèle différents développeurs ontologies peuvent avoir différents styles œuvre proposons suivre processus étapes applique transformations avant exécuter requêtes transformations objectifs harmoniser style œuvre ontologie simuler certains axiomes Soner inférer transformations actuelles appliquons Lorsque ontologie contient nommés classes ajoutons nouveaux axiomes Lorsqu classe nommée définie conjonction classes nommées unamed avons divisé plusieurs axiomes simples Prenons comme exemple définition classe ajoutons axiomes Lorsqu classe parent contient axiome ajoute aussi catégorie enfant direct Prenons comme exemple définition classe enfant direct ajoute axiome moment cette transformation répète hiérarchie classes avons exploré comportement méthode vérification requête SPARQL ontologie affirmé après transformation ontologie matérialisée également après transformation Trouver ontologies monde cette section décrivons résultats expériences corpus ontologies subdivisées secteurs public indexé moteur recherche sémantique Watson allons abord décrire ontologie corpus résultats application méthodes férents décrites section corpus ontologie expériences ontologies utilisées notre expérimentation vient notre expérience ontologie Debug tâche entre utilisés création catalogue présenté antimodèle Corcho contient HydrOntology classes unsatisfiables Forestal ontologies classes insatisfiable ontologie Tambis classes insatisfiable ontologie douce numérique classes insatisfiable ontologie versité esprit classes insatisfiable watson Roussey notre expérience Hydrontology ontologies Tambis peuvent traitées raisonneur granulés délai raisonnable avons expériences suivantes ensemble ontologies utilisant méthodes détec AntiModèle décrites section Rechercher ontologies origine uniquement axiomes affirmées requêtes SPARQL aucune inférence Recherche matérialisée ontologies affirmé axiomes inférée requêtes SPARQL après application raisonneur pellets SP_Trans Appliquer transformations ontologies origine recherche uniquement axiomes BRANCHÉ requêtes SPARQL aucune inférence SP_Trans Appliquer transformations ontologies origine recherche rialisation ontologies harmonisées expériences utilisons aussi MANUEL faire référence processus détection manuelle outils débogage fournis éditeurs ontologie Cette méthode détection définit ligne rapport détecté actuel technique avons également expériences courir précédents évaluer précision processus détection antimodèle avons analysé manuellement chacun ontologies notre attribué chacun occurrence antimodèle trois valeurs suivantes Incohérence participe occurrence AntiModèle insatisfiabilité classes erreur modélisation Information inconnue Incohérence apparition antimodèle capacité unsatisfi classes erreurs modélisation évaluateur certain Incohérence apparition antimodèle participe capacité unsatisfi classes erreurs modélisation Résultats HUILE détection configuration huile composé axiomes atomiques avons présenté formules formules possibles fonction style œuvre développeur ontologie ontologie formules antimodèle AntiModèle huile formules imagine définition classe composée parties conjonctions avons défini requêtes SPARQL résultats présentés tableau détection modèle méthode résultats manuel SP_Trans SP_Trans HUILE détection antimodèle inattendu remarque axiome atomique disjoints détecté https sites google ontologyantipattern inférer Détection AntiModèle raisonneur utilisant produit raisonneur inattendus occurrences AntiModèle Ainsi moment méthodes détection bonne enought détecter HUILE antimodèle devons limiter notre méthode détection début motif huile axiome disjoints Conclusion travaux futurs article avons montré comment antimodèle huile détectée utilisant différentes basés utilisation requêtes SPARQL raisonneurs outils transformation nombreux méthodes détection AntiModèle sensibles style œuvre développeur ontologie raisonneurs peuvent utilisés raison mauvais temps réponse résultats inattendus Notre travail futur concentrera perfectionnement méthodes avons proposées présent document améliorer résultats détection allons également essayer détecter nouveaux patterns Références Corcho Roussey Vilches Blázquez Pérez basée modèles ontologie directives débogage atelier modèles Ontologie colocalisé International Semantic Conference ceedings atelier Horridge Parsia Sattler justifications laconiques précises Actes Iannone recteur Stevens intégration modèles connaissances Actes Kalyanpur Parsia Sirin Hendler Débogage cours insatisfiables ontologies Journal Sémantique Presutti Gangemi David Suárez Figueroa Montiel Ponsoda Poveda livrable bibliothèque modèles conception ontologie solutions réutilisables collaborativ conception ontologies réseau Projet projet Sirin Parsia SPARQL SPARQL Expériences directions Atelier OWLED2007 antipatrons conception ontologies structures abstraites reflètent Problèmes modelisation évincés peuvent Incohérences Mener Logiques formances Mauvaises inférences Moteurs formalisations connaissances heuristiques inadéquates domaine important antipatrons Détecter versez ontologies Corriger article methods proposons quatre saisons antipatrons détection partir requests SPARQL EVALUER methods tested Avons requests SPARQL ensemble ontologies REELLES