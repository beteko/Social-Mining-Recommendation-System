Development distributed recommender system using Hadoop Framework Chiky Renata Ghisloti Zakia LISITE Notre Champs 75006 Paris firstname lastname Abstract Producing quality recommendations become challenge recent years Indeed growth quantity involved ommendation process scalability effectiveness problems These issues encouraged research technologies Instead develop recommender system improve already existing method tributed framework considered based known quality simplicity MapReduce project Hadoop Source project played fundamental research undoubtedly encouraged facilitated construction application supplying tools needed research prove building distributed recommender system possible simple productive Introduction amount information greatly increased decade nomenon promoted advance recommender systems research Recommender Systems providing personalized recommendations users gesting useful items usually dealing enormous amounts Amazon example incorporated recommender systems personalize online store recorded million users several million catalog items Linden recommender systems approaches developed decade considerable amount constructed evaluated small datasets Furthermore volume information greatly increased years several recommender systems suffer performance scalability problems dealing larger datasets paper describing method possibly overcome these issues propose distributed recommender system intend demonstrate could easily developed present results chose Slope Lemire Maclachlan recommender algorithm study MapReduce Ghemawat project construct distributed system Development distributed recommender system using Hadoop Framework MapReduce framework introduced Google supports distributed computing large amount cluster computers source implementation frame available Apache Hadoop project paper describe process adapting chosen recommender algorithm Hadoop platform verify performance comparing distributed version standalone method remainder paper organized follows Section describes state Section present global approach construct distributed recommender system Section presents experimental study results Finally Section concludes paper gives outlook ongoing future research Background Slope Slope OneLemire Maclachlan simple efficient recommender algorithm Introduced Daniel Lemire Maclachlan involves simpler majority other collaborative filtering implementations While these usually calculate similarity between vectors items using cosine Pearson methods Slope approach recommends items users based average difference preferences items algorithm create linear relation between items preferences relation Slope comes multiplied basically calculates difference between ratings items every rated creates average difference every items prediction example would ratings given other items difference between could obtain average Being rating given difference between ratings supposing items prediction rating could given Below present pseudo version algorithm divided parts preprocessing prediction phase preprocessing phase calculate difference between preference values every every other every rating difference average Ghisloti prediction phase every rated every rated rating return predicted items terms execution expensive phase preprocessing which precomputed algorithm attractive because online portion prediction phase running depend number users depends mostly average rating difference between every items Suppose users items computing average differences could steps storing matrix could expensive could units storage Approach MapReduce framework introduced Google processing larges amounts framework simple derived commonly known reduce functions functional programming divides problem smaller problems distribute these cluster computers combines answers these problems obtain final answer First receives value produces intermediary value output these values sorted framework regrouped values belonging together combine function input reduce supplied corresponding values processed reduce final output produced primary input chopped framework which responsible aging intermediary transition remains defining input output interfaces providing reduce functions Based started identifying input format create MapReduce Slope Method format decide typical format UserID identification ItemID identification Rating Slope preprocessing phase divided parts first items diffs calculated second diffs every items added together create average between items approach follows First input divided independent order regroup ratings items using users diffs computed After intermediary diffs would united calculate average items Relying method MapReduce separated processes created divides input independent chunks calculates diffs other having lists items calculates overall between items Development distributed recommender system using Hadoop Framework first MapReduce presents receives original input produces intermediary values containing input rating relating these These values sorted framework reduce receives items ratings Reduce calculates diffs between every items certain return output second would identity function meaning value given input would given output other secondary reduce would receive itemi itemj values diffs related items would simple matter calculating average every items would result final every items containing averages diffs Experimental evaluation experimental tests dataset provided MovieLens MovieLens based recommender system where users movies receive recom mendations Currently provides three packages datasets ratings movies users second million ratings movies users third million ratings package 10681 movies 71567 users These ratings represent grades giving MovieLens users movies varying liking movie really liking movie files contain information UserId ItemId Rating format paper million million ratings packages ensuring correctness applications forged small users rating enable clear simple comparison results dataset contains users items ratings master slave machines where experiments place hardware specification following characteristics processor Intel 100GB Ubuntu Linux master slaves fully distributed experimentation first experimental procedure execution SlopeOne approach dataset output results compared check results matched Finally execution approaches compared analyzed tests phases dataset phase compare execution milliseconds between every Slope approach standalone pseudo distributed fully distributed course uniformity final result first experiment small forged output three approaches compared correct result three presented correct output proving correctness algorithms generate final execution approach executed three times result presented figure average these three executions second experimental phase testing million MovieLens dataset again three approaches execution above average three single executions resuls given figure Finally phase testing million dataset MovieLens Standalone operation amount presenting exception which OutOfMemoryError other approaches succeeded finish Ghisloti Exectution three datasets presented average execution represented figure analyzing results figure possible certain point becomes reasonable Hadoop every framework provides abstraction layer executing framework initial While testing first second dataset visible weight running Hadoop greater benefits could bring Hence running standalone method smaller other approaches thought these threads computer nodes working third scenario fully distributed approach overcomes pseudo distributed possible reason pseudo doing better other scenarios involved establishing distributed cluster increase amount advantages distributed cluster difference provided faster performance research verify distributed approach really brought advan tages recommender Verifying final results clear small dataset equal inferior million ratings standalone method better approach However proved dealing larger amounts Hadoop framework feasible solution volume grows fully distributed better perfor mance other methods standalone method perform third scenario couldn result Conclusion Recommender systems substantial challenge dealing amount paper solving problem describing devel opment distributed recommender system possible using powerful tools Hadoop source MapReduce implementation slopeone efficient collaborative recommender algorithm simplicity Slope added strong structure offered Hadoop possible complete results showed indeed distributed framework provide results hopefully encouraged interest research future analyze other types recommendation algorithms study possibility making effective large using Hadoop other avalaibe frame Development distributed recommender system using Hadoop Framework works Nicolae consider generic distribution recommendation algorithms requires effort rewriting References Apache hadoop hadoop apache GroupLens Architecture Collaborative Filtering Netnews MovieLens dataset grouplens Ghemawat MapReduce Simplified Processing Large Clusters Lemire Maclachlan Slope Predictors Online Rating Based Collab orative Filtering Proceedings Mining Linden Smith Amazon recommendations laborative filtering Volume Nicolae Moise Antoniu Bougé Dorier BlobSeer Bringing Throughput under Heavy Concurrency Hadoop Reduce Applications International Parallel Distributed Processing Symposium IPDPS Atlanta États Résumé quantité information leWeb augmenté dernières années phénomène favorisé progression recherche domaine systèmes recommandation systèmes intention aider utilisateurs fournissant suggestions utiles proposons papier utiliser algorithme recommandation existant favoriser montée charge utilisons framework développement Hadoop propose implémentation paradigme MapReduce distribution traitements Notre principal objectif papier prouver construction système recommandation distribué seulement possible également simple bénéfique