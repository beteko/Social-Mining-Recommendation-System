actes_non_num 351rotes détection intrusions environnement collaboratif sécurisé nischal verma françois trousset pascal poncelet florent masseglia guwahati assam india nischaliit gmail lgi2p ecole mines scientifique besse 30035 nîmes france trousset lirmm 34392 montpellier cedex france poncelet lirmm inria sophia antipolis route lucioles 06902 sophia antipolis france florent masseglia sophia inria résumé pallier problème attaques réseaux nouvelles proches détection anomalies proposées dernières utilisent signatures attaques comparer nouvelle requête ainsi déterminer attaque cependant systèmes défaut quand requête existe signature généra lement problème résolu expertise humaine mettre signatures toutefois arrive fréquemment attaque détectée autre organisation serait utile pouvoir bénéficier cette connaissance enrichir signatures cette information difficile obtenir organisations souhaitent forcément indiquer attaques article proposons nouvelle approche détection intrusion environnement collaboratif sécurisé notre approche permet considérer toute signature décrite forme pressions régulières garantir aucune information divulguée contenu différents sites introduction déploiement ordinateurs réseaux considérablement augmenté risques causés attaques systèmes informatiques deviennent problème entreprises organisations alors auparavant nombreuses attaques focalisaient serveurs étaient souvent configurés maintenus attaques récentes profitent failles sécurité services applications vulnérables heady graham escamilla pallier problème nouvelles approches appelées systèmes détection intrusions parition installés réseaux objectif analyser trafic requêtes détecter comportements malveillants prelude snort peuvent classés grandes catégories mchugh proctor systèmes détec anomalies cherchent détecter attaques systèmes détection détection intrusion collaborative sécurisée après avoir spécifié comportement normal rechercher comportements reconnus cadre article intéressons particulièrement systèmes détection anomalies principe général suivant comparai effectuée entre nouvelle requête signatures attaques représentées forme expressions régulières exemple attaque cherche récupérer fichier passes machine passwd pourra détectée expression régulière suivante passwd traditionnellement signatures obtenues partir algorithmes apprentissage sites spécialisés osvdb database systèmes largement utilisés aujourd blème essentiel savent gérer attaques appartiennent signatures ainsi lorsqu requête reconnue alarme déclenchée requérir expertise extérieure récemment nouvelles approches détection appelées collaborative intrusion detec systems cuppens miege janakiraman locasto zhang parashar proposées comparaison isolés offrent possibilité améliorer considérablement temps réactions efficacité détections partageant entre répartis sieurs organisations informations attaques principe général approches échanger réseaux informations survenues différents cependant traditionnellement informations échangées limitent adresses sources attaques cuppens miege janakiraman locasto considèrent données peuvent librement échangées parmi pairs cette dernière contrainte forte entreprises raisons confidentialités souhaitent elles attaquées veulent donner information signatures utilisées article proposons approche détection collaborative sécurisée appelée srexm secure regular expression mapping garantit données privées seront divulguées notre approche différentes expressions régulières contenues différents sites collaboratifs peuvent utilisées aucune information divulguée extérieur sites collaboratifs toute liberté travailler signa tures attaques attaques ainsi lorsqu nouvelle requête intervient réponse obtenue simplement attaque attaque sible répondre bases données information permettre décider notre connaissance existe travaux abordé problématique environnement collaboratif seuls travaux locasto considéré aspect collaboratif sécurisé contexte curisation concerne principalement informations adresses ports utilisés utilise filtres bloom échanges notre problématique différente mesure souhaitons échanger données complexes adresses ports utilisées expressions régulières article organisé manière suivante section présentons problé matique aperçu général approche proposé section différents rithmes utilisés décrits section section conclut présentant différentes perspectives verma problématique soient données telles chaque données correspond tuple correspond identifiant ensemble expressions régulières toute expression régulière exprimée forme automate déterministe hopcroft représenté tuple aexpi aexpi représente ensemble états automate initial automate final ensemble états finaux trans ensemble transitions automate chaque transition quadruplet einitial condition efinal longueur signifiant automate einitial condition condition vérifiée alors automate passe efinal déplace longueur effectué chaîne filtrer notre approche associons également valeur entière chaque final cette valeur spécifie attaque booléen aussi fournir attaque entier exemple considérons expression régulière suivante passwd automate associé décrit figure tableau gauche représente matrice transition celui droite différentes conditions respecter passer initial final exemple passer final condition vérifier portion courante chaîne longueur passwd cond1 cond2 cond3 cond4 cond5 cond6 cond7 cond8 cond9 cond10 cond11 cond12 cond13 cond14 cond1 cond2 cond3 cond4 cond5 cond6 cond7 cond8 cond9 cond10 cond11 cond12 cond13 cond14 passwd automate associé expression régulière définition soient données telle requête problématique recherche expressions régulières environne collaboratif sécurisé consiste vérifier existe expression régulière contenue laquelle matching garantissant aucune fournisse directement information contenu détection intrusion collaborative sécurisée colluding colluding processing control architecture générale srexm approche srexm cette section proposons survol architecture sécurisée srexm secure regular expression mapping définie pouvoir répondre problématique préser vation privée environnement détection collaboratif inspirée travaux kantarcioglu vaidya cette architecture offre avantage pouvoir réali différentes opérations garantissant aucune parties puisse avoir accès données privées bases origine outre chargé fournir requête tester architecture nécessite quatre sites collaboratifs honnêtes goldreich suivent protocole correctement libres utiliser information collec pendant exécution protocole sites indépendants collectent stockent évaluent information manière sécurisée différentes fonctions sites suivantes contrôle control utilisé ordonnancer différentes opérations comparaisons expression régulière interagit sites collaboratifs sites collaboratifs colluding sites sites triques collectent données bruitées toutes bases ainsi requête bruitée tester contrôle interagissent réalisent série rations manière sécurisée pouvoir inférer résultats intermédiaires résultat final retourné calcul processing utilisé calculer manière sécurisée différentes fonctions opérations manière similaire sites déduire résultats intermédiaires finaux données traite échanges données entre différents sites utilisent fonction sécurisée sends permet envoyer vecteur définie manière envoyer inversement effectuer envoi verma sécurisé utilisons nombre aléatoire cette méthode exemple utilisée envoyer données différentes bases voyer requête ainsi processus décrit figure débute manière suivante abord envoie requête utilisant fonction flèche numérotée figure manière précise requête considérée forme booléenne générons vecteur aléatoire ayant taille requête calculons nouveau vecteur alors envoyé versa chaque données décompose matrice transition trois tableaux premier correspond transitions second conditions troisième longueurs déplacement indices tableaux triés aléatoire manière encoder matrice bases données envoient abord matrice transition transformée utilisant sends envoient conditions associées matrice ainsi tableau longueurs ordre indices fournis flèche numérotée partir moment évaluation requête effectuée contrôle dernier demande fonction ncompares évaluer condition indice tableau condition flèche numérotée moment dispose partie requête tester notée partie conditions notée ainsi position courante manière contient position requête reste extraire requête chaîne commençant position gueur égale celle condition étape suivante consiste comparer chaînes manière sécurisée envoyant différentes parties fonction ncmps flèche numérotée résultat comparaisons réparti entre retourné contrôleur manière sécurisé flèches processus répété contrôle automate terminé manière mainte déplacement position requête lorsqu condition vérifiée chaînes semblables utilise opération sécurisée incrs objectif décaler position fonction longueur associée transition indique indice correspondant tableau longueurs derniers mettent valeur lorsque automate passe final reconnaît séquence agrège différents résultats attaque attaque inconnu fonction sécurisée aggregates répartit résultat final entre existe données traiter derniers conservent résultat agrégé transmettre traitement différents algorithmes sécurisés cette section présentons différents algorithmes utilisés approche srexm manière simplifier écriture algorithmes considérons notations suivantes calcul triparti importe quelle fonction entre possède partie entrées obtient partie résultat manière similaire possède partie entrées obtient partie résultats processus résultat final obtenu appliquant opérateur détection intrusion collaborative sécurisée binaire entre cependant implique envoie directement reçoit résultat transforme entrées addition bruit aléatoire uniforme envoie manière sécurisée manière symétrique envoie aussi entrées bruitées calcul sites reçoivent résultat partagé bruité résultat intermédiaire pourra suite utilisé comme entrée autres calculs manière utilisons fonction arguments alors correspond algorithme ncompares algorithme algorithme ncompares indice condition tester envoyé result booléens trouve position courante requête examinée sinon calcule length calcule length définition length length return calcule calcule calculent ncmps évaluation condition ncompares algorithme transi commandée contrôleur envoie indice chaîne tableau conditions connaît partie autre partie telle manière chaîne réelle chacun sites connaît également partie requête tester ainsi position courante cette requête après avoir extrait partie requête commençant position ayant longueur opération comparaison effectuée ncmps fonction ncmps section permet parer séquences longueur retourne valeur booléenne telle identiques contraire résultat final retourné verma complexité complexité algorithme ncompares celle ncmps section compares permet connaître résultat comparaison peuvent normalement déduire longueur requête comparée succès valeur cependant arrivaient déduire liste indices chaînes effectivement filtré requête étant donné connaissent valeurs aléatoire contenues peuvent déduire séquence aléatoire longueur autant peuvent déduire filtrage réussi connaître valeur associée final filtrage réussi niveau contrôleur aucune information longueur partie filtrée valeur requête déduite effet aucun accès valeurs requête connaît indices déplacement seule information connaît parcours effectué automate algorithme incrs requête tester répartie manière sécurisée position début comparaison connue modification cette position commandée algorithme incrs envoi automate données derniers reçoivent également tableau manière aléatoire indiquant longueurs déplacements effectuer objectif interdire puisse avoir correspondance directe entre indices conditions longueurs algorithme incrs indiquer indice tableau utiliser mettre position requête cours analyse lorsque commande incrémentation permet connaître condi déclenché déplacement faire faire calculs inutiles aucune information longueur déduite connaît indices tableau longueurs algorithme aggregates aggrégation résultats consiste conserver manière sécurisée dernier résul obtenu lorsqu automate reconnu requête objectif travers aggregates algorithme puissent savoir automate filtré requête positionne requête filtrée autrement fonction valeur information stockée accumulateur entre valeur final vecteur toire utilisons fonction réalise séquences longueur retourne séquence ainsi réalise séquences longueur retourne séquence processus srexm envoient valeurs stockées accumulateur dernier effectuer manque place décrivons contenu algorithme détection intrusion collaborative sécurisée entre valeurs retournées obtenir résultat chaque expression régulière automate valeurs associées états finaux bases encodées nombres aléatoires calculant connaît connaît connaît considère longueur identique toutes bases algorithme algorithme aggregates longueur correspond positionné valeurs agrégation conservées respectivement longueur calcule calcule effectuent calculent effectuent respectivement propriété algorithme aggregates interdit connaître infor mations stockées accumulateur manière possible savoir valeur accumulateur changé preuve données reçues bruitées manière aléatoire impossible connaître valeur celle premier indiquant automate atteint final opérateur retournent valeur bruitées aléatoirement signifie point respectivement séquence obtenue respectivement alétoire dépendante valeurs respectivement particulier connaissent valeur initiale début processus impossible déduire cette valeur changée aggregates complexité fonction utilisée reprenant pexité opérateurs section aggregates effectuent opérations binaires calculent aléatoires envoient reçoivent données comprises effectue opérations binaires calcule aléatoires reçoit envoi rapporter longueur entrées remarques mécanismes bufferisation données envoyées bases gation résultats permettent réaliser anonymisation bases effet client détecter quelles bases envoyé leurs données srexm déduire quelle celle fourni résultat final retour valeur agrégée verma résultats effectué expression validée cependant peuvent savoir quelle fourni réponse anonymisation efficace nécessaire attendre exemple toutes expressions toutes bases aient considérées cette approche malheureusement efficace coûteuse temps minimiser possible retourner valeurs intermédiaires client chaque résultats agrégés minimise mécanismes anonymisation coûts différents bufferisation troduit essentiellement coûts espace alors agrégation introduit coûts temps calcul possible faire varier paramètres adapter processus anonymisation fonction besoins coûts supportables algorithme algorithme appartiennent appartiennent result génèrent échangent quatre nombres aléatoires envoie envoie calcule ainsi nombre aléatoire envoie calcule calcule algorithmes cette section définissons trois algorithmes permettant réaliser manière sécurisée opérations comparaisons chaînes principe fondamental rithmes ajouter bruit aléatoire uniforme données pourra suite primé résultat final protocole débute modifient leurs données isant valeurs aléatoires échangent valeurs modifiées alors envoyées alors calculer manière sécurisée opération travaille données bruitées calcule dernier ajoute également bruit aléatoire résultats intermédiaires éviter disposent résultat final application algorithmes sites collaboratifs peuvent alors calculer résultat final supprimant bruit avaient ajouté exemple opération suivante détection intrusion collaborative sécurisée réalisée manière sécurisée mesure connaît propres éléments nombres aléatoires résultat final alors grâce propriété opérateur obtenons résultat désiré toutefois cette opération jamais lisée sites collaboratifs résultat final partagé entre algorithme algorithme appartiennent appartiennent result premières étapes similaires celle calcule calcule propriété algorithme interdit apprendre données privées versa outre troisième partie apprendre leurs entrées privées preuve partir algorithme apprendre données privées grâce bruit ajouté trouver valeurs etant donné rôles interchangeables argumentation appliquer apprendre données privées outre bruitant leurs entrées garantissent aucune information privée transmise enfin grâce étape prétraitement dispose valeurs distinguer vraies valeurs valeurs aléatoires complexité opérateur opérations doivent réalisées etant donné opérations réalisées algorithme avons total opérations chaque échangent partir envoyés retourné outre calculent aléatoires aléatoire généré fonction ncmps compare vecteurs fonction sécurisée résultat ncmps donne envoyé autre envoyé vecteurs similaires autrement verma algorithme algorithme ncmps partie stockée autre partie result sinon calcule longueur vecteur calcule complexité longueur vecteurs comparés alors effectue opérations utilise opération effectuent opérations binaires calculent aléatoires reçoivent donnée comprise envoient résultat compris effectue opérations binaires calcule aléatoires reçoit envoie propriété aucune connaissance valeur données compa résultat comparaison preuve données reçues bruitées moment envoi vecteurs aléatoires manière toutes valeurs retournées elles aussi bruitées générés aléatoirement voient valeurs aléatoires peuvent déduire données résultats réels calcul conserve résultats intermédiaires déduire partie nombres aléatoires utilis réencoder résultats envoyés cependant donne aucune information données réelles conclusion article avons proposé nouvelle approche détection intrusion risée collaborative notre approche requête utiliser différentes connaissances bases données savoir correspond attaque avons prouvé notre architecture garantissait était possible connaître fourni information composants architecture avaient possibilité inférer connaissances bases requête notre approche également possible déduire attaque celui précisé bases données travaux menons actuellement concernent étude suppression honnête répartissant opérations réaliser évaluer automate entre différents autres sites autre étudions optimisation gestion automate prise compte nouveaux opérateurs conditions références cuppens miege alert correlation cooperative intrusion detection mework international conference networks détection intrusion collaborative sécurisée database osvdb escamilla intrusion detection network security beyond firewall wiley goldreich secure multi party computation working draft goldreich98secure graham network intryusion detection system robertgraham network intrusion detection heady luger maccabe servilla august architecture network level intrusion detection system technical report cs9020 hopcroft motwanu rotwani ullman introduction automata theory languages computability addison wesley janakiraman waldvoge zhang indra approach network intrusion detection prevention international workshops enabling technologies infrastructure collaborative enterprises kantarcioglu vaidya architecture privacy preserving mining client information workshop privacy security mining conjunction locasto parekh keromytis stolfo towards collaborative security intrusion detection proceedings workshop information assurance security point mchugh christie allen defending yourself intrusion detection systems software proctor practical intrusion detection handbook prentice cretu stolfo anomalous payload based detection signa generation proceedings international symposium recent advances intrusion detection zhang parashar cooperative defence against attacks journal search practice information technology karunasekera leckie evaluation decentralized architec large scale collaborative intrusion detection proceedings international symposium integrated network management summary intrusion detection system misuse detection anomaly detection recog intrusions efficient available following problem request match signature usually alert supervisor nevertheless signature probably found another server organizations willing share their results privacy their paper propose approach detecting attacks collaborative preserving privacy collaborative organizations