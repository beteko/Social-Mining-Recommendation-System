classification contraintes somme résidus quadratiques ruggero pensa françois boulicaut giuseppe moruzzi 56124 italy ruggero pensa liris umr5205 69621 villeurbanne cedex france francois boulicaut résumé nombreuses applications classification facile interpréter classification dimensionnelle calculer partition collection clusters chaque cluster groupe associé groupe attributs interprétations peuvent appuyer turellement associations exploiter connaissance domaine ainsi améliorer pertinence partitions plusieurs méthodes classification contraintes proposées dimensionnel ploitation contraintes cannot considérons classification contraintes gestion telles contraintes étendues dimensions objets attributs aussi expression contraintes contiguité domaines ordonnés proposons algorithme itératif minimise somme résidus quadratiques permet exploitation active contraintes spécifiées analystes montrons valeur extraction applications analyse transcriptome introduction nombreux domaines applicatifs analyste trouve devant données matriciels lesquels certain nombre objets décrits certain nombre tributs prennent leurs valeurs domaine numérique éventuellement restreint domaine techniques phares étude exploratoire données classification calcul partitions ensemble objets ensemble attributs aussi vouloir faciliter interprétation groupements calculés veloppant méthodes classification partionnements selon dimensions couplés algorithmes comme présentés robardet feschet dhillon ritschard zighed jollois produisent partition collection clusters chacun clusters groupe objets associé groupe attributs classification apparaît comme méthode sification conceptuelle classification particulièrement étudiée contexte analyse transcriptome cheng church madeira oliveira effet technologies débit permettent construire matrices expression classification contraintes somme résidus quadratiques gènes organisme différentes situations expérimentales matrices expériences gènes cluster apparaît comme ensemble gènes ayant profils expression similaires ensemble situations expérimentales alors possible considérer chaque cluster comme module transcription putatif hypothèse mécanisme régulation génique réponse partielle analyse transcriptome motivé collecte données expression intéressons pertinence partitions semble important analystes puissent spécifier leurs attentes intérêt subjectif dérivé connaissance maine moyen contraintes techniques classification puissent produire résultats cohérents spécifications classification alors comme calcul matrice désigne language partitions prédicat spécifie propriétés attendues vision classique exprimer contrainte optimisation fonction objectif perte formation mutuelle dhillon également trouver autres contraintes comme définition nombre clusters certains objets attributs doivent doivent ensembles contraintes habituellement désignées cannot combiner méthodes optimisation fonction objectif satisfaction autres contraintes clairement difficile introduction contraintes comme cannot processus classification dimensionnelle means classification hiérarchique motivé nombreux travaux dernières années wagstaff klein bilenko davidson 2005a contre exploitation contraintes classification étudiée pensa 2006a introduisions certains types contraintes classification extensions cannot elles appliquent objets attributs avons considéré dimensions données exemple contexte analyse données expression pouvons enregistrer évolution expression gènes cours temps alors spécifier contraintes contiguité contrainte interval travaux antérieurs calcul partitions était traité comme traitement collections motifs capturent associations localement fortes contexte était pouvoir pousser certaines contraintes partition jusque extraction motifs locaux traiter présentons approche classification contraintes originale alter native propositions décrites pensa 2006a dernières étaient réservées traitement données travaillons données numériques passer collections motifs locaux étendons technique minimisation résidus quadratiques proposée cadre classification contraintes section formalise problème section présente notre algorithme classification contraintes section dédiée validation expérimentale données réelles analyse transcriptome section brève conclusion classification contraintes désignons matrice nombres réels lignes colonnes suite données fouiller matrice parlerons lignes colonnes plutôt objets attributs élément correspondant ligne pensa colonne exemple contenir niveau expression condition expérimentale noterons vecteurs associés respectivement ligne colonne classification produit simultanément ensemble clusters partition groupes lignes associée partition groupes colonnes ensemble indices lignes appartenant classe lignes ensemble indices colonnes classe colonnes matrice déterminée nommée cluster avoir premier critère qualité classifications cherchons toujours optimiser certaine fonction objectif définition contrainte optimisation fonction objectif contrainte optimisation satisfaite argminφ ensemble toutes classifications possibles exemples fonction objectif coefficient goodman kruskal utilisé robardet feschet perte information mutuelle exploitée dhillon article utilisons somme résidus quadratiques introduite raisons faisabilité calculatoire algorithmes classification relaxent contraintes optimisation œuvre heuristiques optimisations locales contraintes optimisation souvent implicites pouvoir spécifier autres types contraintes maintenant définis définition contraintes cannot lignes colonnes impliquées contrainte notée elles doivent classe lignes colonnes impliquées contrainte cannot notée elles peuvent classe formes contraintes étudiées cadre classification supervisée bilenko généralisons elles puissent appliquer aussi ensemble lignes ensemble colonnes matrice expres ainsi exploiter connaissances gènes conditions expérimen tales exemple fonction disons processus biologique vouloir forcer contrainte entre gènes privilégier recherche cluster associant gènes ayant cette fonction identifier module transcription serait origine cette fonction rions également ajouter contraintes cannot éviter associer clusters situations expérimentales souhaite séparer séparer différents tissus lignées cellulaires faisons aussi hypothèse valeur réelle associée chaque colonne ligne avons exemple pourrait mesure temporelle spatiale données issues puces chaque colonne correspond expérience chaque ligne désigne pourrait temps échantillonnage second exemple serait considérer comme mesure position spatiale absolue séquence organisme étudié fonctions permettent définir ordre ensemble colonnes classification contraintes somme résidus quadratiques lignes alors suite considère fonction existe alors éléments ordonnés lignes devient alors intéressant rechercher clusters soient cohérents ordres définis fonctions exemple intéresse différentes étapes développement cellule découvrir gènes majoritairement impliqués chaque étape pouvons chercher classes soient contiguës temps forcer contrainte intervalle introduite pensa 2006a définition contrainte intervalle ordre défini ensemble colonnes lignes contrainte interval ensemble notée exige chaque classe intervalle alors satisfaction contraintes cannot interval entraîne général diminution optimum théorique fonction objectif voulons algorithme classification puisse prendre compte telles contraintes essayant optimiser fonction objectif retenue notez satisfaction conjonction contraintes toujours faisable exemple trois objets conjonction jamais satisfaite contraintes cette conjonction posent aucun problème article ferons hypothèse conjonctions contraintes traitées notre approche toujours faisables problème faisabilité contraintes méthodes partitionnelles hiérarchiques largement traité davidson 2005a exploitation somme résidus quadratiques présentons notre approche classification contraintes proposant gorithme itératif minimise somme résidus quadratiques cette fonction objectif introduite classification contraintes appliquée contexte matrices expression adaptation mesure introduite cheng church découverte motifs locaux matrices expression matrice données cherchons partition classes lignes classes colonnes utilisons définition résidu cheng church définition résidu résidu cluster contenant terminé ensembles indices cardinalités respectives donné xirjc xirjc matrice résidus calculés définition précédente fonction objectif minimiser somme résidus quadratiques calculée manière suivante hirjc pensa réécrire matrice résidus forme compacte introduit matrices ainsi définies chaque élément classe étant nombre lignes classe autrement chaque élément matrice classe étant nombre colonnes classe autrement matrice résidus dévient alors démonstration validité cette équation auteurs démontrent abord xirjc avant montrer vraie concluent considère projection matrice alors donne fonction objectif means cette matrice modifiée considérons maintenant notre contribution algorithmique notre approche utilise nique traiter manière alternée méthode means lonnes lignes ainsi matrice après chaque colonne affectée classe colonnes proche similairement lignes posons décomposer calcul fonction objectif obtenons réécri suivante manière posant obtenons comme décomposition termes lignes matrices correspondent alors centres masse classes respectivement colonnes lignes pouvons maintenant introduire notre algorithme classification contraintes donnons abord version traite satisfaction conjonction contraintes cannot version traitant contrainte interval proposons enfin stratégie intégration traitements satisfaction conjonctions cannot transitivité contraintes connue alors transformer ensemble contraintes lignes collection classification contraintes somme résidus quadratiques chaque ensemble lignes impliquées fermeture transitive contraintes notons ensemble construit colonnes ensembles contraintes cannot respectivement lignes colonnes algorithme conscoclust entrées matrice données ensembles contraintes cannot collections ensembles lignes sorties matrices initialiser faire chaque faire alors chaque faire argminc sinon argminc mettre partir affectation lignes algorithme traite classification présence conjonctions contraintes cannot partie concernant traitement lignes omise commence initialiser aléatoirement matrices chaque itération algorithme affecte chaque colonne ligne classe colonnes lignes proche introduit violation contraintes cannot colonne ligne impliquée contrainte affectons ensemble colonnes lignes impliquées fermeture transi cette contrainte classe colonnes lignes laquelle moyenne distances minimum contrôlant toujours contrainte cannot violée cette opération ensuite algorithme matrice selon schéma affectation résultant opérations décrites précédemment processus réitéré jusqu minution fonction objectif devienne petite inférieure facteur tolérance notons phase initialisation prendre compte contraintes satisfaction assurée première itération amélioration possible consiste utiliser meilleur critère affectation objets impliqués contraintes cannot pensa ailleurs satisfaction ensemble contraintes cannot nombre classes donné problème complet davidson 2005b satisfaction contrainte interval algorithme intcoclust entrées matrice données sorties matrices initialiser gauche droite faire chaque faire droite gauche faire gauche alors gauche gauche droite droite sinon traitement frontières droites mettre partir affectation lignes algorithme permet résoudre problème satisfaction contrainte interval partie concernant traitement lignes omise initialisation partitions concernées cette contrainte produire nombre intervalles colonnes lignes ensuite processus affectation intéresse uniquement frontières entre intervalles particulièrement traite itérativement abord tière gauche frontière droite colonne ligne affectée intervalle adjacent distance inférieure celle calculée intervalle départ continue traiter colonnes lignes restantes lorsque frontière gauche tière droite intervalle correspondent colonne ligne algorithme passe frontière suivante nécessaire réaffecter colonne ligne algorithme termine traitement cette frontière passe frontière suivante notez contrairement pensa 2006b satisfaction contrainte interval garantie classification résultat classification contraintes somme résidus quadratiques intégration algorithmes traiter conjonction contraintes cannot interval encore traitée donnons cependant piste recherche abord faire sorte chaque ensemble inter valle exemple ensemble objets ensemble serions obligés inclure objet définition intervalle suite initialisation produise partition prenne compte ensemble contraintes notons satisfaction conjonction contraintes cannot blème complet enfin possible utiliser stratégie algorithme uniquement frontières suivant schéma présenté algorithme complexité concernant algorithme notons calculer nombre opérations nécessaires celui calculer opérations calcul effectué temps quand pothèse vraisemblable phase affectation lignes colonnes nouvelles classes nécessite temps chaque itération complexité totale algorithme nombre total itérations nécessaires gorithme compléter classification complexité algorithme trivialement celle algorithme noter général travailler uniquement frontières traduit meilleure efficacité phase affectation validation expérimentale avons étudié comportement algorithmes données puces nommés plasmodium drosophila premier décrit bozdech concerne transcriptome cycle développement intraerythrocytique plasmodium ciparum agent responsable malaria humaine données fournissent profil expression gènes échantillons biologiques chaque échantillon correspond moment cycle développement commence invasion globules rouges mérozoïte divisé trois phases anneau trophozoïte zonte concernant respectivement moustique après heures cellule réplique divise instants marqués observe transitions brusques second données décrit arbeitman concerne expression gènes drosophile melanogaster durant cycle niveaux expression gènes mesurés périodes séquentielles temps divisés stade embryon naire larvaire pupaire toutes expériences valeur paramètre arrêt fixée initialisation partitions étant aléatoire avons exécuté algorithmes chaque groupe contraintes contraintes cannot avons abord étudié traitement contraintes cannot semble gènes uniquement avons utilisé données plasmodium lequel dispose certain nombre information gènes impliqués férentes étapes développement particulier avons considéré groupe cytoplasmic pensa translation machinery gènes actif première phase cycle bactérie groupe merozoite invasion gènes actif seconde phase groupe early transcripts gènes caractérisant dernière phase développement groupes fonctionnels décrits bozdech avons sélectionné aléatoirement ensembles contraintes trois groupes gènes précédemment décrits chaque ensemble contient nombre variable contraintes nombre gènes impliqués chaque ensemble varie entre gènes impliqués trois groupes tionnels cette expérience avons utilisé pouvoir identifier trois étapes développement plasmodium falciparum pourcentage gènes trois classes approche contrainte contraintes résultats présentés tableau montrent chaque groupe fonctionnel pourcentage gènes impliqués chaque classe amélioration beaucoup sensible second groupe gènes merozoite invasion dernier groupe early transcripts semble bénéficier exploitation contraintes mesurer impact utilisation combinée contraintes ensemble lignes ensemble colonnes avons choisi classification cible parmi résul obtenus utilisation contraintes particulier avons sélectionné classification valeur minimale fonction objectif obtenue processus itératif cette valeur était avons ensuite généré aléatoirement ensembles contraintes impliquant gènes conditions expérimentales nombre gènes impliqués contraintes varie entre taille totale ensemble gènes conditions expérimentales nombre varie entre évaluer conformité entre partition choisie partitions découvertes algorithme classification avons utilisé indice corrigé hubert arabie structure issue classification partition prédéfinie chaque paire points affecté classe classes différentes nombre paires appartenant classe classe espérance étant nombre points classification contraintes somme résidus quadratiques valeur maximale conformité entre estimée moyen formule lorsque partitions identiques itérations const unconst index corrigé valeur finale fonction objectif nombre itérations valeurs moyennes avons comparé résultats obtenus utilisation contraintes obtenus aucune spécification contrainte résumé cette expérience présenté tableau utilisation contraintes produit amélioration nette conformité partitions entraînant légère diminution nombre moyen itérations nécessaire compléter classification temps spécification contraintes entraîne amélioration valeur finale fonction objectif diminution environ contrainte interval évaluer valeur ajoutée contrainte interval avons appliqué notre rithme données drosophila notre objectif redécouvrir trois phases cycle drosophile utilisant comme seule connaissance nombre classes itérations const unconst index corrigé valeur finale fonction objectif nombre itérations valeurs moyennes avons comparé index obtenu utilisation contrainte interval collection exécutions résultats tableau montrent claire utilisation contrainte interval permet retrouver façon nette trois phases cycle drosophile amélioration mesurée index viron nombre itérations nécessaires compléter classification sensiblement inférieur celui obtient utilise contrainte interval valeur finale fonction objectif meilleure version contrainte signifie structure découverte notre algorithme optimum global données notons aussi aucun algorithme contrainte retrouver intervalles pensa conclusion classification permet interprétation facile groupements sification dimensionnelle sommes posés problème exploitation contraintes classification permettre définition contraintes autoriser exploitation connaissances domaine obtenir groupements pertinents capable combiner optimisation fonctions objectifs rithmes classification satisfaction contraintes comme contraintes cannot étendues contexte classification contrairement seule proposition classification contraintes connaissons pensa 2006a posons méthode travaille directement données numériques garantit respect contraintes spécifiées cette appuyons fonction objectif résidus quadratiques introduite perspectives court terme travail consiste valider pistes identifiées intégration entre résolution contraintes intervalle celle autres types contraintes remerciements travail réalisé grande partie alors ruggero pensa était université saint etienne travail partiellement finançé contrat européen 516169 références arbeitman furlong johnson baker krasnow scott davis white expression during cycle drosophila melano gaster science bilenko mooney integrating constraints metric learning supervised clustering proceedings banff canada bozdech llinás pulliam derisi transcriptome intraerythrocytic developmental cycle plasmodium falciparum biology cheng church biclustering expression proceedings diego press dhillon minimum squared residue clustering expression proceedings buena vista davidson 2005a agglomerative hierarchical clustering constraints theoretical empirical results proceedings volume porto portugal springer davidson 2005b clustering constraints feasibility issues means algorithm proceedings newport beach dhillon mallela modha information theoretic clustering proceedings sigkdd washington press hubert arabie comparing partitions journal classification classification contraintes somme résidus quadratiques jollois nadif govaert classification croisée données binaires grande taille actes france hermes science publications klein kamvar manning instance level constraints space level constraints making prior knowledge clustering proceedings sydney australia madeira oliveira biclustering algorithms biological analysis survey transactions computational biology bioinformatics pensa robardet boulicaut 2006a classification contraintes actes trégastel france presses universitaires grenoble pensa robardet boulicaut 2006b towards constrained clustering dered proceedings ismis volume italy springer ritschard zighed simultaneous column partitioning evaluation heuristic proceedings ismis volume maebashi japan springer robardet feschet efficient local search conceptual clustering procee dings volume washington springer wagstaff cardie rogers schrödl constrained means clustering background knowledge proceedings williamstown summary applications expert interpretation clustering easier dimensional clustering clustering computing partition collection clusters cluster group objects associated group attributes these associations support interpretations constrained clustering algorithms proposed exploit domain knowledge improve partition relevancy dimensional using cannot constraints consider constrained clustering these constraints extended dimensions objects tributes interval constraints enforce properties clusters considering ordered domains propose iterative clustering algorithm which exploit defined constraints while minimizing squared residues added value proach applications transcriptomics