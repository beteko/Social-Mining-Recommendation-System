egc2008 dviechantillonnage extraction motifs séquentiels bases données statiques flots données chedy raïssi pascal poncelet lirmm 34392 montpellier cedex france raissi lirmm lgi2p scientifique georges besse 30035 nîmes cedex france prénom résumé depuis quelques années communauté fouille données ressée problématique extraction motifs séquentiels partir grandes bases données considérant comme hypothèse données pouvaient chargées mémoire centrale cependant cette hypothèse lorsque bases manipulées volumineuses article étudions technique échantillonnage basée réservoirs montrons comment cette dernière particulièrement adaptée résumer volumes données intéressons ensuite problématique cente fouille données disponibles forme continu éventuellement infini stream étendons approche échantillon nouveau contexte montrons sommes extraire motifs séquentiels flots garantissant erreurs résultats différentes expérimentations menées confirment résultats théoriques introduction problématique extraction motifs séquentiels grandes bases données intéresse communauté fouille données depuis dizaine années différentes thodes développées extraire séquences fréquentes extraction motifs toutefois tâche difficile espace recherche considéré grand gérer mieux espace recherche différentes stratégies proposées tradition nelles utilisent approche apriori srikant agrawal diffèrent principalement structures données utilisées vecteurs arbres préfixés approches récentes considèrent quant elles projections multiples données selon principe pattern growth proposé évitent ainsi générer didats outre différentes stratégies propositions efficaces considèrent comme hypothèse données chargée directement mémoire centrale cepen développement nouvelles technologies dernières trouvent mises défaut mesure quantité données manipulées volumineuse devient irréaliste stocker intégralité mémoire centrale développement nouvelles technologies permet également générer grands volumes données issues différentes sources trafic transactions financières echantillonnage extraction motifs séquentiels registrements médicaux capteurs données apparaissent alors forme stream manière continue rythme rapide éventuellement manière infinie traction connaissances partir flots récemment donné nombreux travaux recherche focalisés découverte itemsets fréquents giannella manku motwani utilisant méthodes telles fenêtre glissante modèles pondérations temporelles travaux intéressés extraction motifs séquentiels flots données raissi outre espace recherche approches traditionnelles nécessitent faire plusieurs passes stocker cette dernière mémoire reste article organisé manière suivante travaux extraction motifs séquentiels présentés section section introduisons formellement problème concepts préliminaires extraction motifs section présente échantillonnage cadre données statique résultats riques précision échantillon seuil erreur section étend résultats flots données présentant notre algorithme maintien synopsis expérimentations décrites section conclusion proposée section travaux antérieurs différentes approches efficaces extraction séquences proposées dernières années prefixspan spade ayres prefixspan algorithme représentation motifs moyen arbre préfixé implémentation publique charge données mémoire centrale utilise différentes projections éviter générer candidats spade propose transformer données représentation verticale appliquer rapidement opérations jointure originalité réside représentation données forme bitmaps expérimentations montrent efficace prefixspan spade grandes bases données cependant trois algorithmes défaut lorsqu essayent charger bases volumineuses ordre quelques gigaoctets volume données important croissant bases données statiques flots données impose nouvelles contraintes prendre compte algorithmes extraction devient acceptable obtenir réponses approxima tions aggarwal autres termes devient indispensable trouver équilibre entre efficacité précision résultats nombreuses structures synopsis développées dernières années comme sketches échantillonnage wavelets histogrammes toutes différentes structures possèdent mêmes propriétés grandes applicabilités elles peuvent utilisées répondre divers problèmes efficacité moire elles capables résumer manière significative grandes quantité données robustesse outre toutes méthodes nécessitent passe particulièrement utiles flots données travaux avons menés sommes focalisés classes échantillonnage servoir mesure elles aisées mettre œuvre garantissent échantillon représentatif bonne qualité cette approche initialement introduite vitter principe suivant maintenons réservoir taille premiers points ensemble données stockés étape initialisation lorsque raïssi poncelet client items données exemple point traité remplace aléatoirement points réservoir probabilité ainsi taille ensemble données augmente probabilité inclusion réduit entendu inconvénient majeur flots données considèrent souvent informations récentes pertinentes giannella solution répondre problème utiliser fonctions biaisées réguler échantillon données aggarwal concepts préliminaires cette section présentons problématique extraction motifs séquentiels srikant agrawal srikant ainsi principe échantillonnage réservoir biaisé transaction constitue client ensemble items achetés transaction écrit forme ensemble triplet client itemset itemset ensemble items séquence liste ordonnée itemsets notée itemset séquence données séquence représentant achats client transactions client ordonnées dates achat croissantes itemset ensemble items correspondant alors séquence données client itemset itemset itemset client supporte séquence incluse séquence données client support séquence support représente pourcentage clients supportent seuil support minimal défini utilisateur problème extraction motifs séquentiels consiste extraire toutes séquences telles support exemple considérons données figure support minimum séquences fréquentes suivantes échantillonnage réservoir biaisé introduit aggarwal principale réguler introduction points réservoir maîtriser fraîcheur échantillon produit autres termes fonction biais permet moduler échantillon manière focaliser comportements récents anciens fonction contraintes application fonction biais définie manière suivante paramètre correspond biais cette fonction proportionnelle probabilité point introduit réservoir instant encore présent instant outre inclusion fonction biais exponentielle possible utilisation algorithmes remplacement simples surtout cette classe spéciale fonctions biais echantillonnage extraction motifs séquentiels implique aussi borne supérieure taille réservoir indépendante gueur longueur taille maximale réservoir satisfait fonction biais exponentielle avons echantillonnage données statique etant donné facteurs extraction taille considérée intuition jacente algorithme extraction pourrait lancé échantillon données originale avoir résultats manière rapide facile première question laquelle devons répondre voulons extraire motifs partir échantillon point échantillon pertinent rapport données original répondons cette question exhibant garantie erreur support séquence notons approche similaire proposée extraction itemsets fréquents toivonen définition erreur données transactionnelle clients échantillon aléatoire généré partir séquence présente dansd erreur absolu terme estimation support défini support support posons variable aléatoire indépendante définie telle client supporte séquence sinon représente nombre clients supportant séquence présents échan tillon clients peuvent réécrits manière suivante support espérance variable support voulons estimer probabilité erreur dépasse seuil défini utilisateur répondre cette estimation utilisons méthode connue statistiques inégalités concentration précisément inégalités hoeffding hoeffding permettent borner valeur réelle variable aléatoire rapport espérance terme erreur théorème suivant exhibe borne inférieure taille échantillon réservoir théorème séquence taille réservoir alors preuve support support support support raïssi poncelet inégalité hoeffding énonce variables aléatoires indépendantes alors 2n2t2 2n2t2 somme variables noter inégalités hoeffding souvent considérées comme générales moins précises inégalités concentration chernoff choix variables aléatoires indépendantes intervalle donne résultats similaires inégalités remarquer taille échantillon indépendante taille données initiale reste conditionnée uniquement table illustre quelques exemples tailles échantillons termes clients différentes valeurs noter lorsque valeurs strictes échantillon atteindre taille assez importante 26492 38005 49518 3333333 différentes tailles échantillons donnés motifs séquentiels échantillonnage flots données problèmes majeurs pratique échantillonnage difficile flots avance taille développer algorithmes échantillonnages dynamiques prennent compte évolution changements distribution données transitant cette section étendons résultats précédents présentons algorithme maintien échantillon biaisé manière dynamique prend compte différentes évolutions données algorithme présenté comme étape traitement nécessaire permettre extrac séquences fréquentes cette étape traitement pertinente respecter conditions suivantes échantillon avoir borne inférieure taille minimiser erreur absolu terme estimation support cause nature séquences opérations insertions enlèvements nécessaires échantillon doivent faire niveau clients aussi leurs itemsets convaincre suffit considérer ensemble clients chacun grand nombre itemsets rajoutent chaque instant ensemble considéré comme échantillon réservoir borné augmenter notre modèle données point données apparaissant chaque instant défini comme couple constitué identifiant client transaction echantillonnage extraction motifs séquentiels partant contraintes résultats théoriques obtenus section posons algorithme simple remplacement approche réservoir biaisé proposé aggarwal permet réguler échantillonnage transactions clients grâce fonction biaisage temporelle exponentielle suivante commençons réservoir capacité maximale discutons valeur biais chaque itemset client apparaissant inséré manière probabiliste réservoir après opération lancer pièce remplacement itemsets client présent réservoir ajout direct places encore vacantes comme discuté précédemment devons aussi contrôler taille réservoir terme nombre clients nombre itemsets cette opération contrôle appliquée grâce approche fenêtre glissante aggarwal widom permet garder uniquement itemsets récents client donné réservoir fenêtre glissante définie comme fenêtre basée séquences taille contenant points récents apparus comme fenêtre basée intervalle temps taille contenant points apparus durée temps notre approche utilisons fenêtres glissantes basées séquences garder uniquement transactions récentes clients présents échantillon fenêtre glissante permet extraction séquences horizon récent fonction exponentielle biais permet utilisateur choisir taille réservoir contraintes approximation ainsi échantillon représentatif construit mémoire selon besoins application utilisateur corollaire suivant théorème exhibe existe entre biais seuils erreurs corollaire soient seuil erreur probabilité maximale telle alors preuve après aggarwal taille supposons taille possible réservoir satisfait fonction biaisage exponentielle alors définition considérons réservoir entier comme échantillon cible extraction motifs substitution théorème avons résultat énoncé table montre quelques valeurs biaisage taille minimale réservoir nécessaire bonne approximation support séquences 0000377 26492 00002631 38005 00002019 49518 différents biaisage différentes valeurs fonctionnement général algorithme suivant arrivée itemset client client liste noire auquel ignorer itemset sinon passer étape raïssi poncelet client réservoir rajouter itemset fenêtre décalage nécessaire faire sinon passer étape faire lancer pièce aléatoire succès remplacer clients présent réservoir manière aléatoire client remplacé alors liste noire échec rajouter client itemset réservoir remplacer partie importante algorithme gestion décalages fenêtres glissantes liste noire problème apparaître étape remplacement clients présents réservoir devons détecter client était présent réservoir réintroduire aucun préalable rendrait résultats extraction motifs séquentiels inconsistants réalité problème consistance apparaît lorsqu client remplacé autre revient réservoir instant suivant moment extraction client itemsets avoir fenêtre glissante actuelle points certains clients doivent ignorés autre ignorer points introduire nouveau biais puisque seuls clients ayant remplacé autres clients seront présents échantillon résoudre problème inconsistance entre itemsets différents clients introdui système liste noire permet interdire échantillonnage certain nombre clients indésirables cette liste noire irréversible réactualisée chaque glisse fenêtre algorithme algorithme échantillonnage réservoir extraction motifs séquentiels réservoir taille réservoir nombre clients présents réservoir taille fenêtre glissante point result réservoir après traitement point begin1 liste noire2 then3 then4 insertion lancer5 random then7 random replace else9 else11 insertion directe12 insert window then14 slideallwindows update end17 echantillonnage extraction motifs séquentiels notons algorithme facilement implémenté cependant avons supposé implicitement algorithme construisait réservoir biaisé respectant fonction biaisage exponentielle paramètre allons maintenant présenter preuve formelle cette proposition comme aggarwal démontrer politique remplacement appliquée notre algorithme permet construire réservoir biaisé taille proposition algorithme construit réservoir biaisé respectant fonction biaisage temporel preuve soient nombre total clients nombre points insérés réservoir instant taille liste noire instant posons nombre possible points échantillon probabilité client arrivant liste noire probabilité client réservoir probabilité lancer pièce succès après appartenance liste noire probabilité lancer fructueux probabilité point réservoir éjecté instant donné probabilité point encore instant donné réservoir alors étape algorithme sachant devons calculer toutes combinaisons possibles probabilité client inséré instant encore réservoir instant grandes valeurs grandes valeurs approximativement substitution équation avons résultat énoncé expérimentations items taille trans trans client clients taille cl1mtr2 5sl50it10k 10000 1000000 cl1mtr10sl20it10k 10000 1000000 5mtr20sl20it10k 10000 500000 cl6mtr2 5sl10it20k 20000 6000000 différents données synthétiques utilisés experimentations raïssi poncelet motifs extraits support traitement mémoire cl1mtr10sl20it10k 5mtr20sl20it10k cl6mtr2 5sl10it20k résultats extraction motifs données statiques 5mtr20sl20it10k motifs erreurs temps requis mémoire requise taille échantillon 25000 38005 50000 100000 200000 cl1mtr10sl20it10k motifs erreurs temps requis mémoire requise taille échantillon 25000 38005 50000 100000 200000 cl6mtr2 5sl10it20k motifs erreurs temps requis mémoire requise taille échantillon 25000 38005 50000 100000 500000 résultats extractions différents données statiques toutes expérimentations lancées ordinateur macbookpro mémoire tournant algorithmes codés langage programmation comparer résultats utilisons implémentation prefixspan1 permet extraction motifs séquentiels tests lancés plusieurs données synthétiques générés logiciel quest1 différents données utilisés expérimentations leurs caractéristiques regroupés tableau échantillonner bases données statiques avons implémenté algorithme échantillonnage réservoir vitter avons testé pertinence calculs théoriques échantillonnage bases données statiques section avons utilisé expérimentations données cl6mtr2 5sl10it20k cl1mtr10sl20it10k 5mtr20sl20it10k comparer résultats estimations approximation théorème résul différentes expérimentations listés tableaux avons construit échantillons différentes tailles allant 25000 500000 clients utilisant approche échantillonnage réservoir expérimentations répétées chaque échantillon valeurs présentées moyennes résultats colonne erreur illimine almaden projects projects data_mining datasets syndata echantillonnage extraction motifs séquentiels 20000 40000 60000 80000 100000 120000 seconds taille réservoir terme clients seconds taille liste noire terme clients 40000 60000 80000 100000 120000 140000 160000 180000 200000 220000 240000 260000 seconds taille réservoir terme clients seconds taille liste noire terme clients expérimentations données cl1mtr2 5sl50it10k 00001 00004 19000 20000 21000 22000 23000 24000 25000 26000 27000 seconds 00001 10000 12000 14000 16000 seconds 00004 besoin mémoire données cl1mtr2 5sl50it10k raïssi poncelet tableaux décrit nombre séquences extraites support dépasse appro ximations remarque échantillonnage bases données statiques reste précis comme présenté résultats théoriques section petites tailles résumés temps extraction motifs utilisation mémoire processus diminué plusieurs ordres magnitudes permet pousser processus global extraction supports expérimentation flots données utilise données cl1mtr2 5sl50it10k faisant varier différents paramètres valeurs biais taille fenêtre glissante expérimentations mettons valeur efficacité échantillonnage trons empiriquement liste noire reste bornée temps figure montre liste noire garante consistence échantillon processus extraction motifs reste assez limitée terme espace mémoire utilisé grâce différentes mises jours faites chaque décalage fenêtres glissantes clients présents réservoir taille fenêtre glissante petite liste noire petite aussi fréquents décalages permettent mettre clients ignorés réservoir figure montre réservoir remplit étape extraction motifs séquentiels lancé partir 50eme seconde comme figure réservoir reste borné stable terme occupation mémoire conclusion article sommes intéressés nouvelles techniques résumés représenter bases données motifs séquentiels avons montré approche basée échantillons était adaptée bases données statiques étions capables maîtriser erreur résultats extraction motifs séquentiels notre connaissance travail premier utiliser techniques échan tillonnage extraire motifs séquentiels bases données avons égale montré approche échantillonnage basée réservoirs pouvait adapté contexte flots données avons proposé algorithme remplacement éléments réservoir permet réguler échantillonnage transactions clients fonction biaisage temporelle exponentielle avons précédemment approches extraction motifs flots néces sitent raisons capacités mémoire supprimer connaissances acquises lablement exemple séquence fréquente petit intervalle temps travers notre approche besoin exécuter algorithme extraction continu plutôt demande fournir décideur toute connaissance extraite garantissant marge erreur perspectives associées travaux nombreuses premier temps souhaitons offrir possibilité stocker évolutions réservoir étapes extraction connaissances déterminer tendances souhaitons étendre notion tilted window intro duite giannella stocker variations fréquences toutes fréquences motifs agrégées intervalle temps second temps souhaitons intégrer cette approche outil complet suivi flots données mettant ainsi pouvoir effectuer seulement extraction aussi requêtes données echantillonnage extraction motifs séquentiels références aggarwal streams models algorithms springer aggarwal biased reservoir sampling presence stream evolution ayres flannick gehrke sequential pattern mining using bitmap representation widom continuous queries streams sigmod record muntz moment maintaining closed frequent itemsets stream sliding window giannella mining frequent patterns streams multiple granularities generation mining press hoeffding probability inequalities bounded random variables journal american statistical association manku motwani approximate frequency counts streams prefixspan mining sequential patterns efficiently prefix projected pattern growth raissi poncelet teisseire speed mining maximal sequential patterns streams srikant agrawal mining sequential patterns generalizations perfor mance improvements srikant mining sequential patterns toivonen sampling large databases association rules vitter random sampling reservoir trans softw spade efficient algorithm mining frequent sequences machine learning summary sequential pattern mining active field domain knowledge discovery since database influential factor mining algorithms examine sampling static databases approximate mining results upper bound error moreover extend these sampling analysis present algorithm based reservoir sampling sequential pattern mining streams demonstrate empirical results sampling methods efficient sequence mining mains accurate static databases streams