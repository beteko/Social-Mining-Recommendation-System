LibRe Protocole gestion cohérence systèmes stockage distribués Chiky Sathiya Prabhu Kumar Sylvain lefebvre Gressier Soudan Notre Champs 75006 Paris rchiky sathiya prabhu kumar sylvain lefebvre Saint Martin 75003 Paris France autre adresse email gressier_soudan Résumé présentons papier protocole gestion rence appelé LibRe adapté systèmes stockage orientés Cloud telles bases données NoSQL protocole garantit accès donnée récente consultant seule réplique algorithme évalué simulation également implémenté système stockage sandra résultats expérimentations démontré efficacité notre approche Introduction systèmes stockage données distribués usage répliquer améliorer performance disponibilité système réplication données processus sauvegarde mêmes données plusieurs appelées répliques plusieurs unités stockage données soient stockées emplacements siques différents application donnée elles jouent représentent chose nombre copies physiques emplacement copies peuvent varier fonction besoins application Toutefois répliquer données placements physiques différents engendre problème cohérence auquel faire système Lorsqu donnée répliques modifiée autres répliques deviennent obsolètes parvenue conséquent important mettre place stratégie réplication permet gérer toute sécurité opérations écriture lecture Create Update Delete effet stratégie réplication affecte comportement systèmes distribués concerne propriétés cohérence disponibilité tolérance partitionnement savions après théorème Consistency Availability Partition Tolerance Gilbert Lynch système distribué respecter trois propriétés théorème énonce système distribué répondre seule contrainte parmi hérence Consistency noeuds système voient exactement mêmes données LibRe Protocole gestion cohérence moment disponibilité Availability données toujours accessibles panne conséquent hypothèses traditionnelles telles réplica complète support transactions doivent assouplies solutions existantes diffèrent quant degré cohérence données elles fournissent compromis reste déterminer entre latence cohérence disponibilité données Abadi cadre proposons protocole gestion cohérence appelé LibRe Library Replication permettant fournir dernière donnée lisateur consultant seule réplique données stockant liste mises estampillées annuaire protocole évalué simulation grâce plateforme Simizer Lefebvre avons également évalué LibRe implémentant système stockage Cassandra Lakshman Malik comparer niveaux cohérence offerts système suite papier organisée comme section décrit section présentons notre approche gestion cohérence LibRe section détaille étude expérimentale libRe simulation section décrit intégration libRe Cassandra Enfin section conclut papier donne aperçu perspectives recherche problème cohérence données quand répliques produit conséquent cohérence données principalement influencée stratégie réplication données adoptée système Daniel Abadi explique Abadi mises propagent trois façons différentes selon stratégie réplication adoptée combinaison modes propagation envisagée Synchrone asynchrone hybride Synchrone mises appliquées manière synchrone lecture données importe quelle réplique correcte cohérence forte Cependant temps propagation affecté lenteur noeud emplacement physique système usage verrouiller accès donnée temps mises propagent assurer cohérence forte Saito Shapiro demande lecture attendre abandonnée jusqu données soient disponibles après conséquent affecte disponibilité système Asynchrone approche asynchrone noeud reçoit première plique localement renvoie message succès client ensuite propagée répliques manière asynchrone arrière existe compromis entre cohérence latence fonction façon demandes lecture traitées système requêtes lecture servies partir noeud particulier point entrée central sacrifice cohérence Cependant puisque demandes servies partir noeud central existe risque surcharge noeud affecter temps latence Chiky point entrée central requêtes lecture risque lecture réplique récente encore appliquée latence lecture serait minimisée sacrifiant cohérence données Hybride combinaison modes synchrone asynchrone objectif teindre meilleur compromis entre latence cohérence disponibilité également sible connu cohérence majoritaire Quorum consistency majorité répliques forme quorum taille quorum estimée nombre répliques système propager façon synchrone quorum manière asynchrone reste répliques cohérence système assurée formule nombre répliques respectivement nombre répliques contactées écriture lecture ailleurs existe plusieurs niveaux cohérence peuvent classés façon suivante Cohérence forte systèmes cohérence forte garantissent toute lecture puisse accéder dernière écriture faite élément systèmes assurant cohérence forte suivent principes sérialisabilité linéarisabilité éviter diver gence répliques Herlihy Cohérence terme systèmes respectent cohérence garantissent propage toutes répliques former cohérent aucune autre opérée entre temps lecture écriture considérée comme réussie moins répliques répond correctement émetteur requête valide mises ensuite propagées travers réseau arrière manière asynchrone cohérence aucun ordre imposé opérations ainsi avoir conflits mises conflits généralement résolus niveau client règles applicatives Vogels Cohérence causale cohérence permet limiter conflits subvenir cohérence terme comme précédemment également conçu systèmes concurrents multi lectures écritures donnant possibilité toute réplique répondre requêtes utilisateur Toutefois système vérifie cohérence causale impose opère autres mises exécutées avant ainsi conflits peuvent évités autres termes condition définit ordre partiel opérations doivent exécutées causalité avoir conflits mises donnée arrivent temps phase résolution conflit toujours nécessaire cohérence causale forte cohérence terme négliger consommation bande passante nombre messages transmis travers réseau Cohérence faible cohérence généralement utilisé systèmes ligne répliques temps connectées entre elles elles peuvent LibRe Protocole gestion cohérence courtes périodes priori connues Quand noeuds connectent elles partagent leurs mises converger cohérent Ainsi donnée modifiée cette modification propagée répliques certain temps Saito Shapiro noter autres définitions existent littérature Mosberger Notre approche LibRe partir étude types cohérence existants avons décidé proposer nouveau protocole permettant faire compromis entre cohérence disponibilité latence avons appelé LibRe Librairie Réplication Notre objectif étant teindre bonne cohérence proche cohérence forte accédant seule réplique TOUTES répliques QUORUM importe nombre répliques système effet système cohérence terme savons moins réplique importe moment Ainsi transmettant demandes lecture niveau noeud version récente donnée désirée évitant noeuds erronés encore modifications pourrions préserver cohérence système LibRe proposé garantir accès version récente données disponibilité système minimum latence principale composante LibRe annuaire répertorie toutes écritures mises opérées système Ainsi noeud cohérent quelques données erroné autres titre exemple supposons topologie serveurs connectés réseau commun noeud particulier topologie panne séparé réseau pendant période temps noeud incohérent opérations pendant cette période Toutefois noeud cohérent données affectées opérations autres termes souhaitons identifier mises encore exécutées noeuds permet système arrêter transmettre demandes noeud erroné jusqu nouveau cohérent noeud considéré comme erroné contient données périmées requête entrante Cette restriction libérée mises opérées noeud noeuds annoncent leurs mises annuaire annonce contient tifiant ressource modifiée ainsi identifiant noeud nuaire implémenté façon décentralisée selon table hachage distribuée Zhang éviter unique point entrée Single Point Failure celui tombe panne noter également fiabilité LibRe exécution ainsi étude formelle comportement effectués Cette étude présentée papier information lecteur référer Kumar Description LibRe figure montre positionne LibRe système complet Chiky appelons Frontend noeud lequel client connecte envoyer requêtes considérons architecture multi lecture écriture chaque noeud jouer frontend frontend interroge registre LibRe trouver noeud cible pouvant répondre requête montre figure protocole LibRe constitué composants savoir annuaire également appelé registre Registry gestionnaire disponibilité Availability Manager gestionnaire notification Advertisement Manager annuaire struc stockage mémoire format valeur étant identifiant ressource donnée valeur liste répliques contenant données récentes taille liste noeuds atteint nombre répliques système gnifie cette donnée cohérente enregistrement valeur cette donnée supprimé annuaire toute sécurité gestionnaire disponibilité charge transmettre requête lecture noeud contenant version récente données gestionnaire notification quant charge enregistrer annuaire notifications noeuds ayant mises pendant opérations écritures composants stockés noeuds répliques suivant architecture Zhang noter noeuds contiennent annuaire Toutefois celui répliqué colocalisé données charge supervision leurs versions défaillance noeud annuaire reconstruit dynamiquement requêtes transmis noeuds responsables réplication LibRe destiné adopté système éventuellement cohérents conséquent annuaire exactement celle noeuds réplication nuire manière importante utilisateur Architecture globale LibRe figures montrent diagramme séquence comportement LibRe opérations écriture lecture respectivement Opération écriture système distribué quand frontend reçoit requête écriture transfère toutes répliques derniers accusent bonne réception modification frontend réponse succès client nombre suffisant réponses répliques délais frontend réponse échec protocole LibRe LibRe Protocole gestion cohérence LibRe Write Update Operation LibRe Operation Diagramme séquence LibRe comportement usuel étendant message notification réplique envoie manière asynchrone annuaire Cette notification constituée donnée version version noeud ayant algorithme décrit contribution gestionnaire notifications opération écriture distingue Insertion Lorsqu donnée écrite système stockage première Quand donnée mettre existe système stockage provenir frontend transférée noeud réplique Algorithm Opération écriture LibRe function dataKey versionId nodeIP exists dataKey ersionId getVersionId dataKey versionId ersionId replicas getReplicas dataKey replicas appendEP replicas nodeIP updateReplicas dataKey replicas versionId ersionId replicas reinitialize nodeIP updateReplicas dataKey replicas updateVersionId versionId replicas nodeIP createEntry dataKey replicas updateVersionId versionId function Quand noeud réplique envoie message notification concernant Gestionnaire disponibilité actions suivantes abord vérifie donnée existe annuaire ligne opération ligne version cette ressource récupérée Version nombre croit façon monotone représentant caractère récent exemple timestamp opération Chiky Ligne version enregistrée annuaire correspond version ration alors ligne adresse noeud ajoutée liste répliquas existant Ligne versions correspondent version opération supérieure version existant annuaire signifie nouvelle ligne liste répliques réinitialisée adresse noeud Version également Ligne existe annuaire ligne signifie insertion alors nouvelle entrée créée nouvelle adresse noeud version opération lignes Cette approche correspond politique Writer dernière gagnante Saito Shapiro Opération lecture Quand frontend reçoit requête lecture envoie message demande ponibilité requête noeud hébergeant annuaire Celui envoie requête répliques trouvant annuaire aucune entrée trouvée alors quête envoyée importe noeud réplique figure algorithme décrit comportement Algorithm Opération lecture LibRe function GETTARGETNODE dataKey replicas getReplicas dataKey targetNode getTargetNode replicas targetNode targetNode useDefaultMethod dataKey forwardRequestTo targetNode function Evaluation LibRe Simizer avons abord évalué politique LibRe simulation étendant plate forme Simizer Lefebvre avons ainsi comparer Libre proto coles synchronisation données connues outils librairies existantes Optor CloudSim Calheiros SimGrid Casanova fournissent moyens simples simuler problèmes cohérence données systèmes large échelle avons testé protocole Libre comparant autres politiques connues rence synchrone Saito Shapiro cohérence terme cohérence asynchrone Saito Shapiro Paxos Chandra avons considéré requêtes opérations écriture lecture requêtes mélangées ordre aléatoire Pendant opérations écriture données écrites cache moire disque Pendant opérations lecture temps latence requête calculé fonction nombre instructions nécessaires traiter additionné temps accès données données nécessaires disponibles cache noeud github simizer LibRe Protocole gestion cohérence temps accès négligé considéré sinon temps accès ressources calculé fonction taille données certaines données nécessaires existent quête considérée comme échouée avons utilisé mêmes requêtes ensemble politiques cohérence testées faisant varier nombre noeuds figure montre résultats obtenus pouvons observer figure seule cohénrece terme présente lectures erronées nombre nombre noeuds quand examinons latence pouvons élevée Paxos cohérence pessimiste affecter disponibilité système pouvons également latence LibRe moyenne figure écart figure moins élevée autres politiques affectée augmentation nombre noeuds Latence moyenne lecture Latence moyenne écriture Ecart Nombre lectures erronées Résultats expérimentaux CaLibRe Evaluation LibRe Cassandra Dispositif Cassandra Lakshman Malik systèmes source NoSQL populaires architecture conséquent avons décidé mettre oeuvre protocole LibRe workflow Cassandra évaluer performance contre Chiky niveaux cohérence offerts système QUORUM version utilisée Cassandra version expérimentations menées cluster instances CaLibre Cassandra constitué medium small micro instances service Cloud Amazon Amazon grande large instance également utilisée envoyer requêtes essai benchmark Cooper Yahoo Cloud Services Benchmark projets source écrit évaluation systèmes stockage Cloud objectif principal mesurer performance système travers latence requêtes passage échelle système exploitation utilisé toutes instances Ubuntu Server configuration essai utilisé Update Heavy workload workload nombre enregistrements nombre opérations nombre threads facteur réplication défaut stocke colonnes utilisé comme annuaire LibRe utilisation comme ressource conduire problème suivant ensemble colonnes réplique annuaire pourrait assumer contient version récente toutes colonnes éviter cette situation mettons toutes colonnes chaque évaluons performance cohérence instances Cassandra différentes options cohérence QUORUM comparons instances CaLibRe cohérence Lecture écriture partir seule réplique performance mesurée terme latence écriture lecture cohérence terme nombre lectures erronées simuler nombre significatif lectures erronées mécanisme propagation partielle injecté cluster Cassandra CaLibRe Kumar cette extension propageons mises instances répliques Résultats figures montrent respectivement résultats terme latence lecture latence écriture nombre lectures erronées utilisant Cassandra différents niveaux cohérence contre CaLibRe protocole LibRe implémenté Cassandra figure correspond cohérence niveau lecture écriture QUORUM correspond niveau cohérence QUORUM correspond cohérence écriture lecture CALIBRE correspond notre implémentation LibRe Cassandra avons testé cohérence lecture écriture cause notre extension injecter mises erronées figure correspondant mesure latence lecture montre centile latence Calibre similaire autres options cohérence Cassandra latence CALIBRE Cassandra niveau meilleurs QUORUM latences minimales moyennes CALIBRE légèrement élevées niveau Cassandra restent meilleures options LibRe Protocole gestion cohérence Latence lecture Latence écriture Lectures erronées Evaluation CaLibRe hérence QUORUM protocole LibRe impose appel additionnel registre traitements requêtes figure correspondant mesure latence écriture montre latence écriture Calibre similaire celui QUORUM Calibre rapide autres indicateurs centile latences minimum latences moyennes QUORUM Cependant comparant entités certaines mesures CALIBRE légèrement élevées significativement cohérences effectuent écriture seule réplique CALIBRE système écrit aussi seule réplique nécessite munication annuaire implique supplémentaire figure montre nombre lectures erronées chaque niveau cohérence Cassandra niveau cohérence montre grand nombre lectures erronées avait également quelques lectures erronées autres options cohérence chiffres négligeables rapport nombre total requêtes résultats possible conclure CaLibRe offre niveau cohérence similaire celui fourni niveau QUORUM meilleure latence Conclusion avons présenté article méthodes gestion cohérence tèmes stockage données large échelle objectif cette étude trouver meilleur compromis entre cohérence latence disponibilité systèmes Après étude Chiky différents types cohérence existants algorithmes implémentés systèmes actuels sommes rendus compte existait possibilité encore explorée assurer cohérence forte possible consultant seule réplique avons proposé algorithme appelé LibRe avons évalué simulation grâce plateforme Simizer aussi intégrant système stockage Cassandra résultats expérimentations démontré efficacité notre approche Cependant performances LibRe testées noeuds rejoignent quittent cluster cours événements protocole LibRe subir incohérences temporaires partie notre étude cours autre perspective travail étudier influence choix version répliques effet avions choisi timestamp comme critère décider version récente pourrait aussi horloge vectorielle exemple Enfin envisageons expérimenter Libre application Références Abadi Consistency tradeoffs modern distributed database system design story Computer Amazon Amazon elastic compute cloud amazon amazon Cameron Capozza Millar Stockinger Optor simulator studying dynamic replication strategies International Journal Performance Computing Applications Calheiros Ranjan Beloglazov Buyya Cloudsim toolkit modeling simulation cloud computing environments evaluation resource provisioning algorithms Software Practice Experience Casanova Legrand Quinson Simgrid generic framework large scale distributed experiments Proceedings Tenth International Conference Computer Modeling Simulation UKSIM Washington Computer Society Chandra Griesemer Redstone Paxos engineering perspec Proceedings twenty sixth annual symposium Principles distributed computing Cooper Silberstein Ramakrishnan Sears Benchmarking cloud serving systems Proceedings symposium Cloud computing Gilbert Lynch Brewer conjecture feasibility consistent available partition tolerant services SIGACT Herlihy Linearizability correctness condition concurrent objects Trans Program Kumar Chiky Lefebvre Soudan Calibre better consistency latency tradeoff quorum based replication system International Conference Management Cloud Systems Globe Springer LibRe Protocole gestion cohérence Lakshman Malik Cassandra decentralized structured storage system Lefebvre Kumar Chiky Simizer Evaluating consistency trade through simulation Proceedings First Workshop Principles Practice Eventual Consistency PaPEC Mosberger Memory consistency models SIGOPS Saito Shapiro Optimistic replication Comput Vogels Eventually consistent Commun Zhang Distributed Table Theory Platforms Applications Springer Briefs Computer Science Springer Summary paper present consistency management protocol called LibRe Library Replication adapted Cloud storage systems NoSQL databases protocol ensures access latest version while replica consulted algorithm evaluated simulation implemented within Cassandra storage system results these experiments demonstrated effectiveness approach