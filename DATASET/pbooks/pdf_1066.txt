recherche structures fréquentes intégration schémas federico lópez laurent pascal poncelet maguelonne teisseire lirmm université montpellier 34392 montpellier cedex delrazo laurent teisseire lirmm lgi2p eerie georges besse 30035 nîmes cedex pascal poncelet résumé recherche schéma médiateur partir ensemble problématique actuelle résultats recherche issus fouille données arborescentes peuvent adoptés contexte plusieurs propositions réalisées méthodes représentation arborescences souvent coûteuses permettre véritable passage échelle article proposons algorithmes recherche schémas fréquents basés méthode originale représentation schémas décrivons brièvement structure adoptée ensuite détailler algorithmes recherche arbres fréquents appuyant telle structure représentation proposée algorithmes associés évalués différentes bases synthétiques schémas montrant ainsi intérêt approche proposée introduction étant donné explosion volume données disponibles internet devient indispen sable proposer nouvelles approches faciliter interrogation grandes masses information retrouver informations souhaitées conditions permettre interroger données hétérogènes disposer plusieurs schéma général utilisateur pourra interroger partir duquel données sources directement accédées malheureusement utilisateurs disposent moyen connaître modèles jacents données souhaitent accéder challenges contexte fournir outils extraire manière automatique médiateurs schéma médiateur alors considéré comme interface permettant utilisateur interrogation sources données utilisateur requêtes manière transparente tenir compte hétérogénéité répartition données étant maintenant prépondérant internet recherche moyens intégration schémas domaine recherche actif recherches permettant accès données quand schéma interrogation connu maintenant avancées xylème recherches concernant définition automatique schéma médiateur restent complètes satisfaisantes tranier alors intéressant considérer recherche structures fréquentes intégration schémas travaux réalisés contexte fouille données obtenir schéma fréquent ensemble schémas fréquents derniers offrent alors éléments pertinents construction schéma médiateur proposer approche permettant pondre cette dernière problématique focalisons recherche structures fréquentes données schémas structure fréquente arbre trouvant plupart schémas considérés cette proportion examinée support correspond nombre minimal arbres lesquels arbre retrouver considéré comme fréquent telle recherche complexe mesure nécessaire traduire ensemble structure aisément manipulable cette transformation données conduit parfois doubler tripler taille initiale souhaite utiliser propriétés spécifiques permettant améliorer processus fouille existe solution efficace problème alliant représentation compacte propriétés intéressantes objet article définition approche fouille données répondant objectif article structuré manière suivante section introduit définitions différentes inclusions contexte structures hiérarchiques propose aperçu principales approches existantes fouille données arborescente présentons égale détail problématique étudiée section présente notre proposition méthode recherche schémas fréquents utilisant propriétés structure données arborescentes compacte originale différentes expérimentations menées bases schémas décrites section enfin section conclut présente principales perspectives associées travaux définitions problématique travaux connexes définitions préliminaires arbre graphe orienté connexe cycle composé ensemble nœuds reliés existe particulier nommé racine arbre ordonné existe ordre entre arbre ordonné sinon définition arbre enraciné étiqueté ordonné ensemble nœuds ensemble branches chaque branche couple ordonné nœuds ensemble étiquettes fonction racine relation ordre entre chaque interne taille notée nombre nœuds lorsque manipulerons plusieurs arbres noterons arbre suite article utilisons arbre arbre enraciné étiqueté ordonné définition inclusion soient arbres disons inclu arbre existe fonction injective nœuds nœuds vérifie conditions suivantes préserve étiquettes préserve relation ordre entre frères alors préserve relations parenté alors ancestralité alors inclusion induite relations parenté préservées ailleurs relations ancestralité respectées inclusion incrustée exemple arbres inclusion induite incrustée exemple considérons arbres représentés figure relations parenté respectées inclusion induite inclus manière induite arbre relations ancestralité conservées alors trouve inclusion incrustée inclu préserve ordre entre frères suite article considérons inclusion induite haitons traiter ordre existant entre nœuds hiérarchie façon directe ordre entre nœuds niveau façon indirecte pouvons définir support arbre selon cette inclusion manière suivante définition support forêt arbres arbre support minimal spécifié utilisateur support défini support nombre arbres incluant inclusion induite nombre arbres support alors arbre fréquent problématique problématique étudiée article recherche structures quentes arbres apparaissent suffisamment fréquemment documents considérons suite étape initiale traitement réalisée documents manière retenir structure forme arbre consi dérons également issue cette phase étiquetage nœuds homogène nœuds étiquette arbres différents partagent seulement syntaxe également sémantique objectif consiste alors rechercher partir forêt arbres obtenue fonction support minimal spécifié utilisateur arbres apparaissent suffisamment fréquemment nombre occurrences supérieur support recherche structures fréquentes intégration schémas minimal répondre cette problématique trouvons confrontés problèmes suivants quelle structure représentation efficace utiliser idéalement étant donné considérons grandes quantités arbres souhaitons avoir structure seulement efficace mémoire également adaptée traitements souhaitons faire comment tester efficacement inclusion arbre arbre rechercher ensemble arbres fréquents nécessite parcourir arbres effectuer nombreuses comparaisons réussir extraire parties communes indispensable pouvoir trouver rapidement partir compa raison effectuée souhaitons améliorer efficacité recherche travaux existants cette partie intéressons seulement approches recherche examinons également méthodes représentation arbres travaux domaine fouille données arborescentes peuvent distingués selon traitent arbres ordonnés situant contexte schémas avère nécessaire traiter ordre éléments celui spécifié focaliserons propositions prenant charge arbres ordonnés notre connaissance existe travaux proposant méthodes extraction arbres ordonnés ainsi propose rithme treeminer extraire arbres fréquents selon inclusion incrustée représentation originale arbres facilite gestion candidats offre performances intéressantes traitent également problématique arbres ordonnés selon définition inclusion induite approche proposée freqt adopte structure représentation first child sibling comme illustrée figure proces fouille chaque structure fréquente freqt conserve liste nœuds droite arbres données supportant cette structure illustrons figure fréquent positions données stockées fréquent positions droite stockées cette information représente positions cette structure supportée examinons attentivement représentation verticale adoptée treeminer aboutit stocker trois taille arbre manière structure utilisée freqt offre performances attractives cette représentation conduit également tripler taille stocker informations nécessaires elles abordent problématique approches représentation efficaces arbres récemment proposées cependant outre elles considèrent notion ordre elles utilisent propriétés aussi intéressantes travaux précédents améliorer processus extraction notre objectif permettre recherche arbres ordonnés contrai rement approches existantes contexte utiliser représentation coûteuse mémoire cette structure outre posséder propriétés intéressantes représentation first child sibling 4next first freqt représentation arbre 4t3t1t min_supp freqt stockage liste positions fréquents améliorer processus extraction contexte situe notre proposition décrite section proposition cette section proposons nouveaux algorithmes permettant extraction arbres fréquents ordonnés données arborescentes premier temps décrivons structure adoptée soulignons intérêts second temps proposons survol notre approche extraction montrons comment propriétés structure utilisées améliorer processus fouille finalement décrivons formellement algorithmes proposés illustrer propos utiliserons arbres figure représentation arbres représenter différents arbres manipulés notre approche adoptons représentation proposée arbre ainsi décrit vecteurs comme proposé weiss premier nommé conserve position chaque nœuds arbre numérotés profondeur abord racine correspond index valeur indiquer racine recherche structures fréquentes intégration schémas forêt arbres exemple racine droite structure étiquettes feuille représentation arbre valeurs correspondent positions nœuds comme illustré figure cette représentation permet retrouver temps constant permet localisation directe feuille droite rapport index parcourant arbre ainsi possible obtenir toutes relations directes entre nœuds deuxième vecteur nommé utilisé enregistrer étiquettes arbre représentant étiquette chaque structure adoptée permet représentation arbres coûteuse puisqu possède propriétés intéressantes évoquées paragraphe suivant pouvant utilisées recherche structures fréquentes aperçu général notre proposition basée approche classique générer élaguer chaque étape générons différents candidats testons inclus bases arbres inclusion notre entendu définie comme étant induit méthode représentation arbres proposons permet générer manière efficace arbres candidats élaguer arbres fréquents après calcul support transformation arbre après génération considérons présent comment candidats générés candidats taille abord obtenus parcourant nœuds arbres données chaque support incrémenté parcours seuls conservés nœuds support supérieur support minimal défini utilisateur données alors transformée conserver nœuds fréquents comme illustré figure branche droite génération candidats candidats taille générés combinant fréquents taille génération candidats taille effectue manière proches classiques apriori agrawal srikant combinaison fréquents taille adoptons stratégie génération candidats selon branche droite comme proposée illustrée figure pouvons ainsi constater intérêt notre structure représentation puisque naturellement suffit ajouter nouvel élément représentation arbre spécifiant nouveau calcul support chaque candidat consiste compter nombre arbres contiennent arbre candidat ainsi chaque arbre recherchons points ancrage lesquels racine arbre tester instancier points correspondent nœuds arbre correspondent racine arbre tester chaque point ancrage trouvé cherche alors instancier ensemble nœuds arbre candidat arbre courant testé tester notons inclusion induite recherchons instanciation exacte candidat arbres nœuds candidat trouvés arbre supporte candidat support structure candidate alors incrémenté algorithmes algorithme algorithme fonctionne manière suivante premier parcours réalisé extraire items nombre occurrences supérieur minimal items constituent arbres résumés seule racine considéré obtenons ainsi ensemble arbres fréquents taille derniers combinés entre former candidats taille parcours permet obtenir semble constitué arbres taille algorithme poursuit générant candidats taille effectuant parcours compter nombre occurrences chaque candidats lorsque aucun candidat généré algorithme termine algorithme gencandidats algorithme décrit génération candidats utilise branche droite arbres fréquents taille proposer candidats taille chaque arbre fréquent taille génère nouveau candidat étendant arbre branche droite cette génération obtenue intermédiaire fonction ainsi chaque ajoutons seules extensions possibles celles avèrent fréquentes recherche structures fréquentes intégration schémas entrée données arbres minimal sortie arbres fréquents arbres fréquents taille arbres fréquents taille faire gencandidats chaque faire support alors retourner algorithme entrée arbres fréquents sortie arbres candi chaque faire chaque faire chaque faire alors retourner algorithme gencandidats entrée candidat sortie support candidat chaque faire faire alors ancre alors retourner algorithme support entrée candidat arbre racine ancrage sortie supporte nbnœuds nniv_act nœudsnivsuiv while nniv_act poursuit nniv_act nbnœuds nniv_act nœudsnivsuiv nniv_act nbnœuds alors retourner sinon retourner algorithme ancre calcul support chaque candidat consiste compter nombre arbres contiennent arbre candidat chaque arbre recherche effectuée existe points ancrage lesquels racine arbre tester instancier appel algorithme ancre arbre existe nombre occurrences alors incrémenté support retourné considérons algorithme gestion points ancrage algorithme chaque point ancrage trouvé chaque arbre candidat possède label arbre cherche instancier ensemble nœuds arbre candidat arbre couramment testé autres termes souhaitons projeter arbre candidat arbre réalisé intermédiaire algorithmes ancre poursuit algorithmes algorithme poursuit utilisé chercher instanciation exacte candidat arbres nœuds candidat trouvés algorithme retourne alors valeur arbre supporte candidat retourne valeur nœuds arbre parcourus trouver ensemble nœuds candidat algorithme poursuit nniv_act nbnœuds entrée nniv_act ensemble nœuds trouver arbre nbnœuds nombre nœuds vérifiés sortie nœuds nniv_act trouvés chaque nniv_act faire alors nbnœuds nbnœuds nniv_act alors retourner sinon retourner algorithme poursuite recherche expérimentations expérimentations réalisées pentium ayant système linux programmes développés compilés avons utilisé bases données construites employant programme généra arbres proposé termier programme propose différents ramètres spécifier nombre arbres générer profondeur nombre étiquettes maximales différentes valeurs utilisées générations expérimentations indiquées tableau paramètres valeurs nombre arbres générer profondeur maximal arbre nombre maximal branches nombre maximal étiquettes arbres fréquents semés générée probabilité paramètres construction données synthétiques recherche structures fréquentes intégration schémas avons souhaité évaluer notre proposition selon aspects temps réponse occupation mémoire effet argumentons notre proposition comme étant efficace passage échelle toujours synonyme efficacité temps réponse expérimentations réalisées prouvent notre proposition répond critères évaluer performances temps exécution sommes comparés algorithme freqt détection duplicats permettant rechercher inclusions induites optimisation celui freqt limitant parcours arbres vérification candidats figure représente occupation mémoire utilisée représentation schémas comme attendions occupe moins espace mémoire puisqu adopte structure représentation réduite freqt freqt derniers adoptent structure figures indiquent temps exécution obtenus freqt différents supports différentes tailles schémas pouvons constater obtient meilleurs résultats taille données x1000 freqt min_sup 10000 100000 taille données x1000 freqt min_sup 10000 100000 taille données x1000 freqt min_sup 10000 taille données x1000 freqt min_sup temps exécution rapport taille freqt analysant résultats indiqués figure comparant freqt freqt avère temps exécution nettement améliorés freqt obtenu terme espace mémoire comparer temps exécution tenus optimisation basée stockage informations supplémentaires comme indiqué paragraphe souhaitons présent mettre œuvre optimisation parcours structure proposée améliorer performances terme temps exécution telle optimi sation réalisable constitue perspectives principales devrions alors obtenir performances supérieures celles obtenues freqt conser structure 10000 100000 taille données x1000 freqt freqt min_sup 10000 taille données x1000 freqt freqt min_sup mémoire temps exécution freqt freqt conclusion perspectives article proposons approche efficace extraction arbres quents première proposition recherche arbres fréquents selon clusion induite représentation schémas premières expérimentations réalisées données synthétiques soulignent intérêt notre propo sition rapport approches référence perspectives immédiates concernant suivent abord possible améliorer algorithme optimisant parcours réalisés vérification candidats comme proposé optimisation freqt toutefois souhaitons mettre place procédé moins coûteux terme espace mémoire ensuite souhaitons utiliser structure représentation arbres réaliser recherche arbres fréquents basant inclusion incrustée travaux objectif utilisés cadre médiation données arbres fréquents extraits servant support construction automatique schéma médiateur telle solution également adoptée cadre fouille ligne streams traitement volée données cette perspective permettra traiter volumes données transitant internet manière efficace rapide recherche structures fréquentes intégration schémas références agrawal srikant septembre algorithms mining association rules large databases proceedings conference santiago chile kawasoe arimura sakamoto efficient substructure covery large structured proceedings annual symposium mining arlington muntz indexing mining trees proceedings international conference mining florida muntz cmtreeminer mining closed maximal frequent subtrees proceedings eighth pacific conference knowledge discovery mining pakdd sydney australia laurent teisseire représentation efficace arborescences recherche structures fréquentes actes atelier fouille données complexes conférence extraction gestion connaissances termier rousset sebag treefinder first towards mining proceedings conference mining tranier baraer bellahsene teisseire where family based heuristics schema integration proceedings international database engineering applications symposium ideas coimbra portugal chopper efficient algorithm mining journal computer science technology weiss structures algorithm analysis xylème dynamic warehouse engineering bulletin efficiently mining frequent trees forest proceedings sigkdd conference edmonton alberta canada summary research mediator schema schemas current problem where results stemming mining databases adopted context several propositions proposed methods representation databases often memory consuming querying volumes paper propose rithm research frequent structures based original method representation schemas describe structure adopted algorithms research frequent trees leaning structure