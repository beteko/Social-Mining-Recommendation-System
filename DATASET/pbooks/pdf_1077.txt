Techniques fouille données réécriture requêtes présence contraintes valeurs Hélène Jaudoin Frédéric Flouvat Laboratoire LIMOS Université Blaise Pascal Clermont Ferrand Aubière cedex France hjaudoin flouvat isima Résumé article montrons comment techniques fouilles données peuvent résoudre efficacement problème réécriture requêtes termes présence contraintes valeurs partir forma lisation problème réécriture cadre logique description montrons comment problème rattache cadre couverte connaissances bases données exploitation cadre permet bénéficier solutions algorithmiques existantes lution problème réécriture proposons implémentation cette approche expérimentons premiers résultats démontrent intérêt telle approche termes capacité traiter grand nombre sources données Introduction Aujourd techniques analyse intégration données devenues atouts majeurs entreprises services gouvernementaux effet techniques mettent temps regrouper croiser information distribuée domaine développement durable techniques notamment indispensables rassembler analyser pratiques agricoles ainsi garantir traçabilité pratiques précisément travaux situent cadre projet visant mettre place système intégra interroger sources données agricoles distribuées système flexible permettre arrivée nouvelles sources données suivre processus infor matisation domaine agricole effet entre nombre exploitations ayant accès Internet triplé permettre traiter grand nombre sources données domaine susceptible accueillir services déconcentrés ministères grand nombre exploitations article plaçons cadre système médiation suivant approche Local décrites requêtes schéma Cette approche connue flexible ajout suppression sources projet réalisé collaboration Cemagref cemagref informatique Fouille données réécriture requêtes données affectent schéma global intéressons particulièrement blème réécriture requêtes termes présence contraintes valeurs contraintes valeurs correspondent notion énuméré données Elles permettent spécifier valeurs autorisées attribut donné contraintes valeurs utiles beaucoup applications comme exemple vérification contraintes intégrité exprimer forme information incomplète Borgida Patel Schneider contraintes connaît actuellement regain impulsé notamment travaux sémantique effet types énumérés partie intégrante langage ontologie standard émergeant séman tique utilisation contraintes valeurs motivée notre cadre applicatif effet nombreuses souvent description distinguent uniquement leurs autorisées certains leurs attributs contraintes valeurs interviennent naturellement expression requêtes typiques domaine application version préliminaire notre travail concernant problème réécriture termes cadre langage publié Jaudoin article présenté étend résultats directions suivantes considérons problème réécriture termes cadre constructeurs quantification universelle conjonc langage langage permet forme négation contraintes cardinalité langage augmente langage constructeur permet exprimer contraintes valeurs investigation théorique blème réécriture complexe cadre langageALN notam intéractions contraintes valeurs contraintes cardinalité ainsi nécessité tenir compte inconsistance résolution problème nécessite nouvelle caractérisation subsomption adaptée problème réécriture ainsi caractérisation nouvelles formes réécritures apparaissent lemme étudions ensuite problèmes algorithmiques engendrés nouveaux réécritures dansALN présentons nouveau prédicat nommé formalisation problème calcul nouveaux réécriture cadre Mannila Toivonen prédicat conjonction prédicat présenté Jaudoin rappelé permet résoudre problème réécriture Enfin décrivons succintement implémentation notre approche réécriture exploite adapte algorithme fouille données existant Apriori sentons ensuite résultats expérimentations viennent conforter intérêt techniques fouilles données notre cadre premiers résultats montrent capacité notre prototype passer échelle supportant traitement grand nombre jusqu 15000 Notons littérature articles présentent résultats expérimentaux leurs approches réécriture concentrent généra lement résultats théoriques notre connaissance Pottinger Halevy rares références décrit évaluation performances algorithme réécriture Aussi réalisation prototype expérimentation constituent notre contribution domaine réécriture actuellement recommandation Jaudoin Flouvat suite article organisée comme section donnons prérequis cessaires formalisation problème réécriture requêtes présence contraintes valeur cadre logiques description section reformule problème cadre découverte connaissances bases données section présente implémentation expérimentations réalisées section conclusion pectives données démonstrations lemmes théorèmes article donnés Jaudoin Réécriture requêtes présence contraintes Prérequis logiques description logiques description formalisme représentation connaissances permet représenter structures complexes raisonner elles Baader Elles permettent décrire domaine application concepts prédicats unaires rôles prédicats binaires logique description définie ensemble constructeurs article intéressons logique constructeurs listés table colonne ensemble concepts ensemble valeurs ensemble rôles image concept ensemble rôles prennent leurs valeurs Constructeurs Sémantique entier positif Syntaxe sémantique logique Exemple Exemples concepts pouvant formés constructeurs ParcelleCulturale aRecuE EffluentElevage aRecuE spécifie parcelles culturales moins épandage était effluent numDepartement aRecu typeProduit spécifie indivi départements moins types produit contraintes valeurs permis restreindre image numDepartement Fouille données réécriture requêtes sémantique concepts donnée interprétation ensemble appelé domaine interprétation fonction interpréta supposons domaine interprétation partionné ensembles disjoints décrivant ensemble individus domaine décrivant ensemble valeurs concept interprété comme étant ensemble interprété comme ensemble interprétation associe chaque valeur élément implique précisément sémantique constructeurs donnée colonne table interprétation modèle concept concept inconsistant toute interprétation Etant donnée cette sémantique possible définir notion subsomption valence comme concept subsumé concept concept équivalent concept descriptions intentionnelles domaine application définies terminologie terminologie ensemble axiomes terminologiques forme Spécification primitive concept Définition concept concept concept article supposons terminologies acycliques aucun concept référence directement indirectement définition spécification sémantique terminologies obtenue étendant notion interprétation axiomes terminologiques comme interprétation modèle terminologie modèle chaque axiome traiter problème réécriture logique appuyons forme normale donnée Jaudoin forme normale concept exprimer concept forme canonique Cette forme normale transforme concept concept conjonction atomes forme défini ensemble rôles concept atomique restriction cardinalité ensemble valeurs suite apparaît description concept Réécriture cette section définissons cadre médiation problème réécriture cadre logiques description donnons caractéristiques réécri tures contexte schéma global terminologie formée définitions concepts requête concept décrite termes concepts supposée forme normale minologie formée spécifications primitives spécifications primitives permettent décrire décrites termes supposées données forme normale contexte cherche répondre requête ayant uniquement connais sance technique répondre reformuler expression utilise uniquement expression obtenue appelée réécriture 5Soit rôles dénote concept appartient uniquement appartient Jaudoin Flouvat téresse réécritures maximales réécritures permettent calculer maximum réponses requête donnée définition réécriture maximale donnée dessous Définition Réécriture maximale Soient terminologie concept réécriture maximale termes concept langage réfère uniquement existe concept réfère uniquement suite appelle réécriture conjonctive maximale toute réécriture langage Comme montré Jaudoin requête donnée unique réécriture maximale formée union réécritures conjonctives maximales ensemble réécritures conjonctives maximales contexte logique Aussi calculer réponses requête cherche calculer réécritures conjonctives maximales calculer réécritures conjonctives maximales requête donnée approche classique réécriture basée algorithme paniers Informellement cette approche fonctionne manière suivante Etant donné requête principale considérer chaque atome isolément chaque atome requête associé panier ensemble contient toutes réécritures conjonctives maximales atome Ensuite deuxième étape réécritures candidates calculées effectuant produit cartésien entre niers permet obtenir ensemble toutes réécritures conjonctives maximales obtenir effectivement réécritures conjonctives maximales réécritures incon sistantes maximales doivent ensuite supprimées ensemble travaux présentés Jaudoin montrent appuyant carac térisation subsomption cadre médiation défini précé demment réécritures conjonctives maximales atome donné formées ensembles minimaux vérifient conditions énoncées lemme Lemme Soient cardinalité grand ensembles valeurs apparaît requête profondeur maximale7 atomes apparaissant requêtes ensemble minimal subsumée alors conditions suivantes inclusion ensembliste profondeur atome longueur nombre rôles Fouille données réécriture requêtes existe préfixe lemme donne conditions nécessaires ensemble forme réécriture conjonctive maximale conjonction appartiennent panier atome Ainsi réécriture panier formée seule lemme lemme lemme examen attentif lemme montre construction paniers calcule classiques réécriture langage lemme réécritures spécifiques présence contraintes valeurs Aussi suite article concentrons problèmes calcul réécritures engendrées contraintes valeurs problèmes posent nouvelles difficultés termes réécriture requêtes requête ensemble valeurs restriction dinalité Considérons maintenant problème création panier intéressons problèmes calcul réécritures lemme définir précisément problèmes introduisons ensemble désigne ensemble telles problème E_conj_rewrite correspond calcul réécritures défini comme Problème terminologie dansALN problème E_conj_rewrite consiste calculer petites conjonctions subsumées problème N_conj_rewrite correspond calcul réécritures defini comme Problème terminologie dansALN problème N_conj_rewrite consiste calculer petites conjonctions subsumées exemple suivant illustre solutions problèmes présentés dessus Exemple requête telle numDepartement aRecu typeProduit Supposons existe telles numDepartement telles aRecu typeProduit 8Notons cependant réécritures lemme intéragissent classiques réécritures dansALN réécritures nécessaires obtenir effectivement réécritures lemme Jaudoin Flouvat VnumDepartement calcule solutions E_conj_rewrite numDepartement partir VnumDepartement obtient conjonc tions suivantes exemple vérifier panier numDepartement contient alors conjonctions manière partir VaRecu typeProduit obtient solution N_conj_rewrite aRecu typeProduit effet intersection ensembles donne ensemble cardinalité inférieure Ainsi appartient panier aRecu 3typeProduit section montrons comment problèmes E_conj_rewrite N_conj_rewrite rattachent cadre découverte connaissances bases données place techniques fouille données cadre Mannila Toivonen rattacher problèmes énoncés précédemment cadre découverte connais sances appuyons cadre théorique introduit Mannila Toivonen formalise problème basique découverte connaissances bases données énoncé manière suivante données langage exprimer propriétés définir groupes données prédicat sélection prédicat permet évaluer phrase intéressante objectif trouver théorie selon ensemble correspond ensemble phrases intéressantes relation spécialisation généralisation ordre partiel motifs généralise spécialise quand ensemble phrases alors Alors représenté bordure positive bordure négative bordure positive correpond éléments spécifiques théorie tandis bordure négative correspond éléments généraux théorie Elles permettent chancune retrouver toutes phrases intéressantes celles quelles Notons prédicat monotone rapport alors alors théorie représentée bordures cadre appliqué multiples problèmes Mannila Toivonen comme exemple problème découverte motifs fréquents Agrawal section attache montrer comment problème réécriture ramener formulation ensembliste transposé cadre précédemment introduit Fouille données réécriture requêtes Formulation problèmes réécriture cadre décou verte connaissances Formulation ensembliste réécriture ensemble entier donnés cherchons maintenant donner formulation ensembliste problèmes E_conj_rewrite N_conj_rewrite reformuler précisément problèmes introduisons définitions suivantes Définition Soient ensemble entier semble associés ensemble parties caractérise petits ensembles intersection éléments contenue tandis caractérise petits ensembles cardinalité intersection éléments inférieure lemme suivant caractérise solutions E_conj_rewrite N_conj_rewrite ensembles Lemme Soient entier ensemble Soient problèmes E_conj_rewrite N_conj_rewrite solution E_conj_rewrite solution N_conj_rewrite formulation ensembliste problème N_conj_rewrite illustrée exemple Exemple Reprenons énoncé exemple FaRecu typeProduit aRecu typeProduit retrouve alors solution N_conj_rewrite aRecu typeProduit section suivante montrons comment cette représentation ensembliste transposée cadre Mannila Toivonen Calcul réécritures cadre découverte connaissances Identification contexte premier ensemble ramener cadre découverte connaissances précédent manière suivante relation langage ensemble parties prédicat défini façon suivante Soient ensemble valeurs relation ordre relation inclusion Jaudoin Flouvat théorie alors ensemble éléments vérifient prédicat prédicat étant monotone notions bordure positive négative appliquent théorème suivant permet caractériser fonction bordure négative Théorème problème E_conj_rewrite pouvons manière caractériser cadre théorique Toivonen Identification Comme précédemment relation consiste ensemble parties relation ordre inclusion intro duisons nouveau prédicat défini comme prédicat monotone rapport inclusion garantit existence bordures conséquent théorème suivant donne carac térisation fonction bordure négative Théorème problème N_conj_rewrite exemple illustre formulation cadre introduit dessus Exemple suite exemple aRecu typeProduit LaRecu typeProduit ensemble parties FaRecu typeProduit paramètre prédicat théorie LaRecu typeProduit égale bordure positive LaRecu typeProduit bordure négative retrouve résultat exemple partir cette formalisation possible utiliser algorithmes fouille données résoudre problèmes particulièrement algorithmes découvertes fréquents Implémentation expérimentations Choix implémentation algorithme réécriture langage implémenté système gestion bases données permettant ainsi gérer efficacement grands volumes données traiter grand nombre transac tions simultanées moment calcul solutions E_conj_rewrite implémenté forme algorithme fouille données extérieur expatriées programme chargé exécuter algorithme fouille données renvoyer résultats utilisons algorithme Apriori Agrawal Srikant trouver solutions E_conj_rewrite algorithme algorithme classique découverte motifs fréquents effectue parcours niveau espace recherche utilise stratégie élagage partir motifs bordure négative limiter nombre motifs générés avantages algorithme résoudre notre problème multiples algorithme Fouille données réécriture requêtes recherchant motifs fréquents découvre uniquement motifs bordure grande partie autres approches stratégie efficacité dépendent prédicat étudié opposé grande partie autres algorithmes fondent efficacité techniques propres prédicat fréquent ficacité approche autre prédicat difficilement prévisible implémentation Apriori utilisée adaptation implémentation Cette implémentation reconnue implémentation efficace Apriori actuellement Goethals Javeed Bayardo implémenta initiale Apriori modifiée façon rendre algorithme indépendant prédicat étudié concrètement pouvoir appliquer Apriori nouveau prédicat suffit définir opérations propres prédicat passer paramètre algorithme Actuellement différents prédicats motifs fréquents prédicat implémenté permettant ainsi trouver solutions E_conj_rewrite Apriori avantage notre implémentation faciliter utilisation Apriori résoudre autres problèmes fouille données évitant avoir réécrire chaque algorithme Expérimentations concentrons expérimentation phase résolu E_conj_rewrite Cette phase étant coûteuse étude permettre estimer nombre pouvant traitées Notons cette borne corres nombre algorithme réécriture identifié comme étant pertinentes réécriture atome forme valeurs Ainsi cette borne conditionne uniquement taille entrée Apriori figure limite nombre algorithme réécriture traiter expérimentations réalisées données synthétiques créés générateur aléatoire Oracle façon cardinalité contraintes valeurs égale entier comprise entre entier mesuré temps exécution Apriori essais expérimentations réalisées pentium mémoire Comme montre figure lorsque taille contraintes valeurs petite possible prendre grand nombre entrée 15000 contraintes taille inférieure taille contraintes augmente nombre traiter algorithme diminue figure effet taille contraintes grande contraintes risquent intersecter cette intersection incluse conséquent nombre motifs intéressants susceptible important grammme nécessite espace mémoire disponible Notons lorsque contraintes valeurs taille figure gauche figure Apriori difficulté rapidement lorsque contraintes taille variable explique exemple contraintes cardinalité contraintes composées moyenne valeurs manière générale montré possible prendre entrée réécriture atomes forme valeurs jusqu 15000 Néanmoins difficile comparer performances notre prototype autres applications réécri requêtes mesure domaine résultats théoriques toujours primé résultats expérimentaux notre connaissance Pottinger Halevy Jaudoin Flouvat 10000 15000 Nombre 10000 15000 Nombre Temps exécution Apriori contraintes taille variable rares références décrit évaluation performances algorithme réécriture implémentation considérée comme permettant passage échelle réécrire requête traiter 12000 Aussi rapport résultats notre approche réécriture basée Apriori permet envisager passage échelle Conclusions perspectives article avons confirmé intérêt techniques fouilles données traiter problème réécriture présence contraintes valeurs effet nouveaux réécritures engendrés contraintes peuvent bénéficier formulation cadre découverte connaissances Mannila Toivonen implémentation notre approche implémentation générique Apriori permet traiter grand nombre envisager passage échelle notre algorithme réécriture Toutefois exécution Apriori devient problématique quand grande partie espace recherche parcourue quand existe grands motifs intéressants telles configurations problème découverte quents algorithmes proposés trouver efficacement motifs grande taille Flouvat adaptation certaines approches pourrait permettre traiter nombre important Références Agrawal Imielinski Swami Mining association rules between items large databases SIGMOD conference Washington Press Agrawal Srikant algorithms mining association rules large bases conference Santiago Chile Chile Baader Calvanese McGuinness Nardi Patel Schneider Description Logic Handbook Theory Implementation Applications Cambridge versity Press Fouille données réécriture requêtes Bayardo Goethals Workshop Frequent Itemset Mining Implementations Volume Workshop Proceedings Borgelt Efficient implementations Apriori Eclat Workshop Frequent Itemset Mining Implementations Borgida Patel Schneider semantics complete algorithm sumption classic description logic Journal Artificial Intelligence Research Flouvat Marchi Petit Adaptive borders search frequent itemsets Workshop Frequent Itemset Mining Implementations Volume Workshop Proceedings Goethals Javeed Advances frequent itemset mining implementations Introduction Workshop Frequent Itemset Mining Implementations Mining frequent patterns without candidate generation SIGMOD Conference Jaudoin Petit Schneider Toumani Query rewriting views presence value constraints Horrocks Ulrike Sattler Description Logics Jaudoin Toumani Petit Schneider Utilisation cadre décou verte connaissances réécriture requêtes présence contraintes valeurs Maitre Rajaraman Ordille Querying Heterogeneous Information Sources Using Source Descriptions conference Mumbai Bombay India Mannila Toivonen Levelwise search borders theories knowledge discovery Mining Knowledge Discovery Pottinger Halevy Minicon scalable algorithm answering queries using views Journal Uchida Arimura efficient algorithm enumer ating frequent closed Workshop Frequent Itemset Mining Implementations Summary paper mining techniques solve efficiently problem query rewriting using views presence value constraints within setting description logicALN Firstly formalization problem framework formalization framework Therefore reuse scalable algorithmic solutions solve rewriting problem describe implementation approach experimental results first results scability approach