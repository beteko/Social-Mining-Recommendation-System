E33Génération partir sources données formats hétérogènes Maxime Lefrançois Antoine Zimmermann Noorani Bakerally MINES Saint Étienne Laboratoire Hubert Curien 42023 Saint Étienne France prenom Résumé Contrairement promeut données données posées plupart organisations formats objets objets contraints féreront formats binaires formats textuels contexte toutefois servir lingua franca interopéra bilité sémantique intégration données formats hétérogènes raison nement requêtage plusieurs outils formalismes permettent transformer documents flexibles étant basés langages transformation correspondance GRDDL XSPARQL R2RML article définit nouveau langage SPARQL Generate permet générer partir données nombre quelconque documents formats arbitraires origina SPARQL Generate étend SPARQL appris facilement ingénieurs connaissance familiers SPARQL implémenté dessus importe moteur SPARQL existant tirer parti mécanismes extension SPARQL prendre compte futurs formats Introduction cherchons faciliter accès formalismes outils Sémantique entreprises services objets contraints étape utiliser formalismes générer partir documents ayant formats variés effet entreprises services stockent échangent données multitude modèles formats données modèles données relationnels ainsi format encore présent portails préfèrent Quand objets contraints objets préfèrent formats légers potentiellement binaires contexte formats données Turtle remplaceront vraisemblablement jamais formats données existants contre modèle données toujours servir lingua franca interopé rabilité sémantique intégration données formats hétérogènes raisonnement requêtage Génération partir sources données formats hétérogènes Générer partir autres modèles formats objet plusieurs travaux recherche outils parfois objet standards Cependant cadre projets auxquels participons avons identifié utilisation besoins écrits section approches existantes satisfont partiellement Notamment solution expressive flexible pouvoir prendre compte nouveaux données demande permettre générer partir plusieurs sources données format hétérogènes conjuguées ensemble données dataset aussi proche possible langage interrogation SPARQL maîtrisée rapidement ingénieurs connaissance décrirons solutions existantes leurs limitations section répondre besoins définissons langage SPARQL Generate extension SPARQL répond besoins dessus combine avantages suivants bénéficie pressivité flexibilité SPARQL notamment mécanisme standard extension fonctions liaison implémenter dessus moteur SPARQL existant principale contribution article formalisation SPARQL Generate présen section Cette formalisation permet alors démontrer SPARQL Generate implémenté dessus importe moteur SPARQL existant section décrivons ensuite brièvement implémentation réalisée Apache discutons finalement évaluation SPARQL Generate section utilisation besoins cadre sessions ingénierie connaissance organisées partenaires industriels académiques souhaitent bénéficier avancées duWeb Sémantique moindre avons identifié utilisation besoins suivants génération partir modèles formats contexte données ouvertes organisations atteignent péniblement sième étoile requises schéma déploiement données ouvertes liées données exposées moins structurées peuvent utiliser propriétaires quatrième étoile consiste utiliser formalismes Sémantique encoder données partenaires pouvoir générer partir plusieurs sources potentiellement formats différents ayant contrôle généré liens entre données contrôle ailleurs pouvoir impliquer données contextuelles liste formats partir desquels devra généré pouvoir facilement solution maîtrisable facilement notions SPARQL objets dispositifs contraints doivent échanger messages légers cause leurs contraintes inhérentes bande passante énergie mémoire syntaxes encodent beaucoup informations textuelles littéraux types données certains groupes travail auW3C souhaitent définir 5stardata Lefrançois syntaxes légères notamment version prédire nombreux autres formats binaires optimisés chaque objet application resteront utilisés utilisation découlent besoins suivants Besoin transformer plusieurs sources formats hétérogènes Besoin contextualiser transformation ensemble données Besoin extensible autres formats données Besoin simple cognitivement facile maîtriser experts Sémantique Besoin implémentation facile dessus moteurs SPARQL existants Besoin solution performante possible temps espace Besoin transformer aussi formats binaires formats textuels Approches existantes générer partir données modèles formats hétérogènes nisseurs consommateurs données peuvent coder mécanismes traduction avère coûteux certain nombre travaux recherche outils permettent simplifier cette tâche nombreux convertisseurs référencés groupe intérêt Semantic Education Outreach ConverterToRdf ciblent plupart format métadonnées spécifiques comme ID3tag Certains peuvent convertir différents types données Apache Any23 Datalift Virtuoso Sponger Citons également standard Direct Mapping Arenas décrit transformation défaut données lationnelles solutions restent permettent contrôler comment généré conséquence sortie décrit souvent structure données plutôt données mêmes serait possible transformer cette sortie règles SPARQL CONSTRUCT nécessiterait familiariser vocabulaire utilisé sortie chacun outils satisfont besoins exprimés section autres approches proposent utiliser langage transformation correspon dance paramétrer génération Cependant plupart solutions ressent quelques modèles comme modèle relationnel formats comme format données spécifiques exemple GRDDL utilise cible Connolly XSPARQL XQuery ciblait originellement Polleres avant étendu modèle relationnel Lopes Aglio Plusieurs autres formalismes proposés générer partir données relationnelles travaux origine standard R2RML définit vocabulaire décrire transformation données Enfin Tandy adopte cette dernière approche cible format données XSPARQL implémentation R2RML Lopes Génération partir sources données formats hétérogènes approche distingue Dimou étend vocabulaire R2RML décrire sources logiques différentes tables bases données relation nelles JSONPath XPath sélecteurs approche implémentée Sesame répond moins besoins serait possible implémenter support types données binaires besoin recherches cours prendre compte sources linked besoin suite article présentons alternative basée extension SPARQL nommée SPARQL Generate bénéficie expressivité extensibi SPARQL implémenté dessus moteurs Spécification SPARQL Generate SPARQL Generate langage requête combinaison ensemble données dataset appelle ensemble documents document chaque document nommé guise illustration voici exécution SPARQL Generate partir dataset contient graphe défaut documents identifiés position mesures Cette requète répond question quels capteurs proches indiquent Graphe défaut Turtle TempSensor 677220 212627 TempSensor 790498 501970 TempSensor 780768 496294 Document position 780496 495157 Document mesures Résultat Turtle NearbySensor NearbySensor Requête SPARQL Generate GENERATE sensor NearbySensor GENERATE sensorIRI ITERATOR sgiter JSONListKeys mesures sensorId WHERE sensorId sensorIRI FILTER sensor sensorIRI CONCAT sensorId jsonPath JSONPath measures jsonPath SOURCE position SOURCE mesures mesures WHERE SplitAtPosition SplitAtPosition sensor TempSensor sensor sensor slong FILTER distance slong implémentation standard Tandy rdf4j utilisons terminologie traductions françaises documents Translations byLanguage language Lefrançois syntaxe concrète SPARQL Generate étend légèrement celle SPARQL ajoutant trois nouvelles clauses clause source permet document variable identifiés position mesures mesures clause iterator permet extraire éléments fonctions itération successivement variable fonction sgiter JSONListKeys utilisée extraire ensemble objet mesures sensorId Enfin clause generate remplace clause construct étendre permettre factoriser génération requêtes imbriquées Différents formats données peuvent supportés ensemble extensible fonctions liaison itération Syntaxe concrète faciliter apprentissage SPARQL Generate ingénieurs connaissance étendons légèrement SPARQL Harris Seaborne GenerateUnit Generate Generate Prologue GenerateQuery GenerateQuery GENERATE GenerateTemplate DatasetClause IteratorOrSourceClause WhereClause SolutionModifier GenerateTemplate GenerateTemplateSub GenerateTemplateSub ConstructTriples SubGenerateQuery ConstructTriples IteratorOrSourceClause IteratorClause SourceClause IteratorClause ITERATOR FunctionCall SourceClause SOURCE FunctionCall ACCEPT VarOrIri SubGenerateQuery GENERATE SourceSelector GenerateTemplate IteratorOrSourceClause WhereClause SolutionModifier Alors production requête SPARQL Query SPARQL Update commencent QueryUnit UpdateUnit production requête SPARQL Generate commence règle GenerateUnit Cette syntaxe concrète contient caractéristiques notoires première caractéristique notoire réside règle partie optionnelle ACCEPT VarOrIri permet spécifier document clause source implémentation irait récupérer document ainsi nommé désigne manière contenu ressource identifiée devrait négocié Cette décrire différentes sortes négociation rapport media langue encore encodage document obtenu différent demandé seconde réside règle permet pratique modulariser requête requête SPARQL Generate requête partie generate requête parente contenir gabarit generate generate template incluant motif graphe potentiellement autres requêtes également faire référence SourceSe lector implémentations libres choisir comment cette déréférencée obtenir nouvelle requête SPARQL Generate besoin représenté syntaxe abstraite SPARQL Generate permet exemple modulariser grosses requêtes rendre lisibles permettre requête appeler requête existante serait déréférencée Charge implémenta faire attention boucles appels requêtes Syntaxe abstraite utilisons notations ensembles anonyme blank littéraux variables disjoints ensemble termes Génération partir sources données formats hétérogènes ensemble motifs triplets défini motif graphe ensemble motifs triplets ensemble motifs graphes notons ensemble fonctions SPARQL disjoint ensemble patrons requête SPARQL notéQ Enfin ensembleX notons ensemble listes ensemble expressions fonctions petit ensemble position CONCAT sensorId sgiter JSONListKeys mesures imbriquées abstraction règle grammaire ensemble clauses source mettra sélectionner document ensemble documents variable exemple requète dessus variable document identifié position introduisons élément spécial représente notons ensemble généralisé ensemble Définition Clause source ensemble clauses source défini équation source clause source particulière plupart utilisation SPARQL Generate variable itérer plusieurs parties document exemple requète illustration riable sensorId successivement objet mesures SPARQL seule manière extraire terme littéral serait utiliser clause impliquant fonction liaison Cependant fonctions sortent terme peuvent utilisées générer liaisons bindings conséquence introduisons seconde extension clauses iterator sortent ensemble termes remplacent liaison courante autant liaisons éléments ensemble Définition Clause iterator ensemble clauses iterator défini équation iterator clause iterator particulière alors étendre patrons requête SPARQL liste clauses source iterator nombre ordre quelconque faisons exprès changer définition faciliter réutilisation implémentations SPARQL existantes Définition Patron requête SPARQL Generate ensemble patrons requête SPARQL Generate séquence clauses source iterator suivie patron quête SPARQL Finalement ensemble requêtes SPARQL Generate étendQ gabarit graphe potentiellement autres requêtes SPARQL Generate Définition Requête SPARQL Generate ensemble requêtes SPARQL Generate défini comme petit ensemble requêtes SPARQL Generate définies requêtes imbriquées mettent factoriser génération SPARQL définit fonctions intégrées nommées CONCAT Autre exemple résultats évaluation XPath document unitaire rmlproeg1 sparql generate tests reports Lefrançois Sémantique SPARQL Generate requête SPARQL Generate exécutée modèle données étend celui SPARQL ensemble données ensemble données paire graphe appelé graphe défaut ensemble paires graphe sorte aucune paire contient requêter documents formats arbitraires introduisons notion ensemble documents documentset analogie ensembles données Définition Ensemble documents ensemble documents ensemble triplets élément triplet document demandé document littéral modélise document donnée littéral document aucune paire triplets distincts mêmes premiers éléments alléger formules également application associe couple littéral seulement sinon ensemble documents stocké interne représenter représente appel décrit comment contenu négocié contenu représentation obtenue succès décrit représentation media langue encodage réutilisons certains concepts sémantique SPARQL tations concises ensemble liaisons défini équation Contrairement standard SPARQL utilisons fonction totale ensemble termes variables utilisons élément représenter image variable Comme SPARQL domaine liaison ensemble variables liées terme introduisons ensemble particulier liaisons appelées liaisons substitution domaine singleton liaison substitution opérateur composition gauche défini priorité liaison revient autres termes toute variable finalement autres Chaque moteur SPARQL reconnaît ensemble fonctions liaison SPARQL moins JSONPath distance fonction liaison socie expression fonction évaluation terme Formellement Génération partir sources données formats hétérogènes moteur SPARQL donné équation définit application fonctions liaison associe fonction liaison reconnue fonction liaison application tions itération définie manière analogue moteur SPARQL Generate reconnait moins sgiter JSONListKeys évaluation expression fonction ensemble termes Etant donné ensemble fonctions itération reconnues équation définit application fonctions itération généralisons définition liaisons domaine inclue ensemble fonctions expression ensemble liaisons généralisées contient ralisation liaisons défini récursivement clause source source permet modifier liaison riable document 780496 495157 clause iterator iterator typiquement extraire parties importantes document partir liaison générer plusieurs autres liaisons variable éléments évaluation sensorId successivement clauses peuvent combinées liste quelconques SoitΣ Définissons induction évaluation telle liste source iterator source source iterator iterator patron requête SPARQL ensemble données ensemble liaisons solutions liaison définie SPARQL lement liste clauses source iterator évaluation patron requête SPARQL Generate ensemble documents défini équation définit maintenant liaison initiale alors ensemble liaisons solution requête définie équation gabarit graphe toute liaison notons graphe généré instanciation rapport selon Harris Seaborne finalement définir résultat évaluation requête SPARQL Generate cursivement Soient requête simple requête quelconque Lefrançois liaison trois équations suivantes définissent graphe généré Implémentation évaluation SPARQL Generate Approche générique serait avantageux pouvoir implémenter SPARQL Generate importe moteur SPARQL existant effet moteur fournit application fonctions liaison connaître toute liaison version généralisée fonction SELECT prend patron requête SPARQL entrée renvoie ensemble liaisons solution fonction INSTANTIATE prend gabarit graphe liaison entrée renvoie graphe correspondant instanciation rapport gestion ensembles données implémentation SPARQL Generate pourrait contenter fournir ensemble documents application fonctions itération ensemble blocs données ligne inline block résultat préfixer patron requête données ligne théorème dessous permet proposer algorithme utilisé implémenter SPARQL Generate dessus importe moteur SPARQL Théorème requête SPARQL liste clauses source itera évaluation patron requête SPARQL Generate équivalente évaluation résultat évaluation Démonstration résultat direct partir équations traduction notations phrase sparql11 query block sémantique SPARQL Implémentation première implémentation SPARQL Generate développée dessus moteur SPARQL Apache décrite précisément Lefrançois documen ligne rendue disponible source archive exécutable service formulaire ligne Cette implémentation intègre instant fonctions liaison itération générer partir formats données suivants texte apache sparql generate Génération partir sources données formats hétérogènes Algorithm Implémentation naïve SPARQL Generate moteur SPARQL procedure GENERATE singleton contient liaison source iterator remplacer SELECT patron requête préfixé données ligne graphe INSTANTIATE opérer union graphe fusion fusionner nœuds anonymes GENERATE return procedure Evaluation préliminaire évaluation SPARQL Generate contribution principale article pouvons néanmoins rapporter certain nombre comparaisons qualitatives pistes développer étude comparative approfondie entre SPARQL Generate terme complexité cognitive expressivité performance encore passage échelle abord implémentation SPARQL Generate propose suite unitaires particulier chacun exemples rencontrés spécifications transposé requête SPARQL Generate chacun tests unitaires plémentation référence suggère expressivité SPARQL Generate suffisante plupart envisagés requêtes semblent ailleurs concises équivalent Enfin SPARQL Generate bénéficie expressivité algorithme simplifié montre subtilités liées gestion nœuds anonymes feront objet autre article Lefrançois SPARQL Contrairement possible filtrer agréger résultats modifier séquences solutions Enfin SPARQL Generate bénéficie fonctions tégrées SPARQL ainsi mécanisme extension standard fonctions liaison équivalent mécanisme extension fonctions itération ailleurs implémentation SPARQL Generate rendant possible tiers développer utiliser fonctions itération personnalisées importe format Conclusion problème exploitation données sources formats hétérogènes commun certaines solutions existent intégrer données modèle données article avons défini nouveau langage SPARQL Generate permet décrire génération partir ensemble données ensemble documents formats hétérogènes SPARQL Generate étend SPARQL bénéficie expressivité extensibilité maîtrisé rapidement ingénieurs connaissance avons défini syntaxes concrètes abstraites ainsi séman tique nouveau langage avons alors démontré implémenté dessus importe moteur SPARQL existant première implémentation Apache démontre utilisation approches concurrentes couverts permet générer partir formats données suivants texte travaux futurs incluent notamment étude comparative profondie entre SPARQL Generate terme complexité cognitive expressivité performance encore passage échelle Remerciements travail partiellement financé projet ITEA2 12004 Smart Energy Aware projet OpenSensingCity convention bilatérale recherche ENGIE Références Arenas Bertails hommeaux Sequeda Direct Mapping lational Recommendation September Recommendation World Consortium Connolly Gleaning Resource Descriptions Dialects Languages GRDDL Recommendation September Recommendation World Consortium Sundara Cyganiak R2RML Mapping Language Recommendation September Recommendation World Consortium Aglio Polleres Lopes Bischof Querying XSPARQL Verborgh Mannens Proceedings Developers Génération partir sources données formats hétérogènes Workshop located International Semantic Conference Garda Italy October Volume Workshop Procee dings Central Europe Dimou Sande Colpaert Verborgh Mannens deWalle Generic Language Integrated Mappings Heterogeneous Bizer Heath Berners Proceedings Workshop Linked located International World Conference Seoul Korea April Volume Workshop Proceedings Central Europe Harris Seaborne SPARQL Query Language Recommendation March Recommendation World Consortium comparison mapping languages Ghidini Ngomo Lindstaedt Pellegrini Proceedings International Conference Semantic Systems SEMANTICS Austria Septem International Conference Proceeding Series Press Lefrançois Zimmermann Bakerally Flexible generation heterogeneous sources SPARQL Generate International Conference Knowledge Engineering Knowledge Management Lopes Bischof Polleres semantics heterogeneous querying relational XSPARQL Proceedings Portuguese Conference Artificial Intelligence EPIA2011 Computational Logic Applications Track Lisbon Portugal October Polleres Krennwallner Lopes Kopecký Decker XSPARQL guage Specification Member Submission January Member Submis World Consortium Tandy Herman Kellogg Generating Tabular Recommendation December Recommendation World Consortium Summary Unlike promoted initiative published organi zations formats Furthermore Things constrained objects prefer binary formats textual formats context still lingua franca enable semantic interoper ability integration heterogeneous formats reasoning querying Several tools formalisms designed transform documents based transformation mapping languages GRDDL XSPARQL R2RML paper defines language SPARQL Generate designed extension SPARQL generate dataset documents arbitrary formats implemented existing SPARQL engine mention first implementation Apache leverages expressivity extensibility SPARQL supported formats